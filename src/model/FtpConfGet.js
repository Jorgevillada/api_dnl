/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.FtpConfGet = factory(root.DnlApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FtpConfGet model module.
   * @module model/FtpConfGet
   * @version 1.2.62
   */

  /**
   * Constructs a new <code>FtpConfGet</code>.
   * @alias module:model/FtpConfGet
   * @class
   */
  var exports = function() {
    var _this = this;























  };

  /**
   * Constructs a <code>FtpConfGet</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FtpConfGet} obj Optional instance to populate.
   * @return {module:model/FtpConfGet} The populated <code>FtpConfGet</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('compression')) {
        obj['compression'] = ApiClient.convertToType(data['compression'], 'String');
      }
      if (data.hasOwnProperty('non_zero')) {
        obj['non_zero'] = ApiClient.convertToType(data['non_zero'], 'Boolean');
      }
      if (data.hasOwnProperty('ftp_server_port')) {
        obj['ftp_server_port'] = ApiClient.convertToType(data['ftp_server_port'], 'String');
      }
      if (data.hasOwnProperty('include_all_egress')) {
        obj['include_all_egress'] = ApiClient.convertToType(data['include_all_egress'], 'Boolean');
      }
      if (data.hasOwnProperty('ftp_directory')) {
        obj['ftp_directory'] = ApiClient.convertToType(data['ftp_directory'], 'String');
      }
      if (data.hasOwnProperty('include_all_ingress')) {
        obj['include_all_ingress'] = ApiClient.convertToType(data['include_all_ingress'], 'Boolean');
      }
      if (data.hasOwnProperty('ftp_password')) {
        obj['ftp_password'] = ApiClient.convertToType(data['ftp_password'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('include_header')) {
        obj['include_header'] = ApiClient.convertToType(data['include_header'], 'Boolean');
      }
      if (data.hasOwnProperty('file_breakdown')) {
        obj['file_breakdown'] = ApiClient.convertToType(data['file_breakdown'], 'String');
      }
      if (data.hasOwnProperty('ftp_username')) {
        obj['ftp_username'] = ApiClient.convertToType(data['ftp_username'], 'String');
      }
      if (data.hasOwnProperty('active')) {
        obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
      }
      if (data.hasOwnProperty('ftp_server_ip')) {
        obj['ftp_server_ip'] = ApiClient.convertToType(data['ftp_server_ip'], 'String');
      }
      if (data.hasOwnProperty('include_fields')) {
        obj['include_fields'] = ApiClient.convertToType(data['include_fields'], ['String']);
      }
      if (data.hasOwnProperty('ingress_trunks')) {
        obj['ingress_trunks'] = ApiClient.convertToType(data['ingress_trunks'], ['Number']);
      }
      if (data.hasOwnProperty('frequency')) {
        obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
      }
      if (data.hasOwnProperty('orig_return_code')) {
        obj['orig_return_code'] = ApiClient.convertToType(data['orig_return_code'], ['Number']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('term_return_code')) {
        obj['term_return_code'] = ApiClient.convertToType(data['term_return_code'], ['Number']);
      }
      if (data.hasOwnProperty('max_line_per_file')) {
        obj['max_line_per_file'] = ApiClient.convertToType(data['max_line_per_file'], 'Number');
      }
      if (data.hasOwnProperty('time')) {
        obj['time'] = ApiClient.convertToType(data['time'], 'String');
      }
      if (data.hasOwnProperty('egress_trunks')) {
        obj['egress_trunks'] = ApiClient.convertToType(data['egress_trunks'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/FtpConfGet.CompressionEnum} compression
   * @default 'gz'
   */
  exports.prototype['compression'] = 'gz';
  /**
   * @member {Boolean} non_zero
   */
  exports.prototype['non_zero'] = undefined;
  /**
   * @member {String} ftp_server_port
   */
  exports.prototype['ftp_server_port'] = undefined;
  /**
   * @member {Boolean} include_all_egress
   */
  exports.prototype['include_all_egress'] = undefined;
  /**
   * @member {String} ftp_directory
   */
  exports.prototype['ftp_directory'] = undefined;
  /**
   * @member {Boolean} include_all_ingress
   */
  exports.prototype['include_all_ingress'] = undefined;
  /**
   * @member {String} ftp_password
   */
  exports.prototype['ftp_password'] = undefined;
  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {Boolean} include_header
   */
  exports.prototype['include_header'] = undefined;
  /**
   * @member {module:model/FtpConfGet.FileBreakdownEnum} file_breakdown
   * @default 'as one big file'
   */
  exports.prototype['file_breakdown'] = 'as one big file';
  /**
   * @member {String} ftp_username
   */
  exports.prototype['ftp_username'] = undefined;
  /**
   * @member {Boolean} active
   */
  exports.prototype['active'] = undefined;
  /**
   * @member {String} ftp_server_ip
   */
  exports.prototype['ftp_server_ip'] = undefined;
  /**
   * @member {Array.<String>} include_fields
   */
  exports.prototype['include_fields'] = undefined;
  /**
   * @member {Array.<Number>} ingress_trunks
   */
  exports.prototype['ingress_trunks'] = undefined;
  /**
   * @member {module:model/FtpConfGet.FrequencyEnum} frequency
   * @default 'daily'
   */
  exports.prototype['frequency'] = 'daily';
  /**
   * @member {Array.<Number>} orig_return_code
   */
  exports.prototype['orig_return_code'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {Array.<Number>} term_return_code
   */
  exports.prototype['term_return_code'] = undefined;
  /**
   * @member {Number} max_line_per_file
   */
  exports.prototype['max_line_per_file'] = undefined;
  /**
   * @member {String} time
   */
  exports.prototype['time'] = undefined;
  /**
   * @member {Array.<Number>} egress_trunks
   */
  exports.prototype['egress_trunks'] = undefined;


  /**
   * Allowed values for the <code>compression</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CompressionEnum = {
    /**
     * value: "gz"
     * @const
     */
    "gz": "gz",
    /**
     * value: "tar.gz"
     * @const
     */
    "tar.gz": "tar.gz",
    /**
     * value: "tar.bz2"
     * @const
     */
    "tar.bz2": "tar.bz2",
    /**
     * value: "zip"
     * @const
     */
    "zip": "zip"  };

  /**
   * Allowed values for the <code>file_breakdown</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FileBreakdownEnum = {
    /**
     * value: "as one big file"
     * @const
     */
    "one big file": "as one big file",
    /**
     * value: "as hourly file"
     * @const
     */
    "hourly file": "as hourly file",
    /**
     * value: "as daily file"
     * @const
     */
    "daily file": "as daily file"  };

  /**
   * Allowed values for the <code>frequency</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FrequencyEnum = {
    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",
    /**
     * value: "hourly"
     * @const
     */
    "hourly": "hourly",
    /**
     * value: "minutely"
     * @const
     */
    "minutely": "minutely",
    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly"  };


  return exports;
}));


