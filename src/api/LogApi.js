/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/InlineResponse200100', 'model/InlineResponse200101', 'model/InlineResponse200102', 'model/InlineResponse200103', 'model/InlineResponse200104', 'model/InlineResponse200105', 'model/InlineResponse200106', 'model/InlineResponse200107', 'model/InlineResponse200108', 'model/InlineResponse200109', 'model/InlineResponse200110', 'model/InlineResponse200111', 'model/InlineResponse200112', 'model/InlineResponse200113', 'model/InlineResponse200114', 'model/InlineResponse200115', 'model/InlineResponse20085', 'model/InlineResponse20086', 'model/InlineResponse20087', 'model/InlineResponse20088', 'model/InlineResponse20089', 'model/InlineResponse20090', 'model/InlineResponse20091', 'model/InlineResponse20092', 'model/InlineResponse20093', 'model/InlineResponse20094', 'model/InlineResponse20095', 'model/InlineResponse20096', 'model/InlineResponse20097', 'model/InlineResponse20098', 'model/InlineResponse20099', 'model/ObjectNotFoundError', 'model/Success', 'model/UnauthenticatedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/InlineResponse200100'), require('../model/InlineResponse200101'), require('../model/InlineResponse200102'), require('../model/InlineResponse200103'), require('../model/InlineResponse200104'), require('../model/InlineResponse200105'), require('../model/InlineResponse200106'), require('../model/InlineResponse200107'), require('../model/InlineResponse200108'), require('../model/InlineResponse200109'), require('../model/InlineResponse200110'), require('../model/InlineResponse200111'), require('../model/InlineResponse200112'), require('../model/InlineResponse200113'), require('../model/InlineResponse200114'), require('../model/InlineResponse200115'), require('../model/InlineResponse20085'), require('../model/InlineResponse20086'), require('../model/InlineResponse20087'), require('../model/InlineResponse20088'), require('../model/InlineResponse20089'), require('../model/InlineResponse20090'), require('../model/InlineResponse20091'), require('../model/InlineResponse20092'), require('../model/InlineResponse20093'), require('../model/InlineResponse20094'), require('../model/InlineResponse20095'), require('../model/InlineResponse20096'), require('../model/InlineResponse20097'), require('../model/InlineResponse20098'), require('../model/InlineResponse20099'), require('../model/ObjectNotFoundError'), require('../model/Success'), require('../model/UnauthenticatedError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.LogApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.InlineResponse200100, root.DnlApi.InlineResponse200101, root.DnlApi.InlineResponse200102, root.DnlApi.InlineResponse200103, root.DnlApi.InlineResponse200104, root.DnlApi.InlineResponse200105, root.DnlApi.InlineResponse200106, root.DnlApi.InlineResponse200107, root.DnlApi.InlineResponse200108, root.DnlApi.InlineResponse200109, root.DnlApi.InlineResponse200110, root.DnlApi.InlineResponse200111, root.DnlApi.InlineResponse200112, root.DnlApi.InlineResponse200113, root.DnlApi.InlineResponse200114, root.DnlApi.InlineResponse200115, root.DnlApi.InlineResponse20085, root.DnlApi.InlineResponse20086, root.DnlApi.InlineResponse20087, root.DnlApi.InlineResponse20088, root.DnlApi.InlineResponse20089, root.DnlApi.InlineResponse20090, root.DnlApi.InlineResponse20091, root.DnlApi.InlineResponse20092, root.DnlApi.InlineResponse20093, root.DnlApi.InlineResponse20094, root.DnlApi.InlineResponse20095, root.DnlApi.InlineResponse20096, root.DnlApi.InlineResponse20097, root.DnlApi.InlineResponse20098, root.DnlApi.InlineResponse20099, root.DnlApi.ObjectNotFoundError, root.DnlApi.Success, root.DnlApi.UnauthenticatedError);
  }
}(this, function(ApiClient, AttributeNotExists, InlineResponse200100, InlineResponse200101, InlineResponse200102, InlineResponse200103, InlineResponse200104, InlineResponse200105, InlineResponse200106, InlineResponse200107, InlineResponse200108, InlineResponse200109, InlineResponse200110, InlineResponse200111, InlineResponse200112, InlineResponse200113, InlineResponse200114, InlineResponse200115, InlineResponse20085, InlineResponse20086, InlineResponse20087, InlineResponse20088, InlineResponse20089, InlineResponse20090, InlineResponse20091, InlineResponse20092, InlineResponse20093, InlineResponse20094, InlineResponse20095, InlineResponse20096, InlineResponse20097, InlineResponse20098, InlineResponse20099, ObjectNotFoundError, Success, UnauthenticatedError) {
  'use strict';

  /**
   * Log service.
   * @module api/LogApi
   * @version 1.2.10
   */

  /**
   * Constructs a new LogApi. 
   * @alias module:api/LogApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the logAlertRuleGet operation.
     * @callback module:api/LogApi~logAlertRuleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets alertrule log records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.alertRulesId 
     * @param {module:model/String} opts.status 
     * @param {String} opts.finishTimeGt 
     * @param {String} opts.finishTimeLt 
     * @param {module:api/LogApi~logAlertRuleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200112}
     */
    this.logAlertRuleGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'alert_rules_id': opts['alertRulesId'],
        'status': opts['status'],
        'finish_time_gt': opts['finishTimeGt'],
        'finish_time_lt': opts['finishTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200112;

      return this.apiClient.callApi(
        '/log/alert_rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logAuthGet operation.
     * @callback module:api/LogApi~logAuthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets authorizationlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.failedReason 
     * @param {String} opts.loginIp 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {module:api/LogApi~logAuthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20086}
     */
    this.logAuthGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'failed_reason': opts['failedReason'],
        'login_ip': opts['loginIp'],
        'status': opts['status'],
        'username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20086;

      return this.apiClient.callApi(
        '/log/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logBalanceGet operation.
     * @callback module:api/LogApi~logBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20089} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets balancelog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {Number} opts.id 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateLt 
     * @param {module:api/LogApi~logBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20089}
     */
    this.logBalanceGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'id': opts['id'],
        'date_gt': opts['dateGt'],
        'date_lt': opts['dateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20089;

      return this.apiClient.callApi(
        '/log/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logCreditGet operation.
     * @callback module:api/LogApi~logCreditGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20090} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets creditlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.carrierName 
     * @param {Number} opts.id 
     * @param {String} opts.modifiedBy 
     * @param {String} opts.modifiedOnGt 
     * @param {String} opts.modifiedOnLt 
     * @param {module:api/LogApi~logCreditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20090}
     */
    this.logCreditGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'carrier_name': opts['carrierName'],
        'id': opts['id'],
        'modified_by': opts['modifiedBy'],
        'modified_on_gt': opts['modifiedOnGt'],
        'modified_on_lt': opts['modifiedOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20090;

      return this.apiClient.callApi(
        '/log/credit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logEmailGet operation.
     * @callback module:api/LogApi~logEmailGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets emaillog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.content 
     * @param {String} opts.sentFrom 
     * @param {String} opts.sentTo 
     * @param {module:model/String} opts.status 
     * @param {String} opts.subject 
     * @param {module:model/String} opts.type 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateLt 
     * @param {module:api/LogApi~logEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20087}
     */
    this.logEmailGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'content': opts['content'],
        'sent_from': opts['sentFrom'],
        'sent_to': opts['sentTo'],
        'status': opts['status'],
        'subject': opts['subject'],
        'type': opts['type'],
        'date_gt': opts['dateGt'],
        'date_lt': opts['dateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20087;

      return this.apiClient.callApi(
        '/log/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logExportGet operation.
     * @callback module:api/LogApi~logExportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20091} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets importexportlogs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.obj 
     * @param {module:model/String} opts.status 
     * @param {String} opts.downloadTimeGt 
     * @param {String} opts.downloadTimeLt 
     * @param {String} opts.finishedTimeGt 
     * @param {String} opts.finishedTimeLt 
     * @param {module:api/LogApi~logExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20091}
     */
    this.logExportGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'obj': opts['obj'],
        'status': opts['status'],
        'download_time_gt': opts['downloadTimeGt'],
        'download_time_lt': opts['downloadTimeLt'],
        'finished_time_gt': opts['finishedTimeGt'],
        'finished_time_lt': opts['finishedTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20091;

      return this.apiClient.callApi(
        '/log/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logFraudDetectionGet operation.
     * @callback module:api/LogApi~logFraudDetectionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200111} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets frauddetection execution records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.fraudDetectionId 
     * @param {module:model/String} opts.status 
     * @param {String} opts.finishTimeGt 
     * @param {String} opts.finishTimeLt 
     * @param {module:api/LogApi~logFraudDetectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200111}
     */
    this.logFraudDetectionGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'fraud_detection_id': opts['fraudDetectionId'],
        'status': opts['status'],
        'finish_time_gt': opts['finishTimeGt'],
        'finish_time_lt': opts['finishTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200111;

      return this.apiClient.callApi(
        '/log/fraud_detection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logFtpGet operation.
     * @callback module:api/LogApi~logFtpGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20093} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ftpcdrlogs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.clientAlias 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.status 
     * @param {String} opts.cdrEndTimeLt 
     * @param {String} opts.cdrStartTimeGt 
     * @param {String} opts.ftpEndTimeLt 
     * @param {String} opts.ftpStartTimeGt 
     * @param {module:api/LogApi~logFtpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20093}
     */
    this.logFtpGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_alias': opts['clientAlias'],
        'id': opts['id'],
        'status': opts['status'],
        'cdr_end_time_lt': opts['cdrEndTimeLt'],
        'cdr_start_time_gt': opts['cdrStartTimeGt'],
        'ftp_end_time_lt': opts['ftpEndTimeLt'],
        'ftp_start_time_gt': opts['ftpStartTimeGt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20093;

      return this.apiClient.callApi(
        '/log/ftp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logFtpServerGet operation.
     * @callback module:api/LogApi~logFtpServerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20094} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ftpserverlogs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.cmd 
     * @param {Number} opts.id 
     * @param {String} opts.timeGt 
     * @param {String} opts.timeLt 
     * @param {module:api/LogApi~logFtpServerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20094}
     */
    this.logFtpServerGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'cmd': opts['cmd'],
        'id': opts['id'],
        'time_gt': opts['timeGt'],
        'time_lt': opts['timeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20094;

      return this.apiClient.callApi(
        '/log/ftp_server', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logImportGet operation.
     * @callback module:api/LogApi~logImportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20092} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets importexportlogs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.fileName 
     * @param {Number} opts.id 
     * @param {String} opts.obj 
     * @param {module:model/String} opts.status 
     * @param {String} opts.finishedTimeGt 
     * @param {String} opts.finishedTimeLt 
     * @param {String} opts.uploadTimeGt 
     * @param {String} opts.uploadTimeLt 
     * @param {module:api/LogApi~logImportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20092}
     */
    this.logImportGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'file_name': opts['fileName'],
        'id': opts['id'],
        'obj': opts['obj'],
        'status': opts['status'],
        'finished_time_gt': opts['finishedTimeGt'],
        'finished_time_lt': opts['finishedTimeLt'],
        'upload_time_gt': opts['uploadTimeGt'],
        'upload_time_lt': opts['uploadTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20092;

      return this.apiClient.callApi(
        '/log/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logInvoiceCdrGet operation.
     * @callback module:api/LogApi~logInvoiceCdrGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20095} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets invoicecdrlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.clientName 
     * @param {Number} opts.id 
     * @param {String} opts.endTimeGt 
     * @param {String} opts.endTimeLt 
     * @param {String} opts.startTimeGt 
     * @param {String} opts.startTimeLt 
     * @param {module:api/LogApi~logInvoiceCdrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20095}
     */
    this.logInvoiceCdrGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_name': opts['clientName'],
        'id': opts['id'],
        'end_time_gt': opts['endTimeGt'],
        'end_time_lt': opts['endTimeLt'],
        'start_time_gt': opts['startTimeGt'],
        'start_time_lt': opts['startTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20095;

      return this.apiClient.callApi(
        '/log/invoice_cdr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logInvoiceGet operation.
     * @callback module:api/LogApi~logInvoiceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets invoicelog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.status 
     * @param {String} opts.endTimeGt 
     * @param {String} opts.endTimeLt 
     * @param {String} opts.startTimeGt 
     * @param {String} opts.startTimeLt 
     * @param {module:api/LogApi~logInvoiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20096}
     */
    this.logInvoiceGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'status': opts['status'],
        'end_time_gt': opts['endTimeGt'],
        'end_time_lt': opts['endTimeLt'],
        'start_time_gt': opts['startTimeGt'],
        'start_time_lt': opts['startTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20096;

      return this.apiClient.callApi(
        '/log/invoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logIpModifyGet operation.
     * @callback module:api/LogApi~logIpModifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20097} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ipmodiflog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts._new 
     * @param {String} opts.old 
     * @param {String} opts.trunkId 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/LogApi~logIpModifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20097}
     */
    this.logIpModifyGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'new': opts['_new'],
        'old': opts['old'],
        'trunk_id': opts['trunkId'],
        'update_by': opts['updateBy'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20097;

      return this.apiClient.callApi(
        '/log/ip_modify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logLicenseModifyGet operation.
     * @callback module:api/LogApi~logLicenseModifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20099} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets licensemodificationlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.modifyBy 
     * @param {Number} opts.newValue 
     * @param {Number} opts.oldValue 
     * @param {String} opts.switchName 
     * @param {module:model/String} opts.type 
     * @param {String} opts.modifyOnGt 
     * @param {String} opts.modifyOnLt 
     * @param {module:api/LogApi~logLicenseModifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20099}
     */
    this.logLicenseModifyGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'modify_by': opts['modifyBy'],
        'new_value': opts['newValue'],
        'old_value': opts['oldValue'],
        'switch_name': opts['switchName'],
        'type': opts['type'],
        'modify_on_gt': opts['modifyOnGt'],
        'modify_on_lt': opts['modifyOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20099;

      return this.apiClient.callApi(
        '/log/license_modify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logModifyGet operation.
     * @callback module:api/LogApi~logModifyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20098} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets modiflog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.detail 
     * @param {Number} opts.id 
     * @param {String} opts.name 
     * @param {module:model/String} opts.type 
     * @param {String} opts.timeGt 
     * @param {String} opts.timeLt 
     * @param {module:api/LogApi~logModifyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20098}
     */
    this.logModifyGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'detail': opts['detail'],
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'time_gt': opts['timeGt'],
        'time_lt': opts['timeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20098;

      return this.apiClient.callApi(
        '/log/modify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logOrigGet operation.
     * @callback module:api/LogApi~logOrigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200100} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets origlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.detail 
     * @param {Number} opts.logId 
     * @param {String} opts.module 
     * @param {module:model/String} opts.type 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateOnGt 
     * @param {String} opts.updateOnLt 
     * @param {module:api/LogApi~logOrigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200100}
     */
    this.logOrigGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'detail': opts['detail'],
        'log_id': opts['logId'],
        'module': opts['module'],
        'type': opts['type'],
        'update_by': opts['updateBy'],
        'update_on_gt': opts['updateOnGt'],
        'update_on_lt': opts['updateOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200100;

      return this.apiClient.callApi(
        '/log/orig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRateDownloadGet operation.
     * @callback module:api/LogApi~logRateDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratedownloadlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.logDetailId 
     * @param {Number} opts.resourceId 
     * @param {String} opts.downloadTimeGt 
     * @param {String} opts.downloadTimeLt 
     * @param {module:api/LogApi~logRateDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200102}
     */
    this.logRateDownloadGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'log_detail_id': opts['logDetailId'],
        'resource_id': opts['resourceId'],
        'download_time_gt': opts['downloadTimeGt'],
        'download_time_lt': opts['downloadTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200102;

      return this.apiClient.callApi(
        '/log/rate_download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRateGenerationGet operation.
     * @callback module:api/LogApi~logRateGenerationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200104} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rategenerationhistory log
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {Number} opts.id 
     * @param {Boolean} opts.isApplied 
     * @param {Number} opts.rateGenerationTemplateId 
     * @param {module:model/String} opts.status 
     * @param {String} opts.finishedTimeGt 
     * @param {String} opts.finishedTimeLt 
     * @param {module:api/LogApi~logRateGenerationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200104}
     */
    this.logRateGenerationGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'id': opts['id'],
        'is_applied': opts['isApplied'],
        'rate_generation_template_id': opts['rateGenerationTemplateId'],
        'status': opts['status'],
        'finished_time_gt': opts['finishedTimeGt'],
        'finished_time_lt': opts['finishedTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200104;

      return this.apiClient.callApi(
        '/log/rate_generation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRateMassEditGet operation.
     * @callback module:api/LogApi~logRateMassEditGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200103} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratemasseditlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.actionType 
     * @param {Number} opts.clientId 
     * @param {Number} opts.id 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.actionTimeGt 
     * @param {String} opts.actionTimeLt 
     * @param {module:api/LogApi~logRateMassEditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200103}
     */
    this.logRateMassEditGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'action_type': opts['actionType'],
        'client_id': opts['clientId'],
        'id': opts['id'],
        'rate_table_id': opts['rateTableId'],
        'action_time_gt': opts['actionTimeGt'],
        'action_time_lt': opts['actionTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200103;

      return this.apiClient.callApi(
        '/log/rate_mass_edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRateUploadGet operation.
     * @callback module:api/LogApi~logRateUploadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rateuploadtask
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.method 
     * @param {String} opts.operatorUser 
     * @param {Number} opts.rateTableId 
     * @param {module:model/String} opts.status 
     * @param {String} opts.startTimeGt 
     * @param {String} opts.startTimeLt 
     * @param {module:api/LogApi~logRateUploadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200101}
     */
    this.logRateUploadGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'method': opts['method'],
        'operator_user': opts['operatorUser'],
        'rate_table_id': opts['rateTableId'],
        'status': opts['status'],
        'start_time_gt': opts['startTimeGt'],
        'start_time_lt': opts['startTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200101;

      return this.apiClient.callApi(
        '/log/rate_upload', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRegenerateBalanceGet operation.
     * @callback module:api/LogApi~logRegenerateBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20088} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets balancedailyresettask
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.createBy 
     * @param {module:model/String} opts.status 
     * @param {String} opts.finishedTimeGt 
     * @param {String} opts.finishedTimeLt 
     * @param {String} opts.startTimeGt 
     * @param {String} opts.startTimeLt 
     * @param {module:api/LogApi~logRegenerateBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20088}
     */
    this.logRegenerateBalanceGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'create_by': opts['createBy'],
        'status': opts['status'],
        'finished_time_gt': opts['finishedTimeGt'],
        'finished_time_lt': opts['finishedTimeLt'],
        'start_time_gt': opts['startTimeGt'],
        'start_time_lt': opts['startTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20088;

      return this.apiClient.callApi(
        '/log/regenerate_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRerateCdrDownloadGet operation.
     * @callback module:api/LogApi~logRerateCdrDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets reratecdrdownloadlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.status 
     * @param {String} opts.createOnGt 
     * @param {String} opts.createOnLt 
     * @param {String} opts.finishedTimeGt 
     * @param {String} opts.finishedTimeLt 
     * @param {module:api/LogApi~logRerateCdrDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200114}
     */
    this.logRerateCdrDownloadGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'status': opts['status'],
        'create_on_gt': opts['createOnGt'],
        'create_on_lt': opts['createOnLt'],
        'finished_time_gt': opts['finishedTimeGt'],
        'finished_time_lt': opts['finishedTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200114;

      return this.apiClient.callApi(
        '/log/rerate/cdr_download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRerateExecGet operation.
     * @callback module:api/LogApi~logRerateExecGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200113} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets reratereportexeclog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {Number} opts.execType 
     * @param {module:model/String} opts.status 
     * @param {String} opts.createOnGt 
     * @param {String} opts.createOnLt 
     * @param {String} opts.finishTimeGt 
     * @param {String} opts.finishTimeLt 
     * @param {module:api/LogApi~logRerateExecGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200113}
     */
    this.logRerateExecGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'exec_type': opts['execType'],
        'status': opts['status'],
        'create_on_gt': opts['createOnGt'],
        'create_on_lt': opts['createOnLt'],
        'finish_time_gt': opts['finishTimeGt'],
        'finish_time_lt': opts['finishTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200113;

      return this.apiClient.callApi(
        '/log/rerate/exec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRetrievePasswordGet operation.
     * @callback module:api/LogApi~logRetrievePasswordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets retrievepasswordlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.emailAddresses 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {String} opts.modifyTimeGt 
     * @param {String} opts.modifyTimeLt 
     * @param {module:api/LogApi~logRetrievePasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200105}
     */
    this.logRetrievePasswordGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'email_addresses': opts['emailAddresses'],
        'id': opts['id'],
        'status': opts['status'],
        'username': opts['username'],
        'modify_time_gt': opts['modifyTimeGt'],
        'modify_time_lt': opts['modifyTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200105;

      return this.apiClient.callApi(
        '/log/retrieve_password', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRevisionsGet operation.
     * @callback module:api/LogApi~logRevisionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets object revisions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.action 
     * @param {String} opts.entityName 
     * @param {String} opts.entityPk 
     * @param {Number} opts.revisionNumber 
     * @param {Number} opts.userId 
     * @param {String} opts.revisionTimeGt 
     * @param {String} opts.revisionTimeLt 
     * @param {module:api/LogApi~logRevisionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20085}
     */
    this.logRevisionsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'action': opts['action'],
        'entity_name': opts['entityName'],
        'entity_pk': opts['entityPk'],
        'revision_number': opts['revisionNumber'],
        'user_id': opts['userId'],
        'revision_time_gt': opts['revisionTimeGt'],
        'revision_time_lt': opts['revisionTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/log/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logRevisionsIdRestorePost operation.
     * @callback module:api/LogApi~logRevisionsIdRestorePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores object to the specified revision
     * @param {Number} id ID of revision to restore to
     * @param {module:api/LogApi~logRevisionsIdRestorePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.logRevisionsIdRestorePost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logRevisionsIdRestorePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/log/revisions/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logScheduledReportGet operation.
     * @callback module:api/LogApi~logScheduledReportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets scheduledreportlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.emailTo 
     * @param {Number} opts.id 
     * @param {String} opts.reportName 
     * @param {String} opts.executeTimeGt 
     * @param {String} opts.executeTimeLt 
     * @param {module:api/LogApi~logScheduledReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    this.logScheduledReportGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'email_to': opts['emailTo'],
        'id': opts['id'],
        'report_name': opts['reportName'],
        'execute_time_gt': opts['executeTimeGt'],
        'execute_time_lt': opts['executeTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200106;

      return this.apiClient.callApi(
        '/log/scheduled_report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logSchedulerGet operation.
     * @callback module:api/LogApi~logSchedulerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200107} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets schedulerlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.scriptName 
     * @param {String} opts.startTimeGt 
     * @param {String} opts.startTimeLt 
     * @param {module:api/LogApi~logSchedulerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200107}
     */
    this.logSchedulerGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'script_name': opts['scriptName'],
        'start_time_gt': opts['startTimeGt'],
        'start_time_lt': opts['startTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200107;

      return this.apiClient.callApi(
        '/log/scheduler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logSipRegisterGet operation.
     * @callback module:api/LogApi~logSipRegisterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200108} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets sipregistration
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.contact 
     * @param {Number} opts.expires 
     * @param {Number} opts.id 
     * @param {String} opts.networkIp 
     * @param {Number} opts.networkPort 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {String} opts.uptimeGt 
     * @param {String} opts.uptimeLt 
     * @param {module:api/LogApi~logSipRegisterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200108}
     */
    this.logSipRegisterGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'contact': opts['contact'],
        'expires': opts['expires'],
        'id': opts['id'],
        'network_ip': opts['networkIp'],
        'network_port': opts['networkPort'],
        'status': opts['status'],
        'username': opts['username'],
        'uptime_gt': opts['uptimeGt'],
        'uptime_lt': opts['uptimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200108;

      return this.apiClient.callApi(
        '/log/sip_register', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logSqlGet operation.
     * @callback module:api/LogApi~logSqlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200109} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets pgstatactivity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/LogApi~logSqlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200109}
     */
    this.logSqlGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200109;

      return this.apiClient.callApi(
        '/log/sql', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logUserSignonGet operation.
     * @callback module:api/LogApi~logUserSignonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets websession
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.agent 
     * @param {String} opts.host 
     * @param {Number} opts.id 
     * @param {String} opts.msg 
     * @param {Number} opts.userId 
     * @param {String} opts.createTimeGt 
     * @param {String} opts.createTimeLt 
     * @param {module:api/LogApi~logUserSignonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200110}
     */
    this.logUserSignonGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'agent': opts['agent'],
        'host': opts['host'],
        'id': opts['id'],
        'msg': opts['msg'],
        'user_id': opts['userId'],
        'create_time_gt': opts['createTimeGt'],
        'create_time_lt': opts['createTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200110;

      return this.apiClient.callApi(
        '/log/user_signon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logVersionsGet operation.
     * @callback module:api/LogApi~logVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets versioninformation
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.programName 
     * @param {module:api/LogApi~logVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200115}
     */
    this.logVersionsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'program_name': opts['programName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200115;

      return this.apiClient.callApi(
        '/log/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
