/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/InlineResponse200181', 'model/InlineResponse200182', 'model/InlineResponse200183', 'model/InlineResponse200184', 'model/InlineResponse200185', 'model/InlineResponse200186', 'model/InlineResponse200187', 'model/InlineResponse200188', 'model/InlineResponse200189', 'model/InlineResponse200190', 'model/InlineResponse200191', 'model/InlineResponse200192', 'model/InlineResponse200193', 'model/InlineResponse200194', 'model/InlineResponse200195', 'model/InlineResponse200196', 'model/InlineResponse200197', 'model/InlineResponse20023', 'model/InlineResponse20025', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/ResourceDirection', 'model/ResourceIpAll', 'model/ResourcePrefixModify', 'model/ResourcePrefixWithIP', 'model/ResourceReplaceAction', 'model/ResourceTranslationRef', 'model/ResourceWithIps', 'model/Success', 'model/TrunkGroup', 'model/TrunkGroupAddTrunk', 'model/TrunkTemplateFromResource', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/InlineResponse200181'), require('../model/InlineResponse200182'), require('../model/InlineResponse200183'), require('../model/InlineResponse200184'), require('../model/InlineResponse200185'), require('../model/InlineResponse200186'), require('../model/InlineResponse200187'), require('../model/InlineResponse200188'), require('../model/InlineResponse200189'), require('../model/InlineResponse200190'), require('../model/InlineResponse200191'), require('../model/InlineResponse200192'), require('../model/InlineResponse200193'), require('../model/InlineResponse200194'), require('../model/InlineResponse200195'), require('../model/InlineResponse200196'), require('../model/InlineResponse200197'), require('../model/InlineResponse20023'), require('../model/InlineResponse20025'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/ResourceDirection'), require('../model/ResourceIpAll'), require('../model/ResourcePrefixModify'), require('../model/ResourcePrefixWithIP'), require('../model/ResourceReplaceAction'), require('../model/ResourceTranslationRef'), require('../model/ResourceWithIps'), require('../model/Success'), require('../model/TrunkGroup'), require('../model/TrunkGroupAddTrunk'), require('../model/TrunkTemplateFromResource'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.TrunkApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.InlineResponse200181, root.DnlApi.InlineResponse200182, root.DnlApi.InlineResponse200183, root.DnlApi.InlineResponse200184, root.DnlApi.InlineResponse200185, root.DnlApi.InlineResponse200186, root.DnlApi.InlineResponse200187, root.DnlApi.InlineResponse200188, root.DnlApi.InlineResponse200189, root.DnlApi.InlineResponse200190, root.DnlApi.InlineResponse200191, root.DnlApi.InlineResponse200192, root.DnlApi.InlineResponse200193, root.DnlApi.InlineResponse200194, root.DnlApi.InlineResponse200195, root.DnlApi.InlineResponse200196, root.DnlApi.InlineResponse200197, root.DnlApi.InlineResponse20023, root.DnlApi.InlineResponse20025, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.ResourceDirection, root.DnlApi.ResourceIpAll, root.DnlApi.ResourcePrefixModify, root.DnlApi.ResourcePrefixWithIP, root.DnlApi.ResourceReplaceAction, root.DnlApi.ResourceTranslationRef, root.DnlApi.ResourceWithIps, root.DnlApi.Success, root.DnlApi.TrunkGroup, root.DnlApi.TrunkGroupAddTrunk, root.DnlApi.TrunkTemplateFromResource, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, InlineResponse200181, InlineResponse200182, InlineResponse200183, InlineResponse200184, InlineResponse200185, InlineResponse200186, InlineResponse200187, InlineResponse200188, InlineResponse200189, InlineResponse200190, InlineResponse200191, InlineResponse200192, InlineResponse200193, InlineResponse200194, InlineResponse200195, InlineResponse200196, InlineResponse200197, InlineResponse20023, InlineResponse20025, ObjectCreated, ObjectNotFoundError, OperationError, ResourceDirection, ResourceIpAll, ResourcePrefixModify, ResourcePrefixWithIP, ResourceReplaceAction, ResourceTranslationRef, ResourceWithIps, Success, TrunkGroup, TrunkGroupAddTrunk, TrunkTemplateFromResource, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Trunk service.
   * @module api/TrunkApi
   * @version 1.2.10
   */

  /**
   * Constructs a new TrunkApi. 
   * @alias module:api/TrunkApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the trunkDigitMapRefIdDelete operation.
     * @callback module:api/TrunkApi~trunkDigitMapRefIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourcetranslationref
     * @param {Number} refId ResourceTranslationRef id to get info about
     * @param {module:api/TrunkApi~trunkDigitMapRefIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkDigitMapRefIdDelete = function(refId, callback) {
      var postBody = null;

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling trunkDigitMapRefIdDelete");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/digit_map/{ref_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkDigitMapRefIdGet operation.
     * @callback module:api/TrunkApi~trunkDigitMapRefIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200194} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcetranslationref
     * @param {Number} refId ResourceTranslationRef id to get info about
     * @param {module:api/TrunkApi~trunkDigitMapRefIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200194}
     */
    this.trunkDigitMapRefIdGet = function(refId, callback) {
      var postBody = null;

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling trunkDigitMapRefIdGet");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200194;

      return this.apiClient.callApi(
        '/trunk/digit_map/{ref_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkDigitMapRefIdPatch operation.
     * @callback module:api/TrunkApi~trunkDigitMapRefIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200194} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourcetranslationref
     * @param {Number} refId ResourceTranslationRef id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTranslationRef} opts.body ResourceTranslationRef to modify
     * @param {module:api/TrunkApi~trunkDigitMapRefIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200194}
     */
    this.trunkDigitMapRefIdPatch = function(refId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling trunkDigitMapRefIdPatch");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200194;

      return this.apiClient.callApi(
        '/trunk/digit_map/{ref_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkDirectionDirectionIdDelete operation.
     * @callback module:api/TrunkApi~trunkDirectionDirectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourcedirection
     * @param {Number} directionId ResourceDirection id to get info about
     * @param {module:api/TrunkApi~trunkDirectionDirectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkDirectionDirectionIdDelete = function(directionId, callback) {
      var postBody = null;

      // verify the required parameter 'directionId' is set
      if (directionId === undefined || directionId === null) {
        throw new Error("Missing the required parameter 'directionId' when calling trunkDirectionDirectionIdDelete");
      }


      var pathParams = {
        'direction_id': directionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/direction/{direction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkDirectionDirectionIdGet operation.
     * @callback module:api/TrunkApi~trunkDirectionDirectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200190} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcedirection
     * @param {Number} directionId ResourceDirection id to get info about
     * @param {module:api/TrunkApi~trunkDirectionDirectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200190}
     */
    this.trunkDirectionDirectionIdGet = function(directionId, callback) {
      var postBody = null;

      // verify the required parameter 'directionId' is set
      if (directionId === undefined || directionId === null) {
        throw new Error("Missing the required parameter 'directionId' when calling trunkDirectionDirectionIdGet");
      }


      var pathParams = {
        'direction_id': directionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200190;

      return this.apiClient.callApi(
        '/trunk/direction/{direction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkDirectionDirectionIdPatch operation.
     * @callback module:api/TrunkApi~trunkDirectionDirectionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200190} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourcedirection
     * @param {Number} directionId ResourceDirection id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceDirection} opts.body ResourceDirection to modify
     * @param {module:api/TrunkApi~trunkDirectionDirectionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200190}
     */
    this.trunkDirectionDirectionIdPatch = function(directionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'directionId' is set
      if (directionId === undefined || directionId === null) {
        throw new Error("Missing the required parameter 'directionId' when calling trunkDirectionDirectionIdPatch");
      }


      var pathParams = {
        'direction_id': directionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200190;

      return this.apiClient.callApi(
        '/trunk/direction/{direction_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkEgressListGet operation.
     * @callback module:api/TrunkApi~trunkEgressListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egress trunks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.carrierId 
     * @param {Boolean} opts.isActive 
     * @param {String} opts.name 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourceTemplateId 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {module:api/TrunkApi~trunkEgressListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    this.trunkEgressListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'carrier_id': opts['carrierId'],
        'is_active': opts['isActive'],
        'name': opts['name'],
        'resource_id': opts['resourceId'],
        'resource_template_id': opts['resourceTemplateId'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/trunk/egress/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkEgressTrunkIdReapplyTemplateIdPatch operation.
     * @callback module:api/TrunkApi~trunkEgressTrunkIdReapplyTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} trunkId Trunk to proceed
     * @param {Number} templateId Template
     * @param {module:api/TrunkApi~trunkEgressTrunkIdReapplyTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkEgressTrunkIdReapplyTemplateIdPatch = function(trunkId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkEgressTrunkIdReapplyTemplateIdPatch");
      }

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling trunkEgressTrunkIdReapplyTemplateIdPatch");
      }


      var pathParams = {
        'trunk_id': trunkId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/egress/{trunk_id}/reapply/{template_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkEgressTrunkIdSaveAsTemplatePost operation.
     * @callback module:api/TrunkApi~trunkEgressTrunkIdSaveAsTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new egresstrunktemplate
     * @param {Number} trunkId Trunk to create template
     * @param {Object} opts Optional parameters
     * @param {module:model/TrunkTemplateFromResource} opts.body EgressTrunkTemplate to create
     * @param {module:api/TrunkApi~trunkEgressTrunkIdSaveAsTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkEgressTrunkIdSaveAsTemplatePost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkEgressTrunkIdSaveAsTemplatePost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/egress/{trunk_id}/save_as_template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupGroupIdAddTrunkPatch operation.
     * @callback module:api/TrunkApi~trunkGroupGroupIdAddTrunkPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200183} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies trunkgroup
     * @param {Number} groupId TrunkGroup id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/TrunkGroupAddTrunk} opts.body TrunkGroup to modify
     * @param {module:api/TrunkApi~trunkGroupGroupIdAddTrunkPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200183}
     */
    this.trunkGroupGroupIdAddTrunkPatch = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling trunkGroupGroupIdAddTrunkPatch");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200183;

      return this.apiClient.callApi(
        '/trunk/group/{group_id}/add_trunk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupGroupIdDelete operation.
     * @callback module:api/TrunkApi~trunkGroupGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes trunkgroup
     * @param {Number} groupId TrunkGroup id to get info about
     * @param {module:api/TrunkApi~trunkGroupGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkGroupGroupIdDelete = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling trunkGroupGroupIdDelete");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/group/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupGroupIdGet operation.
     * @callback module:api/TrunkApi~trunkGroupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200183} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets trunkgroup
     * @param {Number} groupId TrunkGroup id to get info about
     * @param {module:api/TrunkApi~trunkGroupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200183}
     */
    this.trunkGroupGroupIdGet = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling trunkGroupGroupIdGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200183;

      return this.apiClient.callApi(
        '/trunk/group/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupGroupIdPatch operation.
     * @callback module:api/TrunkApi~trunkGroupGroupIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200183} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies trunkgroup
     * @param {Number} groupId TrunkGroup id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/TrunkGroup} opts.body TrunkGroup to modify
     * @param {module:api/TrunkApi~trunkGroupGroupIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200183}
     */
    this.trunkGroupGroupIdPatch = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling trunkGroupGroupIdPatch");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200183;

      return this.apiClient.callApi(
        '/trunk/group/{group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupListGet operation.
     * @callback module:api/TrunkApi~trunkGroupListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200184} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets trunkgroups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.groupId 
     * @param {String} opts.groupName 
     * @param {module:model/String} opts.trunkType 
     * @param {Number} opts.trunksCount 
     * @param {module:api/TrunkApi~trunkGroupListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200184}
     */
    this.trunkGroupListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'group_id': opts['groupId'],
        'group_name': opts['groupName'],
        'trunk_type': opts['trunkType'],
        'trunks_count': opts['trunksCount']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200184;

      return this.apiClient.callApi(
        '/trunk/group/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkGroupPost operation.
     * @callback module:api/TrunkApi~trunkGroupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new trunkgroup
     * @param {Object} opts Optional parameters
     * @param {module:model/TrunkGroup} opts.body TrunkGroup to create
     * @param {module:api/TrunkApi~trunkGroupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkGroupPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIngressListGet operation.
     * @callback module:api/TrunkApi~trunkIngressListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingress trunks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.callLimit 
     * @param {String} opts.carrierId 
     * @param {Number} opts.cpsLimit 
     * @param {Boolean} opts.isActive 
     * @param {String} opts.name 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourceTemplateId 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/TrunkApi~trunkIngressListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20025}
     */
    this.trunkIngressListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'call_limit': opts['callLimit'],
        'carrier_id': opts['carrierId'],
        'cps_limit': opts['cpsLimit'],
        'is_active': opts['isActive'],
        'name': opts['name'],
        'resource_id': opts['resourceId'],
        'resource_template_id': opts['resourceTemplateId'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName'],
        'update_by': opts['updateBy'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/trunk/ingress/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIngressTrunkIdReapplyTemplateIdPatch operation.
     * @callback module:api/TrunkApi~trunkIngressTrunkIdReapplyTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} trunkId Trunk to proceed
     * @param {Number} templateId Template
     * @param {module:api/TrunkApi~trunkIngressTrunkIdReapplyTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkIngressTrunkIdReapplyTemplateIdPatch = function(trunkId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkIngressTrunkIdReapplyTemplateIdPatch");
      }

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling trunkIngressTrunkIdReapplyTemplateIdPatch");
      }


      var pathParams = {
        'trunk_id': trunkId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/ingress/{trunk_id}/reapply/{template_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIngressTrunkIdSaveAsTemplatePost operation.
     * @callback module:api/TrunkApi~trunkIngressTrunkIdSaveAsTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ingresstrunktemplate
     * @param {Number} trunkId Trunk to create template
     * @param {Object} opts Optional parameters
     * @param {module:model/TrunkTemplateFromResource} opts.body IngressTrunkTemplate to create
     * @param {module:api/TrunkApi~trunkIngressTrunkIdSaveAsTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkIngressTrunkIdSaveAsTemplatePost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkIngressTrunkIdSaveAsTemplatePost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/ingress/{trunk_id}/save_as_template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIpListGet operation.
     * @callback module:api/TrunkApi~trunkIpListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200187} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceips
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.fqdn 
     * @param {String} opts.ip 
     * @param {Number} opts.port 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourceIpId 
     * @param {String} opts.sipRpid 
     * @param {module:api/TrunkApi~trunkIpListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200187}
     */
    this.trunkIpListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'fqdn': opts['fqdn'],
        'ip': opts['ip'],
        'port': opts['port'],
        'resource_id': opts['resourceId'],
        'resource_ip_id': opts['resourceIpId'],
        'sip_rpid': opts['sipRpid']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200187;

      return this.apiClient.callApi(
        '/trunk/ip/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIpResourceIpIdDelete operation.
     * @callback module:api/TrunkApi~trunkIpResourceIpIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourceip
     * @param {Number} resourceIpId ResourceIp id to get info about
     * @param {module:api/TrunkApi~trunkIpResourceIpIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkIpResourceIpIdDelete = function(resourceIpId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceIpId' is set
      if (resourceIpId === undefined || resourceIpId === null) {
        throw new Error("Missing the required parameter 'resourceIpId' when calling trunkIpResourceIpIdDelete");
      }


      var pathParams = {
        'resource_ip_id': resourceIpId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/ip/{resource_ip_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIpResourceIpIdGet operation.
     * @callback module:api/TrunkApi~trunkIpResourceIpIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200186} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceip
     * @param {Number} resourceIpId ResourceIp id to get info about
     * @param {module:api/TrunkApi~trunkIpResourceIpIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200186}
     */
    this.trunkIpResourceIpIdGet = function(resourceIpId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceIpId' is set
      if (resourceIpId === undefined || resourceIpId === null) {
        throw new Error("Missing the required parameter 'resourceIpId' when calling trunkIpResourceIpIdGet");
      }


      var pathParams = {
        'resource_ip_id': resourceIpId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200186;

      return this.apiClient.callApi(
        '/trunk/ip/{resource_ip_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkIpResourceIpIdPatch operation.
     * @callback module:api/TrunkApi~trunkIpResourceIpIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200186} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourceip
     * @param {Number} resourceIpId ResourceIp id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceIpAll} opts.body ResourceIp to modify
     * @param {module:api/TrunkApi~trunkIpResourceIpIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200186}
     */
    this.trunkIpResourceIpIdPatch = function(resourceIpId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceIpId' is set
      if (resourceIpId === undefined || resourceIpId === null) {
        throw new Error("Missing the required parameter 'resourceIpId' when calling trunkIpResourceIpIdPatch");
      }


      var pathParams = {
        'resource_ip_id': resourceIpId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200186;

      return this.apiClient.callApi(
        '/trunk/ip/{resource_ip_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkListGet operation.
     * @callback module:api/TrunkApi~trunkListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200181} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets trunks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {Number} opts.carrierId 
     * @param {String} opts.clientNameSql 
     * @param {module:model/String} opts.direction 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {module:model/String} opts.type 
     * @param {module:api/TrunkApi~trunkListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200181}
     */
    this.trunkListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'carrier_id': opts['carrierId'],
        'client_name_sql': opts['clientNameSql'],
        'direction': opts['direction'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName'],
        'type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200181;

      return this.apiClient.callApi(
        '/trunk/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkMaxChannelsGet operation.
     * @callback module:api/TrunkApi~trunkMaxChannelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200185} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets qostotals
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.endDate 
     * @param {String} opts.startDate 
     * @param {module:api/TrunkApi~trunkMaxChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200185}
     */
    this.trunkMaxChannelsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'end_date': opts['endDate'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200185;

      return this.apiClient.callApi(
        '/trunk/max_channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkPrefixIdDelete operation.
     * @callback module:api/TrunkApi~trunkPrefixIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourceprefix
     * @param {Number} id ResourcePrefix id to get info about
     * @param {module:api/TrunkApi~trunkPrefixIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkPrefixIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkPrefixIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/prefix/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkPrefixIdGet operation.
     * @callback module:api/TrunkApi~trunkPrefixIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200188} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceprefix
     * @param {Number} id ResourcePrefix id to get info about
     * @param {module:api/TrunkApi~trunkPrefixIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200188}
     */
    this.trunkPrefixIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkPrefixIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200188;

      return this.apiClient.callApi(
        '/trunk/prefix/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkPrefixIdPatch operation.
     * @callback module:api/TrunkApi~trunkPrefixIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200188} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourceprefix
     * @param {Number} id ResourcePrefix id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourcePrefixModify} opts.body ResourcePrefix to modify
     * @param {module:api/TrunkApi~trunkPrefixIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200188}
     */
    this.trunkPrefixIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkPrefixIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200188;

      return this.apiClient.callApi(
        '/trunk/prefix/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkRateSummaryListGet operation.
     * @callback module:api/TrunkApi~trunkRateSummaryListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200196} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingress trunks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.carrier 
     * @param {String} opts.ingressTrunkName 
     * @param {String} opts.prefix 
     * @param {String} opts.rateTableName 
     * @param {module:api/TrunkApi~trunkRateSummaryListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200196}
     */
    this.trunkRateSummaryListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'carrier': opts['carrier'],
        'ingress_trunk_name': opts['ingressTrunkName'],
        'prefix': opts['prefix'],
        'rate_table_name': opts['rateTableName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200196;

      return this.apiClient.callApi(
        '/trunk/rate_summary/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkReplaceActionIdDelete operation.
     * @callback module:api/TrunkApi~trunkReplaceActionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourcereplaceaction
     * @param {Number} id ResourceReplaceAction id to get info about
     * @param {module:api/TrunkApi~trunkReplaceActionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkReplaceActionIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkReplaceActionIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/replace_action/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkReplaceActionIdGet operation.
     * @callback module:api/TrunkApi~trunkReplaceActionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200192} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcereplaceaction
     * @param {Number} id ResourceReplaceAction id to get info about
     * @param {module:api/TrunkApi~trunkReplaceActionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200192}
     */
    this.trunkReplaceActionIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkReplaceActionIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200192;

      return this.apiClient.callApi(
        '/trunk/replace_action/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkReplaceActionIdPatch operation.
     * @callback module:api/TrunkApi~trunkReplaceActionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200192} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourcereplaceaction
     * @param {Number} id ResourceReplaceAction id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceReplaceAction} opts.body ResourceReplaceAction to modify
     * @param {module:api/TrunkApi~trunkReplaceActionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200192}
     */
    this.trunkReplaceActionIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling trunkReplaceActionIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200192;

      return this.apiClient.callApi(
        '/trunk/replace_action/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdAssignProductProductIdPatch operation.
     * @callback module:api/TrunkApi~trunkTrunkIdAssignProductProductIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200197} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies trunk
     * @param {Number} trunkId Trunk to proceed
     * @param {Number} productId Product to assign
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceWithIps} opts.body Trunk to modify
     * @param {module:api/TrunkApi~trunkTrunkIdAssignProductProductIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200197}
     */
    this.trunkTrunkIdAssignProductProductIdPatch = function(trunkId, productId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdAssignProductProductIdPatch");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling trunkTrunkIdAssignProductProductIdPatch");
      }


      var pathParams = {
        'trunk_id': trunkId,
        'product_id': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200197;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/assign_product/{product_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPost operation.
     * @callback module:api/TrunkApi~trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourcetranslationref
     * @param {Number} trunkId Parent gateway resource_id
     * @param {Number} digitMapId DigitTranslation translation_id
     * @param {Number} timeProfileId TimeProfile time_profile_id
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceTranslationRef} opts.body ResourceTranslationRef to create
     * @param {module:api/TrunkApi~trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPost = function(trunkId, digitMapId, timeProfileId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPost");
      }

      // verify the required parameter 'digitMapId' is set
      if (digitMapId === undefined || digitMapId === null) {
        throw new Error("Missing the required parameter 'digitMapId' when calling trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPost");
      }

      // verify the required parameter 'timeProfileId' is set
      if (timeProfileId === undefined || timeProfileId === null) {
        throw new Error("Missing the required parameter 'timeProfileId' when calling trunkTrunkIdDigitMapIdTimeProfileIdAddDigitMapPost");
      }


      var pathParams = {
        'trunk_id': trunkId,
        'digit_map_id': digitMapId,
        'time_profile_id': timeProfileId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/{digit_map_id}/{time_profile_id}/add_digit_map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdDigitMapListGet operation.
     * @callback module:api/TrunkApi~trunkTrunkIdDigitMapListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200195} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcetranslationrefs
     * @param {Number} trunkId Parent gateway resource_id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/TrunkApi~trunkTrunkIdDigitMapListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200195}
     */
    this.trunkTrunkIdDigitMapListGet = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdDigitMapListGet");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200195;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/digit_map/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdDirectionListGet operation.
     * @callback module:api/TrunkApi~trunkTrunkIdDirectionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200191} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcedirections
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.action 
     * @param {String} opts.digits 
     * @param {module:model/String} opts.direction 
     * @param {Number} opts.directionId 
     * @param {module:model/String} opts.type 
     * @param {module:api/TrunkApi~trunkTrunkIdDirectionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200191}
     */
    this.trunkTrunkIdDirectionListGet = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdDirectionListGet");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'action': opts['action'],
        'digits': opts['digits'],
        'direction': opts['direction'],
        'direction_id': opts['directionId'],
        'type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200191;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/direction/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdDirectionPost operation.
     * @callback module:api/TrunkApi~trunkTrunkIdDirectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourcedirection
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceDirection} opts.body ResourceDirection to create
     * @param {module:api/TrunkApi~trunkTrunkIdDirectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkTrunkIdDirectionPost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdDirectionPost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/direction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdIpPost operation.
     * @callback module:api/TrunkApi~trunkTrunkIdIpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourceip
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceIpAll} opts.body ResourceIp to create
     * @param {module:api/TrunkApi~trunkTrunkIdIpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkTrunkIdIpPost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdIpPost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/ip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdPrefixListGet operation.
     * @callback module:api/TrunkApi~trunkTrunkIdPrefixListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200189} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceprefixs
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.code 
     * @param {Number} opts.codeCap 
     * @param {Number} opts.codeCps 
     * @param {Number} opts.id 
     * @param {Number} opts.rateTableId 
     * @param {Number} opts.routingPlanId 
     * @param {String} opts.techPrefix 
     * @param {module:api/TrunkApi~trunkTrunkIdPrefixListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200189}
     */
    this.trunkTrunkIdPrefixListGet = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdPrefixListGet");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'code': opts['code'],
        'code_cap': opts['codeCap'],
        'code_cps': opts['codeCps'],
        'id': opts['id'],
        'rate_table_id': opts['rateTableId'],
        'routing_plan_id': opts['routingPlanId'],
        'tech_prefix': opts['techPrefix']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200189;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/prefix/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdPrefixPost operation.
     * @callback module:api/TrunkApi~trunkTrunkIdPrefixPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourceprefix
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourcePrefixWithIP} opts.body ResourcePrefix to create
     * @param {module:api/TrunkApi~trunkTrunkIdPrefixPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkTrunkIdPrefixPost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdPrefixPost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/prefix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdReplaceActionListGet operation.
     * @callback module:api/TrunkApi~trunkTrunkIdReplaceActionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200193} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcereplaceactions
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.ani 
     * @param {String} opts.aniPrefix 
     * @param {String} opts.dnis 
     * @param {String} opts.dnisPrefix 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.type 
     * @param {module:api/TrunkApi~trunkTrunkIdReplaceActionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200193}
     */
    this.trunkTrunkIdReplaceActionListGet = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdReplaceActionListGet");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'ani': opts['ani'],
        'ani_prefix': opts['aniPrefix'],
        'dnis': opts['dnis'],
        'dnis_prefix': opts['dnisPrefix'],
        'id': opts['id'],
        'type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200193;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/replace_action/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdReplaceActionPost operation.
     * @callback module:api/TrunkApi~trunkTrunkIdReplaceActionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourcereplaceaction
     * @param {Number} trunkId Parent trunk id
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceReplaceAction} opts.body ResourceReplaceAction to create
     * @param {module:api/TrunkApi~trunkTrunkIdReplaceActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.trunkTrunkIdReplaceActionPost = function(trunkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdReplaceActionPost");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/replace_action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkTrunkIdSendInteropPatch operation.
     * @callback module:api/TrunkApi~trunkTrunkIdSendInteropPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} trunkId Trunk to proceed
     * @param {module:api/TrunkApi~trunkTrunkIdSendInteropPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.trunkTrunkIdSendInteropPatch = function(trunkId, callback) {
      var postBody = null;

      // verify the required parameter 'trunkId' is set
      if (trunkId === undefined || trunkId === null) {
        throw new Error("Missing the required parameter 'trunkId' when calling trunkTrunkIdSendInteropPatch");
      }


      var pathParams = {
        'trunk_id': trunkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/trunk/{trunk_id}/send_interop', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the trunkUnclaimedListGet operation.
     * @callback module:api/TrunkApi~trunkUnclaimedListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200182} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets trunks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {Number} opts.carrierId 
     * @param {module:model/String} opts.direction 
     * @param {Number} opts.rateTableId 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {module:model/String} opts.type 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/TrunkApi~trunkUnclaimedListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200182}
     */
    this.trunkUnclaimedListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'carrier_id': opts['carrierId'],
        'direction': opts['direction'],
        'rate_table_id': opts['rateTableId'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName'],
        'type': opts['type'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200182;

      return this.apiClient.callApi(
        '/trunk/unclaimed/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
