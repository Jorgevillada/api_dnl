/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AlertRule', 'model/AlertRuleActivate', 'model/AttributeNotExists', 'model/FraudDetection', 'model/FraudDetectionActivate', 'model/InlineResponse200132', 'model/InlineResponse200133', 'model/InlineResponse200134', 'model/InlineResponse200135', 'model/InlineResponse200136', 'model/InlineResponse200137', 'model/InlineResponse2002', 'model/LoopDetection', 'model/LoopDetectionActivate', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AlertRule'), require('../model/AlertRuleActivate'), require('../model/AttributeNotExists'), require('../model/FraudDetection'), require('../model/FraudDetectionActivate'), require('../model/InlineResponse200132'), require('../model/InlineResponse200133'), require('../model/InlineResponse200134'), require('../model/InlineResponse200135'), require('../model/InlineResponse200136'), require('../model/InlineResponse200137'), require('../model/InlineResponse2002'), require('../model/LoopDetection'), require('../model/LoopDetectionActivate'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.MonitoringApi = factory(root.DnlApi.ApiClient, root.DnlApi.AlertRule, root.DnlApi.AlertRuleActivate, root.DnlApi.AttributeNotExists, root.DnlApi.FraudDetection, root.DnlApi.FraudDetectionActivate, root.DnlApi.InlineResponse200132, root.DnlApi.InlineResponse200133, root.DnlApi.InlineResponse200134, root.DnlApi.InlineResponse200135, root.DnlApi.InlineResponse200136, root.DnlApi.InlineResponse200137, root.DnlApi.InlineResponse2002, root.DnlApi.LoopDetection, root.DnlApi.LoopDetectionActivate, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AlertRule, AlertRuleActivate, AttributeNotExists, FraudDetection, FraudDetectionActivate, InlineResponse200132, InlineResponse200133, InlineResponse200134, InlineResponse200135, InlineResponse200136, InlineResponse200137, InlineResponse2002, LoopDetection, LoopDetectionActivate, ObjectCreated, ObjectNotFoundError, OperationError, Success, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Monitoring service.
   * @module api/MonitoringApi
   * @version 1.2.62
   */

  /**
   * Constructs a new MonitoringApi. 
   * @alias module:api/MonitoringApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the monitoringFraudDetectionAllDelete operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found frauddetection
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active 
     * @param {Boolean} opts.enableBlock 
     * @param {Number} opts.hour24Duration 
     * @param {Number} opts.hour24Revenue 
     * @param {String} opts.name 
     * @param {Number} opts.oneHourDuration 
     * @param {Number} opts.oneHourRevenue 
     * @param {module:api/MonitoringApi~monitoringFraudDetectionAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringFraudDetectionAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'enable_block': opts['enableBlock'],
        'hour_24_duration': opts['hour24Duration'],
        'hour_24_revenue': opts['hour24Revenue'],
        'name': opts['name'],
        'one_hour_duration': opts['oneHourDuration'],
        'one_hour_revenue': opts['oneHourRevenue']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionAllPatch operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found frauddetection
     * @param {Object} opts Optional parameters
     * @param {module:model/FraudDetectionActivate} opts.body FraudDetection to modify
     * @param {Boolean} opts.active 
     * @param {Boolean} opts.enableBlock 
     * @param {Number} opts.hour24Duration 
     * @param {Number} opts.hour24Revenue 
     * @param {String} opts.name 
     * @param {Number} opts.oneHourDuration 
     * @param {Number} opts.oneHourRevenue 
     * @param {module:api/MonitoringApi~monitoringFraudDetectionAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringFraudDetectionAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'enable_block': opts['enableBlock'],
        'hour_24_duration': opts['hour24Duration'],
        'hour_24_revenue': opts['hour24Revenue'],
        'name': opts['name'],
        'one_hour_duration': opts['oneHourDuration'],
        'one_hour_revenue': opts['oneHourRevenue']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/all', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionIdDelete operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes frauddetection rule
     * @param {Number} id FraudDetection rule id to get info about
     * @param {module:api/MonitoringApi~monitoringFraudDetectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.monitoringFraudDetectionIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringFraudDetectionIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionIdGet operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200134} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets frauddetection rule
     * @param {Number} id FraudDetection rule id to get info about
     * @param {module:api/MonitoringApi~monitoringFraudDetectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200134}
     */
    this.monitoringFraudDetectionIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringFraudDetectionIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200134;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionIdPatch operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200134} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies frauddetection rule
     * @param {Number} id FraudDetection rule id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/FraudDetection} opts.body FraudDetection rule to modify
     * @param {module:api/MonitoringApi~monitoringFraudDetectionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200134}
     */
    this.monitoringFraudDetectionIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringFraudDetectionIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200134;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionListGet operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200135} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets frauddetection rules
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {Boolean} opts.enableBlock 
     * @param {Number} opts.hour24Duration 
     * @param {Number} opts.hour24Revenue 
     * @param {String} opts.name 
     * @param {Number} opts.oneHourDuration 
     * @param {Number} opts.oneHourRevenue 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateOnGt 
     * @param {String} opts.updateOnLt 
     * @param {module:api/MonitoringApi~monitoringFraudDetectionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200135}
     */
    this.monitoringFraudDetectionListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'enable_block': opts['enableBlock'],
        'hour_24_duration': opts['hour24Duration'],
        'hour_24_revenue': opts['hour24Revenue'],
        'name': opts['name'],
        'one_hour_duration': opts['oneHourDuration'],
        'one_hour_revenue': opts['oneHourRevenue'],
        'update_by': opts['updateBy'],
        'update_on_gt': opts['updateOnGt'],
        'update_on_lt': opts['updateOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200135;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringFraudDetectionPost operation.
     * @callback module:api/MonitoringApi~monitoringFraudDetectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new frauddetection rules
     * @param {Object} opts Optional parameters
     * @param {module:model/FraudDetection} opts.body FraudDetection rules to create
     * @param {module:api/MonitoringApi~monitoringFraudDetectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.monitoringFraudDetectionPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/monitoring/fraud_detection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionAllDelete operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found loopdetection
     * @param {Object} opts Optional parameters
     * @param {Number} opts.blockSecond 
     * @param {String} opts.name 
     * @param {Number} opts.occurance 
     * @param {Number} opts.period 
     * @param {module:api/MonitoringApi~monitoringLoopDetectionAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringLoopDetectionAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'block_second': opts['blockSecond'],
        'name': opts['name'],
        'occurance': opts['occurance'],
        'period': opts['period']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionAllPatch operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found loopdetection
     * @param {Object} opts Optional parameters
     * @param {module:model/LoopDetectionActivate} opts.body LoopDetection to modify
     * @param {Number} opts.blockSecond 
     * @param {String} opts.name 
     * @param {Number} opts.occurance 
     * @param {Number} opts.period 
     * @param {module:api/MonitoringApi~monitoringLoopDetectionAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringLoopDetectionAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'block_second': opts['blockSecond'],
        'name': opts['name'],
        'occurance': opts['occurance'],
        'period': opts['period']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/all', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionIdDelete operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes loopdetection rule
     * @param {Number} id LoopDetection rule id to get info about
     * @param {module:api/MonitoringApi~monitoringLoopDetectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.monitoringLoopDetectionIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringLoopDetectionIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionIdGet operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200132} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets loopdetection rule
     * @param {Number} id LoopDetection rule id to get info about
     * @param {module:api/MonitoringApi~monitoringLoopDetectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200132}
     */
    this.monitoringLoopDetectionIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringLoopDetectionIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200132;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionIdPatch operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200132} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies loopdetection rule
     * @param {Number} id LoopDetection rule id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/LoopDetection} opts.body LoopDetection rule to modify
     * @param {module:api/MonitoringApi~monitoringLoopDetectionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200132}
     */
    this.monitoringLoopDetectionIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringLoopDetectionIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200132;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionListGet operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200133} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets loopdetection rules
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.blockSecond 
     * @param {String} opts.name 
     * @param {Number} opts.occurance 
     * @param {Number} opts.period 
     * @param {String} opts.idIn 
     * @param {Number} opts.trunkCountGt 
     * @param {Number} opts.trunkCountLt 
     * @param {module:api/MonitoringApi~monitoringLoopDetectionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200133}
     */
    this.monitoringLoopDetectionListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'block_second': opts['blockSecond'],
        'name': opts['name'],
        'occurance': opts['occurance'],
        'period': opts['period'],
        'id_in': opts['idIn'],
        'trunk_count_gt': opts['trunkCountGt'],
        'trunk_count_lt': opts['trunkCountLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200133;

      return this.apiClient.callApi(
        '/monitoring/loop_detection/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringLoopDetectionPost operation.
     * @callback module:api/MonitoringApi~monitoringLoopDetectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new loopdetection rules
     * @param {Object} opts Optional parameters
     * @param {module:model/LoopDetection} opts.body LoopDetection rules to create
     * @param {module:api/MonitoringApi~monitoringLoopDetectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.monitoringLoopDetectionPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/monitoring/loop_detection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleAllDelete operation.
     * @callback module:api/MonitoringApi~monitoringRuleAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found alertrule rule
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active 
     * @param {Number} opts.id 
     * @param {String} opts.lastRunTimeGt 
     * @param {String} opts.lastRunTimeLt 
     * @param {String} opts.name 
     * @param {module:api/MonitoringApi~monitoringRuleAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringRuleAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'id': opts['id'],
        'last_run_time_gt': opts['lastRunTimeGt'],
        'last_run_time_lt': opts['lastRunTimeLt'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/rule/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleAllPatch operation.
     * @callback module:api/MonitoringApi~monitoringRuleAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found alertrule rule
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertRuleActivate} opts.body AlertRule rule to modify
     * @param {Boolean} opts.active 
     * @param {Number} opts.id 
     * @param {String} opts.lastRunTimeGt 
     * @param {String} opts.lastRunTimeLt 
     * @param {String} opts.name 
     * @param {module:api/MonitoringApi~monitoringRuleAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.monitoringRuleAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'id': opts['id'],
        'last_run_time_gt': opts['lastRunTimeGt'],
        'last_run_time_lt': opts['lastRunTimeLt'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/monitoring/rule/all', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleIdDelete operation.
     * @callback module:api/MonitoringApi~monitoringRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes alertrule rule
     * @param {Number} id AlertRule rule id to get info about
     * @param {module:api/MonitoringApi~monitoringRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.monitoringRuleIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringRuleIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/monitoring/rule/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleIdGet operation.
     * @callback module:api/MonitoringApi~monitoringRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets alertrule rule
     * @param {Number} id AlertRule rule id to get info about
     * @param {module:api/MonitoringApi~monitoringRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200136}
     */
    this.monitoringRuleIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringRuleIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200136;

      return this.apiClient.callApi(
        '/monitoring/rule/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleIdPatch operation.
     * @callback module:api/MonitoringApi~monitoringRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies alertrule rule
     * @param {Number} id AlertRule rule id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertRule} opts.body AlertRule rule to modify
     * @param {module:api/MonitoringApi~monitoringRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200136}
     */
    this.monitoringRuleIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling monitoringRuleIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200136;

      return this.apiClient.callApi(
        '/monitoring/rule/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRuleListGet operation.
     * @callback module:api/MonitoringApi~monitoringRuleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200137} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets alertrule rules
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {String} opts.name 
     * @param {String} opts.idIn 
     * @param {String} opts.lastRunTimeGt 
     * @param {String} opts.lastRunTimeLt 
     * @param {module:api/MonitoringApi~monitoringRuleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200137}
     */
    this.monitoringRuleListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'name': opts['name'],
        'id_in': opts['idIn'],
        'last_run_time_gt': opts['lastRunTimeGt'],
        'last_run_time_lt': opts['lastRunTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200137;

      return this.apiClient.callApi(
        '/monitoring/rule/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monitoringRulePost operation.
     * @callback module:api/MonitoringApi~monitoringRulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new alertrule rules
     * @param {Object} opts Optional parameters
     * @param {module:model/AlertRule} opts.body AlertRule rules to create
     * @param {module:api/MonitoringApi~monitoringRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.monitoringRulePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/monitoring/rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
