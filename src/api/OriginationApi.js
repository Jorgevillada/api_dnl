/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/ClientDid', 'model/DidBillingPlan', 'model/DidBillingRel', 'model/InlineResponse200122', 'model/InlineResponse200123', 'model/InlineResponse200124', 'model/InlineResponse200125', 'model/InlineResponse200126', 'model/InlineResponse200127', 'model/InlineResponse200128', 'model/InlineResponse200129', 'model/InlineResponse200130', 'model/InlineResponse200131', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError', 'model/VendorDid'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/ClientDid'), require('../model/DidBillingPlan'), require('../model/DidBillingRel'), require('../model/InlineResponse200122'), require('../model/InlineResponse200123'), require('../model/InlineResponse200124'), require('../model/InlineResponse200125'), require('../model/InlineResponse200126'), require('../model/InlineResponse200127'), require('../model/InlineResponse200128'), require('../model/InlineResponse200129'), require('../model/InlineResponse200130'), require('../model/InlineResponse200131'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'), require('../model/VendorDid'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.OriginationApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.ClientDid, root.DnlApi.DidBillingPlan, root.DnlApi.DidBillingRel, root.DnlApi.InlineResponse200122, root.DnlApi.InlineResponse200123, root.DnlApi.InlineResponse200124, root.DnlApi.InlineResponse200125, root.DnlApi.InlineResponse200126, root.DnlApi.InlineResponse200127, root.DnlApi.InlineResponse200128, root.DnlApi.InlineResponse200129, root.DnlApi.InlineResponse200130, root.DnlApi.InlineResponse200131, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError, root.DnlApi.VendorDid);
  }
}(this, function(ApiClient, AttributeNotExists, ClientDid, DidBillingPlan, DidBillingRel, InlineResponse200122, InlineResponse200123, InlineResponse200124, InlineResponse200125, InlineResponse200126, InlineResponse200127, InlineResponse200128, InlineResponse200129, InlineResponse200130, InlineResponse200131, ObjectCreated, ObjectNotFoundError, OperationError, Success, UnauthenticatedError, ValidationError, VendorDid) {
  'use strict';

  /**
   * Origination service.
   * @module api/OriginationApi
   * @version 1.2.10
   */

  /**
   * Constructs a new OriginationApi. 
   * @alias module:api/OriginationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the didBillingRuleCreatePost operation.
     * @callback module:api/OriginationApi~didBillingRuleCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didbillingplan
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingPlan} opts.body DidBillingPlan to create
     * @param {module:api/OriginationApi~didBillingRuleCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didBillingRuleCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/billing_rule/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdDelete operation.
     * @callback module:api/OriginationApi~didBillingRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {module:api/OriginationApi~didBillingRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didBillingRuleIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdGet operation.
     * @callback module:api/OriginationApi~didBillingRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200126} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {module:api/OriginationApi~didBillingRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200126}
     */
    this.didBillingRuleIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200126;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdPatch operation.
     * @callback module:api/OriginationApi~didBillingRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200126} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingPlan} opts.body DidBillingPlan to modify
     * @param {module:api/OriginationApi~didBillingRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200126}
     */
    this.didBillingRuleIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200126;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleListGet operation.
     * @callback module:api/OriginationApi~didBillingRuleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200127} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didbillingplans
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.name 
     * @param {Number} opts.rateTableId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.ratePerMinGt 
     * @param {String} opts.ratePerMinLt 
     * @param {module:api/OriginationApi~didBillingRuleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200127}
     */
    this.didBillingRuleListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'name': opts['name'],
        'rate_table_id': opts['rateTableId'],
        'type': opts['type'],
        'rate_per_min_gt': opts['ratePerMinGt'],
        'rate_per_min_lt': opts['ratePerMinLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200127;

      return this.apiClient.callApi(
        '/did/billing_rule/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdDelete operation.
     * @callback module:api/OriginationApi~didClientClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {module:api/OriginationApi~didClientClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didClientClientIdDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdGet operation.
     * @callback module:api/OriginationApi~didClientClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200122} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {module:api/OriginationApi~didClientClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200122}
     */
    this.didClientClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200122;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdPatch operation.
     * @callback module:api/OriginationApi~didClientClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200122} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientDid} opts.body ClientDid to modify
     * @param {module:api/OriginationApi~didClientClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200122}
     */
    this.didClientClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200122;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientCreatePost operation.
     * @callback module:api/OriginationApi~didClientCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new clientdid
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientDid} opts.body ClientDid to create
     * @param {module:api/OriginationApi~didClientCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didClientCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/client/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientListGet operation.
     * @callback module:api/OriginationApi~didClientListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200123} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didclients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.name 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didClientListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200123}
     */
    this.didClientListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'name': opts['name'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200123;

      return this.apiClient.callApi(
        '/did/client/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceListGet operation.
     * @callback module:api/OriginationApi~didOrigInvoiceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200131} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets originvoices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {module:model/String} opts.createType 
     * @param {String} opts.invoiceNumber 
     * @param {module:model/String} opts.state 
     * @param {String} opts.invoiceTimeGte 
     * @param {String} opts.invoiceTimeLt 
     * @param {module:api/OriginationApi~didOrigInvoiceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200131}
     */
    this.didOrigInvoiceListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'create_type': opts['createType'],
        'invoice_number': opts['invoiceNumber'],
        'state': opts['state'],
        'invoice_time_gte': opts['invoiceTimeGte'],
        'invoice_time_lt': opts['invoiceTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200131;

      return this.apiClient.callApi(
        '/did/orig_invoice/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryCreatePost operation.
     * @callback module:api/OriginationApi~didRepositoryCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didvendor
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingRel} opts.body DidVendor to create
     * @param {module:api/OriginationApi~didRepositoryCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didRepositoryCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/repository/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdDelete operation.
     * @callback module:api/OriginationApi~didRepositoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {module:api/OriginationApi~didRepositoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didRepositoryIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdGet operation.
     * @callback module:api/OriginationApi~didRepositoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200128} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {module:api/OriginationApi~didRepositoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200128}
     */
    this.didRepositoryIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200128;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdPatch operation.
     * @callback module:api/OriginationApi~didRepositoryIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200128} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingRel} opts.body DidRepository item to modify
     * @param {module:api/OriginationApi~didRepositoryIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200128}
     */
    this.didRepositoryIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200128;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryListGet operation.
     * @callback module:api/OriginationApi~didRepositoryListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200129} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didrepository items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientBillingRuleId 
     * @param {Number} opts.clientResId 
     * @param {String} opts.did 
     * @param {Number} opts.id 
     * @param {Number} opts.vendorBillingRuleId 
     * @param {Number} opts.vendorResId 
     * @param {module:api/OriginationApi~didRepositoryListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200129}
     */
    this.didRepositoryListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_billing_rule_id': opts['clientBillingRuleId'],
        'client_res_id': opts['clientResId'],
        'did': opts['did'],
        'id': opts['id'],
        'vendor_billing_rule_id': opts['vendorBillingRuleId'],
        'vendor_res_id': opts['vendorResId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200129;

      return this.apiClient.callApi(
        '/did/repository/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRoutingListGet operation.
     * @callback module:api/OriginationApi~didRoutingListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200130} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didstaticrouting items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.did 
     * @param {Number} opts.itemId 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didRoutingListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200130}
     */
    this.didRoutingListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'did': opts['did'],
        'item_id': opts['itemId'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200130;

      return this.apiClient.callApi(
        '/did/routing/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdDelete operation.
     * @callback module:api/OriginationApi~didVendorClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {module:api/OriginationApi~didVendorClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didVendorClientIdDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdGet operation.
     * @callback module:api/OriginationApi~didVendorClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {module:api/OriginationApi~didVendorClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200124}
     */
    this.didVendorClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdPatch operation.
     * @callback module:api/OriginationApi~didVendorClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/VendorDid} opts.body DidVendor to modify
     * @param {module:api/OriginationApi~didVendorClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200124}
     */
    this.didVendorClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdUploadDidsPost operation.
     * @callback module:api/OriginationApi~didVendorClientIdUploadDidsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new vendordids file
     * @param {module:model/String} dupliateHandling How to handle duplicates
     * @param {File} file File to upload
     * @param {Number} clientId Vendor to upload DIDs
     * @param {module:api/OriginationApi~didVendorClientIdUploadDidsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200124}
     */
    this.didVendorClientIdUploadDidsPost = function(dupliateHandling, file, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'dupliateHandling' is set
      if (dupliateHandling === undefined || dupliateHandling === null) {
        throw new Error("Missing the required parameter 'dupliateHandling' when calling didVendorClientIdUploadDidsPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling didVendorClientIdUploadDidsPost");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdUploadDidsPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'dupliate_handling': dupliateHandling,
        'file': file
      };

      var authNames = ['auth_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}/upload_dids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorCreatePost operation.
     * @callback module:api/OriginationApi~didVendorCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didvendor
     * @param {Object} opts Optional parameters
     * @param {module:model/VendorDid} opts.body DidVendor to create
     * @param {module:api/OriginationApi~didVendorCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didVendorCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/vendor/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorListGet operation.
     * @callback module:api/OriginationApi~didVendorListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200125} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didvendors
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.name 
     * @param {Boolean} opts.status 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didVendorListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200125}
     */
    this.didVendorListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'name': opts['name'],
        'status': opts['status'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200125;

      return this.apiClient.callApi(
        '/did/vendor/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
