/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/CarrierActivate', 'model/ClientDid', 'model/DidBillingPlan', 'model/DidBillingPlanModify', 'model/DidBillingPlanModifyRateParams', 'model/DidBillingRel', 'model/DidBillingRelMassAssign', 'model/DidBillingRelModify', 'model/InlineResponse200138', 'model/InlineResponse200139', 'model/InlineResponse200140', 'model/InlineResponse200141', 'model/InlineResponse200142', 'model/InlineResponse200143', 'model/InlineResponse200144', 'model/InlineResponse200145', 'model/InlineResponse200146', 'model/InlineResponse200147', 'model/InlineResponse200148', 'model/InlineResponse200149', 'model/InlineResponse2002', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/OrigInvoice', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError', 'model/VendorDid'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/CarrierActivate'), require('../model/ClientDid'), require('../model/DidBillingPlan'), require('../model/DidBillingPlanModify'), require('../model/DidBillingPlanModifyRateParams'), require('../model/DidBillingRel'), require('../model/DidBillingRelMassAssign'), require('../model/DidBillingRelModify'), require('../model/InlineResponse200138'), require('../model/InlineResponse200139'), require('../model/InlineResponse200140'), require('../model/InlineResponse200141'), require('../model/InlineResponse200142'), require('../model/InlineResponse200143'), require('../model/InlineResponse200144'), require('../model/InlineResponse200145'), require('../model/InlineResponse200146'), require('../model/InlineResponse200147'), require('../model/InlineResponse200148'), require('../model/InlineResponse200149'), require('../model/InlineResponse2002'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/OrigInvoice'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'), require('../model/VendorDid'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.OriginationApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.CarrierActivate, root.DnlApi.ClientDid, root.DnlApi.DidBillingPlan, root.DnlApi.DidBillingPlanModify, root.DnlApi.DidBillingPlanModifyRateParams, root.DnlApi.DidBillingRel, root.DnlApi.DidBillingRelMassAssign, root.DnlApi.DidBillingRelModify, root.DnlApi.InlineResponse200138, root.DnlApi.InlineResponse200139, root.DnlApi.InlineResponse200140, root.DnlApi.InlineResponse200141, root.DnlApi.InlineResponse200142, root.DnlApi.InlineResponse200143, root.DnlApi.InlineResponse200144, root.DnlApi.InlineResponse200145, root.DnlApi.InlineResponse200146, root.DnlApi.InlineResponse200147, root.DnlApi.InlineResponse200148, root.DnlApi.InlineResponse200149, root.DnlApi.InlineResponse2002, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.OrigInvoice, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError, root.DnlApi.VendorDid);
  }
}(this, function(ApiClient, AttributeNotExists, CarrierActivate, ClientDid, DidBillingPlan, DidBillingPlanModify, DidBillingPlanModifyRateParams, DidBillingRel, DidBillingRelMassAssign, DidBillingRelModify, InlineResponse200138, InlineResponse200139, InlineResponse200140, InlineResponse200141, InlineResponse200142, InlineResponse200143, InlineResponse200144, InlineResponse200145, InlineResponse200146, InlineResponse200147, InlineResponse200148, InlineResponse200149, InlineResponse2002, ObjectCreated, ObjectNotFoundError, OperationError, OrigInvoice, Success, UnauthenticatedError, ValidationError, VendorDid) {
  'use strict';

  /**
   * Origination service.
   * @module api/OriginationApi
   * @version 1.2.62
   */

  /**
   * Constructs a new OriginationApi. 
   * @alias module:api/OriginationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the didBillingRuleAllDelete operation.
     * @callback module:api/OriginationApi~didBillingRuleAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found didbillingplan
     * @param {Object} opts Optional parameters
     * @param {String} opts.idIn 
     * @param {String} opts.name 
     * @param {String} opts.ratePerMinGt 
     * @param {String} opts.ratePerMinLt 
     * @param {Number} opts.rateTableId 
     * @param {module:model/String} opts.type 
     * @param {module:api/OriginationApi~didBillingRuleAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didBillingRuleAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id_in': opts['idIn'],
        'name': opts['name'],
        'rate_per_min_gt': opts['ratePerMinGt'],
        'rate_per_min_lt': opts['ratePerMinLt'],
        'rate_table_id': opts['rateTableId'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/billing_rule/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleCreatePost operation.
     * @callback module:api/OriginationApi~didBillingRuleCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didbillingplan
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingPlan} opts.body DidBillingPlan to create
     * @param {module:api/OriginationApi~didBillingRuleCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didBillingRuleCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/billing_rule/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdDelete operation.
     * @callback module:api/OriginationApi~didBillingRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {module:api/OriginationApi~didBillingRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didBillingRuleIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdGet operation.
     * @callback module:api/OriginationApi~didBillingRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200142} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {module:api/OriginationApi~didBillingRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200142}
     */
    this.didBillingRuleIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200142;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdPatch operation.
     * @callback module:api/OriginationApi~didBillingRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200142} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didbillingplan
     * @param {Number} id DidBillingPlan id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingPlanModify} opts.body DidBillingPlan to modify
     * @param {module:api/OriginationApi~didBillingRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200142}
     */
    this.didBillingRuleIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200142;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleIdRateParamsPatch operation.
     * @callback module:api/OriginationApi~didBillingRuleIdRateParamsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id Billing rule with fixed plan to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingPlanModifyRateParams} opts.body Rate parameters for this item
     * @param {module:api/OriginationApi~didBillingRuleIdRateParamsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didBillingRuleIdRateParamsPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didBillingRuleIdRateParamsPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/billing_rule/{id}/rate_params', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didBillingRuleListGet operation.
     * @callback module:api/OriginationApi~didBillingRuleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didbillingplans
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.name 
     * @param {Number} opts.rateTableId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.idIn 
     * @param {String} opts.ratePerMinGt 
     * @param {String} opts.ratePerMinLt 
     * @param {module:api/OriginationApi~didBillingRuleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200143}
     */
    this.didBillingRuleListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'name': opts['name'],
        'rate_table_id': opts['rateTableId'],
        'type': opts['type'],
        'id_in': opts['idIn'],
        'rate_per_min_gt': opts['ratePerMinGt'],
        'rate_per_min_lt': opts['ratePerMinLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200143;

      return this.apiClient.callApi(
        '/did/billing_rule/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientAllDelete operation.
     * @callback module:api/OriginationApi~didClientAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/OriginationApi~didClientAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didClientAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/client/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientAllPatch operation.
     * @callback module:api/OriginationApi~didClientAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierActivate} opts.body All Carriers to modify
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/OriginationApi~didClientAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didClientAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/client/all', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdDelete operation.
     * @callback module:api/OriginationApi~didClientClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {module:api/OriginationApi~didClientClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didClientClientIdDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdGet operation.
     * @callback module:api/OriginationApi~didClientClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {module:api/OriginationApi~didClientClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200138}
     */
    this.didClientClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200138;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientClientIdPatch operation.
     * @callback module:api/OriginationApi~didClientClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies clientdid
     * @param {Number} clientId ClientDid id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientDid} opts.body ClientDid to modify
     * @param {module:api/OriginationApi~didClientClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200138}
     */
    this.didClientClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200138;

      return this.apiClient.callApi(
        '/did/client/{client_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientCreatePost operation.
     * @callback module:api/OriginationApi~didClientCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new clientdid
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientDid} opts.body ClientDid to create
     * @param {module:api/OriginationApi~didClientCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didClientCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/client/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientIdOrigInvoicePost operation.
     * @callback module:api/OriginationApi~didClientIdOrigInvoicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new originvoice
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/OrigInvoice} opts.body OrigInvoice to create
     * @param {module:api/OriginationApi~didClientIdOrigInvoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didClientIdOrigInvoicePost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didClientIdOrigInvoicePost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/{client_id}/orig_invoice', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didClientListGet operation.
     * @callback module:api/OriginationApi~didClientListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200139} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didclients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.name 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didClientListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200139}
     */
    this.didClientListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'name': opts['name'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200139;

      return this.apiClient.callApi(
        '/did/client/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceAllDelete operation.
     * @callback module:api/OriginationApi~didOrigInvoiceAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found originvoice
     * @param {Object} opts Optional parameters
     * @param {Number} opts.clientId 
     * @param {module:model/String} opts.createType 
     * @param {String} opts.invoiceIdIn 
     * @param {String} opts.invoiceNumber 
     * @param {String} opts.invoiceTimeGte 
     * @param {String} opts.invoiceTimeLt 
     * @param {module:model/String} opts.state 
     * @param {module:api/OriginationApi~didOrigInvoiceAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didOrigInvoiceAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'client_id': opts['clientId'],
        'create_type': opts['createType'],
        'invoice_id_in': opts['invoiceIdIn'],
        'invoice_number': opts['invoiceNumber'],
        'invoice_time_gte': opts['invoiceTimeGte'],
        'invoice_time_lt': opts['invoiceTimeLt'],
        'state': opts['state'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/orig_invoice/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceInvoiceIdDelete operation.
     * @callback module:api/OriginationApi~didOrigInvoiceInvoiceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes originvoice
     * @param {Number} invoiceId OrigInvoice id to get info about
     * @param {module:api/OriginationApi~didOrigInvoiceInvoiceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didOrigInvoiceInvoiceIdDelete = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling didOrigInvoiceInvoiceIdDelete");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/orig_invoice/{invoice_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceInvoiceIdGet operation.
     * @callback module:api/OriginationApi~didOrigInvoiceInvoiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets originvoice
     * @param {Number} invoiceId OrigInvoice id to get info about
     * @param {module:api/OriginationApi~didOrigInvoiceInvoiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200148}
     */
    this.didOrigInvoiceInvoiceIdGet = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling didOrigInvoiceInvoiceIdGet");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/did/orig_invoice/{invoice_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceInvoiceIdPatch operation.
     * @callback module:api/OriginationApi~didOrigInvoiceInvoiceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies originvoice
     * @param {Number} invoiceId OrigInvoice id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/OrigInvoice} opts.body OrigInvoice to modify
     * @param {module:api/OriginationApi~didOrigInvoiceInvoiceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200148}
     */
    this.didOrigInvoiceInvoiceIdPatch = function(invoiceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling didOrigInvoiceInvoiceIdPatch");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/did/orig_invoice/{invoice_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didOrigInvoiceListGet operation.
     * @callback module:api/OriginationApi~didOrigInvoiceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200149} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets originvoices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {module:model/String} opts.createType 
     * @param {String} opts.invoiceNumber 
     * @param {module:model/String} opts.state 
     * @param {String} opts.invoiceIdIn 
     * @param {String} opts.invoiceTimeGte 
     * @param {String} opts.invoiceTimeLt 
     * @param {module:api/OriginationApi~didOrigInvoiceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200149}
     */
    this.didOrigInvoiceListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'create_type': opts['createType'],
        'invoice_number': opts['invoiceNumber'],
        'state': opts['state'],
        'invoice_id_in': opts['invoiceIdIn'],
        'invoice_time_gte': opts['invoiceTimeGte'],
        'invoice_time_lt': opts['invoiceTimeLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200149;

      return this.apiClient.callApi(
        '/did/orig_invoice/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryAllDelete operation.
     * @callback module:api/OriginationApi~didRepositoryAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found didbillingrel
     * @param {Object} opts Optional parameters
     * @param {String} opts.assignedDateGt 
     * @param {String} opts.assignedDateLt 
     * @param {Number} opts.clientBillingRuleId 
     * @param {String} opts.clientBillingRuleName 
     * @param {Number} opts.clientId 
     * @param {Number} opts.clientResId 
     * @param {String} opts.did 
     * @param {String} opts.didClientName 
     * @param {String} opts.didClientResName 
     * @param {String} opts.didVendorName 
     * @param {String} opts.didVendorResName 
     * @param {String} opts.endDateGt 
     * @param {Boolean} opts.endDateIsnull 
     * @param {String} opts.endDateLt 
     * @param {Number} opts.id 
     * @param {Boolean} opts.isAvailable 
     * @param {Number} opts.vendorBillingRuleId 
     * @param {String} opts.vendorBillingRuleName 
     * @param {Number} opts.vendorId 
     * @param {Number} opts.vendorResId 
     * @param {module:api/OriginationApi~didRepositoryAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didRepositoryAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'assigned_date_gt': opts['assignedDateGt'],
        'assigned_date_lt': opts['assignedDateLt'],
        'client_billing_rule_id': opts['clientBillingRuleId'],
        'client_billing_rule_name': opts['clientBillingRuleName'],
        'client_id': opts['clientId'],
        'client_res_id': opts['clientResId'],
        'did': opts['did'],
        'did_client_name': opts['didClientName'],
        'did_client_res_name': opts['didClientResName'],
        'did_vendor_name': opts['didVendorName'],
        'did_vendor_res_name': opts['didVendorResName'],
        'end_date_gt': opts['endDateGt'],
        'end_date_isnull': opts['endDateIsnull'],
        'end_date_lt': opts['endDateLt'],
        'id': opts['id'],
        'is_available': opts['isAvailable'],
        'vendor_billing_rule_id': opts['vendorBillingRuleId'],
        'vendor_billing_rule_name': opts['vendorBillingRuleName'],
        'vendor_id': opts['vendorId'],
        'vendor_res_id': opts['vendorResId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/repository/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryAvailableListGet operation.
     * @callback module:api/OriginationApi~didRepositoryAvailableListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available didrepository items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.did 
     * @param {Number} opts.id 
     * @param {Number} opts.vendorBillingRuleId 
     * @param {Number} opts.vendorResId 
     * @param {module:api/OriginationApi~didRepositoryAvailableListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200146}
     */
    this.didRepositoryAvailableListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'did': opts['did'],
        'id': opts['id'],
        'vendor_billing_rule_id': opts['vendorBillingRuleId'],
        'vendor_res_id': opts['vendorResId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/did/repository/available/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryCreatePost operation.
     * @callback module:api/OriginationApi~didRepositoryCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didvendor
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingRel} opts.body DidVendor to create
     * @param {module:api/OriginationApi~didRepositoryCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didRepositoryCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/repository/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdDelete operation.
     * @callback module:api/OriginationApi~didRepositoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {module:api/OriginationApi~didRepositoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didRepositoryIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdGet operation.
     * @callback module:api/OriginationApi~didRepositoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {module:api/OriginationApi~didRepositoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    this.didRepositoryIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200144;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryIdPatch operation.
     * @callback module:api/OriginationApi~didRepositoryIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didrepository item
     * @param {Number} id DidRepository item id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingRelModify} opts.body DidRepository item to modify
     * @param {module:api/OriginationApi~didRepositoryIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    this.didRepositoryIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling didRepositoryIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200144;

      return this.apiClient.callApi(
        '/did/repository/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryListGet operation.
     * @callback module:api/OriginationApi~didRepositoryListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200145} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didrepository items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientBillingRuleId 
     * @param {String} opts.clientBillingRuleName 
     * @param {Number} opts.clientId 
     * @param {Number} opts.clientResId 
     * @param {String} opts.did 
     * @param {String} opts.didClientName 
     * @param {String} opts.didClientResName 
     * @param {String} opts.didVendorName 
     * @param {String} opts.didVendorResName 
     * @param {Number} opts.id 
     * @param {Boolean} opts.isAvailable 
     * @param {Number} opts.vendorBillingRuleId 
     * @param {String} opts.vendorBillingRuleName 
     * @param {Number} opts.vendorId 
     * @param {Number} opts.vendorResId 
     * @param {String} opts.assignedDateGt 
     * @param {String} opts.assignedDateLt 
     * @param {String} opts.endDateGt 
     * @param {Boolean} opts.endDateIsnull 
     * @param {String} opts.endDateLt 
     * @param {module:api/OriginationApi~didRepositoryListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200145}
     */
    this.didRepositoryListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_billing_rule_id': opts['clientBillingRuleId'],
        'client_billing_rule_name': opts['clientBillingRuleName'],
        'client_id': opts['clientId'],
        'client_res_id': opts['clientResId'],
        'did': opts['did'],
        'did_client_name': opts['didClientName'],
        'did_client_res_name': opts['didClientResName'],
        'did_vendor_name': opts['didVendorName'],
        'did_vendor_res_name': opts['didVendorResName'],
        'id': opts['id'],
        'is_available': opts['isAvailable'],
        'vendor_billing_rule_id': opts['vendorBillingRuleId'],
        'vendor_billing_rule_name': opts['vendorBillingRuleName'],
        'vendor_id': opts['vendorId'],
        'vendor_res_id': opts['vendorResId'],
        'assigned_date_gt': opts['assignedDateGt'],
        'assigned_date_lt': opts['assignedDateLt'],
        'end_date_gt': opts['endDateGt'],
        'end_date_isnull': opts['endDateIsnull'],
        'end_date_lt': opts['endDateLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200145;

      return this.apiClient.callApi(
        '/did/repository/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRepositoryMassAssignPatch operation.
     * @callback module:api/OriginationApi~didRepositoryMassAssignPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/DidBillingRelMassAssign} opts.body Assign to
     * @param {module:api/OriginationApi~didRepositoryMassAssignPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didRepositoryMassAssignPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/repository/mass_assign', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didRoutingListGet operation.
     * @callback module:api/OriginationApi~didRoutingListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200147} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didstaticrouting items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.did 
     * @param {Number} opts.itemId 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didRoutingListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200147}
     */
    this.didRoutingListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'did': opts['did'],
        'item_id': opts['itemId'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200147;

      return this.apiClient.callApi(
        '/did/routing/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorAllDelete operation.
     * @callback module:api/OriginationApi~didVendorAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/OriginationApi~didVendorAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didVendorAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/vendor/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorAllPatch operation.
     * @callback module:api/OriginationApi~didVendorAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierActivate} opts.body All Carriers to modify
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/OriginationApi~didVendorAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.didVendorAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/did/vendor/all', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdDelete operation.
     * @callback module:api/OriginationApi~didVendorClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {module:api/OriginationApi~didVendorClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.didVendorClientIdDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdGet operation.
     * @callback module:api/OriginationApi~didVendorClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {module:api/OriginationApi~didVendorClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    this.didVendorClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdPatch operation.
     * @callback module:api/OriginationApi~didVendorClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies didvendor
     * @param {Number} clientId DidVendor id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/VendorDid} opts.body DidVendor to modify
     * @param {module:api/OriginationApi~didVendorClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    this.didVendorClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorClientIdUploadDidsPost operation.
     * @callback module:api/OriginationApi~didVendorClientIdUploadDidsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new vendordids file
     * @param {module:model/String} dupliateHandling How to handle duplicates
     * @param {File} file File to upload
     * @param {Number} clientId Vendor to upload DIDs
     * @param {module:api/OriginationApi~didVendorClientIdUploadDidsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    this.didVendorClientIdUploadDidsPost = function(dupliateHandling, file, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'dupliateHandling' is set
      if (dupliateHandling === undefined || dupliateHandling === null) {
        throw new Error("Missing the required parameter 'dupliateHandling' when calling didVendorClientIdUploadDidsPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling didVendorClientIdUploadDidsPost");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling didVendorClientIdUploadDidsPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'dupliate_handling': dupliateHandling,
        'file': file
      };

      var authNames = ['auth_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/did/vendor/{client_id}/upload_dids', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorCreatePost operation.
     * @callback module:api/OriginationApi~didVendorCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new didvendor
     * @param {Object} opts Optional parameters
     * @param {module:model/VendorDid} opts.body DidVendor to create
     * @param {module:api/OriginationApi~didVendorCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.didVendorCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/did/vendor/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the didVendorListGet operation.
     * @callback module:api/OriginationApi~didVendorListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200141} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets didvendors
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.name 
     * @param {Boolean} opts.status 
     * @param {Number} opts.vendorResId 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/OriginationApi~didVendorListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200141}
     */
    this.didVendorListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'name': opts['name'],
        'status': opts['status'],
        'vendor_res_id': opts['vendorResId'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200141;

      return this.apiClient.callApi(
        '/did/vendor/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
