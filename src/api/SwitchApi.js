/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/CodeAll', 'model/CodeDeck', 'model/Currency', 'model/InlineResponse200158', 'model/InlineResponse200159', 'model/InlineResponse200160', 'model/InlineResponse200161', 'model/InlineResponse200162', 'model/InlineResponse200163', 'model/InlineResponse200164', 'model/InlineResponse200165', 'model/InlineResponse200166', 'model/InlineResponse200167', 'model/InlineResponse200168', 'model/InlineResponse200169', 'model/InlineResponse200170', 'model/InlineResponse200171', 'model/InlineResponse200172', 'model/InlineResponse200173', 'model/InlineResponse200174', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/Rate', 'model/RateMany', 'model/RateModify', 'model/RateSendToClients', 'model/RateTable', 'model/Success', 'model/SwitchProfileModify', 'model/SwitchProfileSipHost', 'model/UnauthenticatedError', 'model/ValidationError', 'model/VoipGateway'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/CodeAll'), require('../model/CodeDeck'), require('../model/Currency'), require('../model/InlineResponse200158'), require('../model/InlineResponse200159'), require('../model/InlineResponse200160'), require('../model/InlineResponse200161'), require('../model/InlineResponse200162'), require('../model/InlineResponse200163'), require('../model/InlineResponse200164'), require('../model/InlineResponse200165'), require('../model/InlineResponse200166'), require('../model/InlineResponse200167'), require('../model/InlineResponse200168'), require('../model/InlineResponse200169'), require('../model/InlineResponse200170'), require('../model/InlineResponse200171'), require('../model/InlineResponse200172'), require('../model/InlineResponse200173'), require('../model/InlineResponse200174'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/Rate'), require('../model/RateMany'), require('../model/RateModify'), require('../model/RateSendToClients'), require('../model/RateTable'), require('../model/Success'), require('../model/SwitchProfileModify'), require('../model/SwitchProfileSipHost'), require('../model/UnauthenticatedError'), require('../model/ValidationError'), require('../model/VoipGateway'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.SwitchApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.CodeAll, root.DnlApi.CodeDeck, root.DnlApi.Currency, root.DnlApi.InlineResponse200158, root.DnlApi.InlineResponse200159, root.DnlApi.InlineResponse200160, root.DnlApi.InlineResponse200161, root.DnlApi.InlineResponse200162, root.DnlApi.InlineResponse200163, root.DnlApi.InlineResponse200164, root.DnlApi.InlineResponse200165, root.DnlApi.InlineResponse200166, root.DnlApi.InlineResponse200167, root.DnlApi.InlineResponse200168, root.DnlApi.InlineResponse200169, root.DnlApi.InlineResponse200170, root.DnlApi.InlineResponse200171, root.DnlApi.InlineResponse200172, root.DnlApi.InlineResponse200173, root.DnlApi.InlineResponse200174, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.Rate, root.DnlApi.RateMany, root.DnlApi.RateModify, root.DnlApi.RateSendToClients, root.DnlApi.RateTable, root.DnlApi.Success, root.DnlApi.SwitchProfileModify, root.DnlApi.SwitchProfileSipHost, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError, root.DnlApi.VoipGateway);
  }
}(this, function(ApiClient, AttributeNotExists, CodeAll, CodeDeck, Currency, InlineResponse200158, InlineResponse200159, InlineResponse200160, InlineResponse200161, InlineResponse200162, InlineResponse200163, InlineResponse200164, InlineResponse200165, InlineResponse200166, InlineResponse200167, InlineResponse200168, InlineResponse200169, InlineResponse200170, InlineResponse200171, InlineResponse200172, InlineResponse200173, InlineResponse200174, ObjectCreated, ObjectNotFoundError, OperationError, Rate, RateMany, RateModify, RateSendToClients, RateTable, Success, SwitchProfileModify, SwitchProfileSipHost, UnauthenticatedError, ValidationError, VoipGateway) {
  'use strict';

  /**
   * Switch service.
   * @module api/SwitchApi
   * @version 1.2.10
   */

  /**
   * Constructs a new SwitchApi. 
   * @alias module:api/SwitchApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the switchCapacityIdDelete operation.
     * @callback module:api/SwitchApi~switchCapacityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes switchprofile
     * @param {Number} id SwitchProfile id to get info about
     * @param {module:api/SwitchApi~switchCapacityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchCapacityIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchCapacityIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/capacity/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCapacityIdGet operation.
     * @callback module:api/SwitchApi~switchCapacityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200162} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets switchprofile
     * @param {Number} id SwitchProfile id to get info about
     * @param {module:api/SwitchApi~switchCapacityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200162}
     */
    this.switchCapacityIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchCapacityIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200162;

      return this.apiClient.callApi(
        '/switch/capacity/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCapacityIdPatch operation.
     * @callback module:api/SwitchApi~switchCapacityIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200162} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies switchprofile
     * @param {Number} id SwitchProfile id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SwitchProfileModify} opts.body SwitchProfile to modify
     * @param {module:api/SwitchApi~switchCapacityIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200162}
     */
    this.switchCapacityIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchCapacityIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200162;

      return this.apiClient.callApi(
        '/switch/capacity/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCapacityListGet operation.
     * @callback module:api/SwitchApi~switchCapacityListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200163} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets switchprofiles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/SwitchApi~switchCapacityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200163}
     */
    this.switchCapacityListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200163;

      return this.apiClient.callApi(
        '/switch/capacity/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeCodeIdDelete operation.
     * @callback module:api/SwitchApi~switchCodeCodeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes code
     * @param {Number} codeId Code id to get info about
     * @param {module:api/SwitchApi~switchCodeCodeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchCodeCodeIdDelete = function(codeId, callback) {
      var postBody = null;

      // verify the required parameter 'codeId' is set
      if (codeId === undefined || codeId === null) {
        throw new Error("Missing the required parameter 'codeId' when calling switchCodeCodeIdDelete");
      }


      var pathParams = {
        'code_id': codeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/code/{code_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeCodeIdGet operation.
     * @callback module:api/SwitchApi~switchCodeCodeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200164} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets code
     * @param {Number} codeId Code id to get info about
     * @param {module:api/SwitchApi~switchCodeCodeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200164}
     */
    this.switchCodeCodeIdGet = function(codeId, callback) {
      var postBody = null;

      // verify the required parameter 'codeId' is set
      if (codeId === undefined || codeId === null) {
        throw new Error("Missing the required parameter 'codeId' when calling switchCodeCodeIdGet");
      }


      var pathParams = {
        'code_id': codeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200164;

      return this.apiClient.callApi(
        '/switch/code/{code_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeCodeIdPatch operation.
     * @callback module:api/SwitchApi~switchCodeCodeIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200164} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies code
     * @param {Number} codeId Code id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeAll} opts.body Code to modify
     * @param {module:api/SwitchApi~switchCodeCodeIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200164}
     */
    this.switchCodeCodeIdPatch = function(codeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'codeId' is set
      if (codeId === undefined || codeId === null) {
        throw new Error("Missing the required parameter 'codeId' when calling switchCodeCodeIdPatch");
      }


      var pathParams = {
        'code_id': codeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200164;

      return this.apiClient.callApi(
        '/switch/code/{code_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeCreatePost operation.
     * @callback module:api/SwitchApi~switchCodeCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new code
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeAll} opts.body Code to create
     * @param {module:api/SwitchApi~switchCodeCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchCodeCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/code/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeDeckCodeDeckIdDelete operation.
     * @callback module:api/SwitchApi~switchCodeDeckCodeDeckIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes codedeck
     * @param {Number} codeDeckId CodeDeck id to get info about
     * @param {module:api/SwitchApi~switchCodeDeckCodeDeckIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchCodeDeckCodeDeckIdDelete = function(codeDeckId, callback) {
      var postBody = null;

      // verify the required parameter 'codeDeckId' is set
      if (codeDeckId === undefined || codeDeckId === null) {
        throw new Error("Missing the required parameter 'codeDeckId' when calling switchCodeDeckCodeDeckIdDelete");
      }


      var pathParams = {
        'code_deck_id': codeDeckId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/code_deck/{code_deck_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeDeckCodeDeckIdGet operation.
     * @callback module:api/SwitchApi~switchCodeDeckCodeDeckIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200167} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codedeck
     * @param {Number} codeDeckId CodeDeck id to get info about
     * @param {module:api/SwitchApi~switchCodeDeckCodeDeckIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200167}
     */
    this.switchCodeDeckCodeDeckIdGet = function(codeDeckId, callback) {
      var postBody = null;

      // verify the required parameter 'codeDeckId' is set
      if (codeDeckId === undefined || codeDeckId === null) {
        throw new Error("Missing the required parameter 'codeDeckId' when calling switchCodeDeckCodeDeckIdGet");
      }


      var pathParams = {
        'code_deck_id': codeDeckId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200167;

      return this.apiClient.callApi(
        '/switch/code_deck/{code_deck_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeDeckCodeDeckIdPatch operation.
     * @callback module:api/SwitchApi~switchCodeDeckCodeDeckIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200167} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies codedeck
     * @param {Number} codeDeckId CodeDeck id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeDeck} opts.body CodeDeck to modify
     * @param {module:api/SwitchApi~switchCodeDeckCodeDeckIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200167}
     */
    this.switchCodeDeckCodeDeckIdPatch = function(codeDeckId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'codeDeckId' is set
      if (codeDeckId === undefined || codeDeckId === null) {
        throw new Error("Missing the required parameter 'codeDeckId' when calling switchCodeDeckCodeDeckIdPatch");
      }


      var pathParams = {
        'code_deck_id': codeDeckId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200167;

      return this.apiClient.callApi(
        '/switch/code_deck/{code_deck_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeDeckCreatePost operation.
     * @callback module:api/SwitchApi~switchCodeDeckCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new codedeck
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeDeck} opts.body CodeDeck to create
     * @param {module:api/SwitchApi~switchCodeDeckCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchCodeDeckCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/code_deck/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeDeckListGet operation.
     * @callback module:api/SwitchApi~switchCodeDeckListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codedecks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.codeDeckId 
     * @param {String} opts.name 
     * @param {String} opts.updateBy 
     * @param {Number} opts.usageCount 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {module:api/SwitchApi~switchCodeDeckListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200168}
     */
    this.switchCodeDeckListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'code_deck_id': opts['codeDeckId'],
        'name': opts['name'],
        'update_by': opts['updateBy'],
        'usage_count': opts['usageCount'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200168;

      return this.apiClient.callApi(
        '/switch/code_deck/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCodeListGet operation.
     * @callback module:api/SwitchApi~switchCodeListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200165} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.city 
     * @param {String} opts.code 
     * @param {Number} opts.codeDeckId 
     * @param {String} opts.country 
     * @param {String} opts.name 
     * @param {String} opts.state 
     * @param {module:api/SwitchApi~switchCodeListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200165}
     */
    this.switchCodeListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'city': opts['city'],
        'code': opts['code'],
        'code_deck_id': opts['codeDeckId'],
        'country': opts['country'],
        'name': opts['name'],
        'state': opts['state']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200165;

      return this.apiClient.callApi(
        '/switch/code/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCurrencyCreatePost operation.
     * @callback module:api/SwitchApi~switchCurrencyCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new currency
     * @param {Object} opts Optional parameters
     * @param {module:model/Currency} opts.body Currency to create
     * @param {module:api/SwitchApi~switchCurrencyCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchCurrencyCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/currency/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCurrencyCurrencyIdDelete operation.
     * @callback module:api/SwitchApi~switchCurrencyCurrencyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes currency
     * @param {Number} currencyId Currency id to get info about
     * @param {module:api/SwitchApi~switchCurrencyCurrencyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchCurrencyCurrencyIdDelete = function(currencyId, callback) {
      var postBody = null;

      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling switchCurrencyCurrencyIdDelete");
      }


      var pathParams = {
        'currency_id': currencyId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/currency/{currency_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCurrencyCurrencyIdGet operation.
     * @callback module:api/SwitchApi~switchCurrencyCurrencyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200169} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets currency
     * @param {Number} currencyId Currency id to get info about
     * @param {module:api/SwitchApi~switchCurrencyCurrencyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200169}
     */
    this.switchCurrencyCurrencyIdGet = function(currencyId, callback) {
      var postBody = null;

      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling switchCurrencyCurrencyIdGet");
      }


      var pathParams = {
        'currency_id': currencyId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200169;

      return this.apiClient.callApi(
        '/switch/currency/{currency_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCurrencyCurrencyIdPatch operation.
     * @callback module:api/SwitchApi~switchCurrencyCurrencyIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200169} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies currency
     * @param {Number} currencyId Currency id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/Currency} opts.body Currency to modify
     * @param {module:api/SwitchApi~switchCurrencyCurrencyIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200169}
     */
    this.switchCurrencyCurrencyIdPatch = function(currencyId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'currencyId' is set
      if (currencyId === undefined || currencyId === null) {
        throw new Error("Missing the required parameter 'currencyId' when calling switchCurrencyCurrencyIdPatch");
      }


      var pathParams = {
        'currency_id': currencyId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200169;

      return this.apiClient.callApi(
        '/switch/currency/{currency_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchCurrencyListGet operation.
     * @callback module:api/SwitchApi~switchCurrencyListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200170} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets currencies
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/SwitchApi~switchCurrencyListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200170}
     */
    this.switchCurrencyListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200170;

      return this.apiClient.callApi(
        '/switch/currency/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchDestinationListGet operation.
     * @callback module:api/SwitchApi~switchDestinationListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200166} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codedestinations
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.code 
     * @param {String} opts.country 
     * @param {String} opts.destination 
     * @param {module:api/SwitchApi~switchDestinationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200166}
     */
    this.switchDestinationListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'code': opts['code'],
        'country': opts['country'],
        'destination': opts['destination']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200166;

      return this.apiClient.callApi(
        '/switch/destination/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchListGet operation.
     * @callback module:api/SwitchApi~switchListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200159} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets voipgateways
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.activeCallIp 
     * @param {String} opts.lanIp 
     * @param {Number} opts.lanPort 
     * @param {String} opts.name 
     * @param {Number} opts.switchId 
     * @param {module:api/SwitchApi~switchListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200159}
     */
    this.switchListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active_call_ip': opts['activeCallIp'],
        'lan_ip': opts['lanIp'],
        'lan_port': opts['lanPort'],
        'name': opts['name'],
        'switch_id': opts['switchId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200159;

      return this.apiClient.callApi(
        '/switch/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchPost operation.
     * @callback module:api/SwitchApi~switchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new voipgateway
     * @param {Object} opts Optional parameters
     * @param {module:model/VoipGateway} opts.body VoipGateway to create
     * @param {module:api/SwitchApi~switchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateCodeRateTableIdCodeDelete operation.
     * @callback module:api/SwitchApi~switchRateCodeRateTableIdCodeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes rate
     * @param {Number} rateTableId Parent rate table
     * @param {String} code Rate id to get info about
     * @param {module:api/SwitchApi~switchRateCodeRateTableIdCodeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateCodeRateTableIdCodeDelete = function(rateTableId, code, callback) {
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateCodeRateTableIdCodeDelete");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling switchRateCodeRateTableIdCodeDelete");
      }


      var pathParams = {
        'rate_table_id': rateTableId,
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate_code/{rate_table_id}/{code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateCodeRateTableIdCodeGet operation.
     * @callback module:api/SwitchApi~switchRateCodeRateTableIdCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200174} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rate
     * @param {Number} rateTableId Parent rate table
     * @param {String} code Rate id to get info about
     * @param {module:api/SwitchApi~switchRateCodeRateTableIdCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200174}
     */
    this.switchRateCodeRateTableIdCodeGet = function(rateTableId, code, callback) {
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateCodeRateTableIdCodeGet");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling switchRateCodeRateTableIdCodeGet");
      }


      var pathParams = {
        'rate_table_id': rateTableId,
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200174;

      return this.apiClient.callApi(
        '/switch/rate_code/{rate_table_id}/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateCodeRateTableIdCodePatch operation.
     * @callback module:api/SwitchApi~switchRateCodeRateTableIdCodePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200174} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies rate
     * @param {Number} rateTableId Parent rate table
     * @param {String} code Rate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateModify} opts.body Rate to modify
     * @param {module:api/SwitchApi~switchRateCodeRateTableIdCodePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200174}
     */
    this.switchRateCodeRateTableIdCodePatch = function(rateTableId, code, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateCodeRateTableIdCodePatch");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling switchRateCodeRateTableIdCodePatch");
      }


      var pathParams = {
        'rate_table_id': rateTableId,
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200174;

      return this.apiClient.callApi(
        '/switch/rate_code/{rate_table_id}/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateCodeRateTableIdSendToClientsPost operation.
     * @callback module:api/SwitchApi~switchRateCodeRateTableIdSendToClientsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send rates to clients
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {module:model/RateSendToClients} opts.body Rates to create
     * @param {module:api/SwitchApi~switchRateCodeRateTableIdSendToClientsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateCodeRateTableIdSendToClientsPost = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateCodeRateTableIdSendToClientsPost");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate_code/{rate_table_id}/send_to_clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateRateIdDelete operation.
     * @callback module:api/SwitchApi~switchRateRateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes rate
     * @param {Number} rateId Rate id to get info about
     * @param {module:api/SwitchApi~switchRateRateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateRateIdDelete = function(rateId, callback) {
      var postBody = null;

      // verify the required parameter 'rateId' is set
      if (rateId === undefined || rateId === null) {
        throw new Error("Missing the required parameter 'rateId' when calling switchRateRateIdDelete");
      }


      var pathParams = {
        'rate_id': rateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate/{rate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateRateIdGet operation.
     * @callback module:api/SwitchApi~switchRateRateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200174} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rate
     * @param {Number} rateId Rate id to get info about
     * @param {module:api/SwitchApi~switchRateRateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200174}
     */
    this.switchRateRateIdGet = function(rateId, callback) {
      var postBody = null;

      // verify the required parameter 'rateId' is set
      if (rateId === undefined || rateId === null) {
        throw new Error("Missing the required parameter 'rateId' when calling switchRateRateIdGet");
      }


      var pathParams = {
        'rate_id': rateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200174;

      return this.apiClient.callApi(
        '/switch/rate/{rate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateRateIdPatch operation.
     * @callback module:api/SwitchApi~switchRateRateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200174} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies rate
     * @param {Number} rateId Rate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateModify} opts.body Rate to modify
     * @param {module:api/SwitchApi~switchRateRateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200174}
     */
    this.switchRateRateIdPatch = function(rateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateId' is set
      if (rateId === undefined || rateId === null) {
        throw new Error("Missing the required parameter 'rateId' when calling switchRateRateIdPatch");
      }


      var pathParams = {
        'rate_id': rateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200174;

      return this.apiClient.callApi(
        '/switch/rate/{rate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableCreatePost operation.
     * @callback module:api/SwitchApi~switchRateTableCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ratetable
     * @param {Object} opts Optional parameters
     * @param {module:model/RateTable} opts.body RateTable to create
     * @param {module:api/SwitchApi~switchRateTableCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchRateTableCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/rate_table/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableListGet operation.
     * @callback module:api/SwitchApi~switchRateTableListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200172} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratetables
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.billingMethod 
     * @param {String} opts.codeDeckName 
     * @param {String} opts.currencyName 
     * @param {String} opts.name 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.rateTypeName 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/SwitchApi~switchRateTableListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200172}
     */
    this.switchRateTableListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'billing_method': opts['billingMethod'],
        'code_deck_name': opts['codeDeckName'],
        'currency_name': opts['currencyName'],
        'name': opts['name'],
        'rate_table_id': opts['rateTableId'],
        'rate_type_name': opts['rateTypeName'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200172;

      return this.apiClient.callApi(
        '/switch/rate_table/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdDelete operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes ratetable
     * @param {Number} rateTableId RateTable id to get info about
     * @param {module:api/SwitchApi~switchRateTableRateTableIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateTableRateTableIdDelete = function(rateTableId, callback) {
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdDelete");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdEditRatesPatch operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdEditRatesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch multiply rate items in rate table
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {module:model/RateMany} opts.body Rates to create
     * @param {module:api/SwitchApi~switchRateTableRateTableIdEditRatesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateTableRateTableIdEditRatesPatch = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdEditRatesPatch");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}/edit_rates', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdGet operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200171} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratetable
     * @param {Number} rateTableId RateTable id to get info about
     * @param {module:api/SwitchApi~switchRateTableRateTableIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200171}
     */
    this.switchRateTableRateTableIdGet = function(rateTableId, callback) {
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdGet");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200171;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdPatch operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200171} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies ratetable
     * @param {Number} rateTableId RateTable id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateTable} opts.body RateTable to modify
     * @param {module:api/SwitchApi~switchRateTableRateTableIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200171}
     */
    this.switchRateTableRateTableIdPatch = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdPatch");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200171;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdRateCsvGet operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdRateCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200173} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rates
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/SwitchApi~switchRateTableRateTableIdRateCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200173}
     */
    this.switchRateTableRateTableIdRateCsvGet = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdRateCsvGet");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200173;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}/rate.csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdRateListGet operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdRateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200173} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rates
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/SwitchApi~switchRateTableRateTableIdRateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200173}
     */
    this.switchRateTableRateTableIdRateListGet = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdRateListGet");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200173;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}/rate/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdRatePost operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdRatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new rate
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {module:model/Rate} opts.body Rate to create
     * @param {module:api/SwitchApi~switchRateTableRateTableIdRatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchRateTableRateTableIdRatePost = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdRatePost");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}/rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchRateTableRateTableIdRatesPost operation.
     * @callback module:api/SwitchApi~switchRateTableRateTableIdRatesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiply rate items in rate table
     * @param {Number} rateTableId Parent rate table
     * @param {Object} opts Optional parameters
     * @param {module:model/RateMany} opts.body Rates to create
     * @param {module:api/SwitchApi~switchRateTableRateTableIdRatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchRateTableRateTableIdRatesPost = function(rateTableId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rateTableId' is set
      if (rateTableId === undefined || rateTableId === null) {
        throw new Error("Missing the required parameter 'rateTableId' when calling switchRateTableRateTableIdRatesPost");
      }


      var pathParams = {
        'rate_table_id': rateTableId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/rate_table/{rate_table_id}/rates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSipHostIdDelete operation.
     * @callback module:api/SwitchApi~switchSipHostIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes siphost
     * @param {Number} id SipHost id to get info about
     * @param {module:api/SwitchApi~switchSipHostIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchSipHostIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSipHostIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/sip_host/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSipHostIdGet operation.
     * @callback module:api/SwitchApi~switchSipHostIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200160} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets siphost
     * @param {Number} id SipHost id to get info about
     * @param {module:api/SwitchApi~switchSipHostIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200160}
     */
    this.switchSipHostIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSipHostIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200160;

      return this.apiClient.callApi(
        '/switch/sip_host/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSipHostIdPatch operation.
     * @callback module:api/SwitchApi~switchSipHostIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200160} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies siphost
     * @param {Number} id SipHost id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SwitchProfileSipHost} opts.body SipHost to modify
     * @param {module:api/SwitchApi~switchSipHostIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200160}
     */
    this.switchSipHostIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSipHostIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200160;

      return this.apiClient.callApi(
        '/switch/sip_host/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSipHostListGet operation.
     * @callback module:api/SwitchApi~switchSipHostListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200161} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets switchprofiles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.hostName 
     * @param {String} opts.sipIp 
     * @param {module:api/SwitchApi~switchSipHostListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200161}
     */
    this.switchSipHostListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'host_name': opts['hostName'],
        'sip_ip': opts['sipIp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200161;

      return this.apiClient.callApi(
        '/switch/sip_host/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSwitchIdDelete operation.
     * @callback module:api/SwitchApi~switchSwitchIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes voipgateway
     * @param {Number} id VoipGateway id to get info about
     * @param {module:api/SwitchApi~switchSwitchIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.switchSwitchIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSwitchIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/switch/{switch_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSwitchIdGet operation.
     * @callback module:api/SwitchApi~switchSwitchIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200158} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets voipgateway
     * @param {Number} id VoipGateway id to get info about
     * @param {module:api/SwitchApi~switchSwitchIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200158}
     */
    this.switchSwitchIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSwitchIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200158;

      return this.apiClient.callApi(
        '/switch/{switch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSwitchIdPatch operation.
     * @callback module:api/SwitchApi~switchSwitchIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200158} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies voipgateway
     * @param {Number} id VoipGateway id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/VoipGateway} opts.body VoipGateway to modify
     * @param {module:api/SwitchApi~switchSwitchIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200158}
     */
    this.switchSwitchIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchSwitchIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200158;

      return this.apiClient.callApi(
        '/switch/{switch_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchSwitchIdSipHostCreatePost operation.
     * @callback module:api/SwitchApi~switchSwitchIdSipHostCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new siphost
     * @param {Number} switchId Parent gateway id
     * @param {Object} opts Optional parameters
     * @param {module:model/SwitchProfileSipHost} opts.body SipHost to create
     * @param {module:api/SwitchApi~switchSwitchIdSipHostCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.switchSwitchIdSipHostCreatePost = function(switchId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'switchId' is set
      if (switchId === undefined || switchId === null) {
        throw new Error("Missing the required parameter 'switchId' when calling switchSwitchIdSipHostCreatePost");
      }


      var pathParams = {
        'switch_id': switchId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/switch/{switch_id}/sip_host/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
