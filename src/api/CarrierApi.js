/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/Carrier', 'model/CarrierActivate', 'model/CarrierAllertSettings', 'model/CarrierContacts', 'model/CarrierFromTemplate', 'model/CarrierGroup', 'model/CarrierInvoiceSetting', 'model/CarrierLong', 'model/CarrierLongModify', 'model/CarrierLowBalanceConfig', 'model/CarrierModify', 'model/CarrierPassword', 'model/CarrierPortal', 'model/CarrierScc', 'model/CarrierTemplateFromClient', 'model/ClientCredit', 'model/EgressProfile', 'model/EgressTrunk', 'model/EgressTrunkPass', 'model/IngressTrunk', 'model/IngressTrunkModify', 'model/InlineResponse20011', 'model/InlineResponse20013', 'model/InlineResponse20014', 'model/InlineResponse20015', 'model/InlineResponse20016', 'model/InlineResponse20017', 'model/InlineResponse20018', 'model/InlineResponse20019', 'model/InlineResponse2002', 'model/InlineResponse20020', 'model/InlineResponse20021', 'model/InlineResponse20022', 'model/InlineResponse20023', 'model/InlineResponse20024', 'model/InlineResponse20025', 'model/InlineResponse20026', 'model/InlineResponse20027', 'model/InlineResponse20028', 'model/InlineResponse20029', 'model/InlineResponse20030', 'model/InlineResponse20031', 'model/InlineResponse20032', 'model/InlineResponse20033', 'model/InlineResponse20034', 'model/InlineResponse20035', 'model/InlineResponse20036', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/ResourceCapacity', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/Carrier'), require('../model/CarrierActivate'), require('../model/CarrierAllertSettings'), require('../model/CarrierContacts'), require('../model/CarrierFromTemplate'), require('../model/CarrierGroup'), require('../model/CarrierInvoiceSetting'), require('../model/CarrierLong'), require('../model/CarrierLongModify'), require('../model/CarrierLowBalanceConfig'), require('../model/CarrierModify'), require('../model/CarrierPassword'), require('../model/CarrierPortal'), require('../model/CarrierScc'), require('../model/CarrierTemplateFromClient'), require('../model/ClientCredit'), require('../model/EgressProfile'), require('../model/EgressTrunk'), require('../model/EgressTrunkPass'), require('../model/IngressTrunk'), require('../model/IngressTrunkModify'), require('../model/InlineResponse20011'), require('../model/InlineResponse20013'), require('../model/InlineResponse20014'), require('../model/InlineResponse20015'), require('../model/InlineResponse20016'), require('../model/InlineResponse20017'), require('../model/InlineResponse20018'), require('../model/InlineResponse20019'), require('../model/InlineResponse2002'), require('../model/InlineResponse20020'), require('../model/InlineResponse20021'), require('../model/InlineResponse20022'), require('../model/InlineResponse20023'), require('../model/InlineResponse20024'), require('../model/InlineResponse20025'), require('../model/InlineResponse20026'), require('../model/InlineResponse20027'), require('../model/InlineResponse20028'), require('../model/InlineResponse20029'), require('../model/InlineResponse20030'), require('../model/InlineResponse20031'), require('../model/InlineResponse20032'), require('../model/InlineResponse20033'), require('../model/InlineResponse20034'), require('../model/InlineResponse20035'), require('../model/InlineResponse20036'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/ResourceCapacity'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.CarrierApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.Carrier, root.DnlApi.CarrierActivate, root.DnlApi.CarrierAllertSettings, root.DnlApi.CarrierContacts, root.DnlApi.CarrierFromTemplate, root.DnlApi.CarrierGroup, root.DnlApi.CarrierInvoiceSetting, root.DnlApi.CarrierLong, root.DnlApi.CarrierLongModify, root.DnlApi.CarrierLowBalanceConfig, root.DnlApi.CarrierModify, root.DnlApi.CarrierPassword, root.DnlApi.CarrierPortal, root.DnlApi.CarrierScc, root.DnlApi.CarrierTemplateFromClient, root.DnlApi.ClientCredit, root.DnlApi.EgressProfile, root.DnlApi.EgressTrunk, root.DnlApi.EgressTrunkPass, root.DnlApi.IngressTrunk, root.DnlApi.IngressTrunkModify, root.DnlApi.InlineResponse20011, root.DnlApi.InlineResponse20013, root.DnlApi.InlineResponse20014, root.DnlApi.InlineResponse20015, root.DnlApi.InlineResponse20016, root.DnlApi.InlineResponse20017, root.DnlApi.InlineResponse20018, root.DnlApi.InlineResponse20019, root.DnlApi.InlineResponse2002, root.DnlApi.InlineResponse20020, root.DnlApi.InlineResponse20021, root.DnlApi.InlineResponse20022, root.DnlApi.InlineResponse20023, root.DnlApi.InlineResponse20024, root.DnlApi.InlineResponse20025, root.DnlApi.InlineResponse20026, root.DnlApi.InlineResponse20027, root.DnlApi.InlineResponse20028, root.DnlApi.InlineResponse20029, root.DnlApi.InlineResponse20030, root.DnlApi.InlineResponse20031, root.DnlApi.InlineResponse20032, root.DnlApi.InlineResponse20033, root.DnlApi.InlineResponse20034, root.DnlApi.InlineResponse20035, root.DnlApi.InlineResponse20036, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.ResourceCapacity, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, Carrier, CarrierActivate, CarrierAllertSettings, CarrierContacts, CarrierFromTemplate, CarrierGroup, CarrierInvoiceSetting, CarrierLong, CarrierLongModify, CarrierLowBalanceConfig, CarrierModify, CarrierPassword, CarrierPortal, CarrierScc, CarrierTemplateFromClient, ClientCredit, EgressProfile, EgressTrunk, EgressTrunkPass, IngressTrunk, IngressTrunkModify, InlineResponse20011, InlineResponse20013, InlineResponse20014, InlineResponse20015, InlineResponse20016, InlineResponse20017, InlineResponse20018, InlineResponse20019, InlineResponse2002, InlineResponse20020, InlineResponse20021, InlineResponse20022, InlineResponse20023, InlineResponse20024, InlineResponse20025, InlineResponse20026, InlineResponse20027, InlineResponse20028, InlineResponse20029, InlineResponse20030, InlineResponse20031, InlineResponse20032, InlineResponse20033, InlineResponse20034, InlineResponse20035, InlineResponse20036, ObjectCreated, ObjectNotFoundError, OperationError, ResourceCapacity, Success, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Carrier service.
   * @module api/CarrierApi
   * @version 1.2.62
   */

  /**
   * Constructs a new CarrierApi. 
   * @alias module:api/CarrierApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the carrierAllDelete operation.
     * @callback module:api/CarrierApi~carrierAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/CarrierApi~carrierAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.carrierAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/carrier/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierAllPatch operation.
     * @callback module:api/CarrierApi~carrierAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found all carriers
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierActivate} opts.body All Carriers to modify
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.clientIdIn 
     * @param {String} opts.company 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {String} opts.updateBy 
     * @param {module:api/CarrierApi~carrierAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.carrierAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'carrier_template_id': opts['carrierTemplateId'],
        'client_id_in': opts['clientIdIn'],
        'company': opts['company'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'egress_count': opts['egressCount'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'mode': opts['mode'],
        'name': opts['name'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
        'update_by': opts['updateBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/carrier/all', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierBasicCreatePost operation.
     * @callback module:api/CarrierApi~carrierBasicCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/Carrier} opts.body Carrier to create
     * @param {module:api/CarrierApi~carrierBasicCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierBasicCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/basic/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdAlertsGet operation.
     * @callback module:api/CarrierApi~carrierClientIdAlertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdAlertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.carrierClientIdAlertsGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdAlertsGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/carrier/{client_id}/alerts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdAlertsPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdAlertsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierAllertSettings} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdAlertsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    this.carrierClientIdAlertsPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdAlertsPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/carrier/{client_id}/alerts', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdContactsGet operation.
     * @callback module:api/CarrierApi~carrierClientIdContactsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdContactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    this.carrierClientIdContactsGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdContactsGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/carrier/{client_id}/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdContactsPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdContactsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierContacts} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdContactsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    this.carrierClientIdContactsPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdContactsPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/carrier/{client_id}/contacts', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdDelete operation.
     * @callback module:api/CarrierApi~carrierClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.carrierClientIdDelete = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdDelete");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/carrier/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdEgressTrunkListGet operation.
     * @callback module:api/CarrierApi~carrierClientIdEgressTrunkListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egresstrunks
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.carrierId 
     * @param {Number} opts.dynamicCount 
     * @param {Number} opts.ipCount 
     * @param {Boolean} opts.isActive 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.rateTableName 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourceTemplateId 
     * @param {Number} opts.staticCount 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {String} opts.updateBy 
     * @param {String} opts.minProfitValueGt 
     * @param {String} opts.minProfitValueLt 
     * @param {String} opts.resourceIdIn 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/CarrierApi~carrierClientIdEgressTrunkListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20025}
     */
    this.carrierClientIdEgressTrunkListGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdEgressTrunkListGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'carrier_id': opts['carrierId'],
        'dynamic_count': opts['dynamicCount'],
        'ip_count': opts['ipCount'],
        'is_active': opts['isActive'],
        'rate_table_id': opts['rateTableId'],
        'rate_table_name': opts['rateTableName'],
        'resource_id': opts['resourceId'],
        'resource_template_id': opts['resourceTemplateId'],
        'static_count': opts['staticCount'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName'],
        'update_by': opts['updateBy'],
        'min_profit_value_gt': opts['minProfitValueGt'],
        'min_profit_value_lt': opts['minProfitValueLt'],
        'resource_id_in': opts['resourceIdIn'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/carrier/{client_id}/egress_trunk/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdEgressTrunkPost operation.
     * @callback module:api/CarrierApi~carrierClientIdEgressTrunkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new egresstrunk
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressTrunk} opts.body EgressTrunk to create
     * @param {module:api/CarrierApi~carrierClientIdEgressTrunkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdEgressTrunkPost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdEgressTrunkPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/egress_trunk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdGet operation.
     * @callback module:api/CarrierApi~carrierClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.carrierClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/carrier/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdIngressTrunkListGet operation.
     * @callback module:api/CarrierApi~carrierClientIdIngressTrunkListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingresstrunks
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.callLimit 
     * @param {Number} opts.carrierId 
     * @param {Number} opts.cpsLimit 
     * @param {Number} opts.dynamicCount 
     * @param {Number} opts.ipCount 
     * @param {Boolean} opts.isActive 
     * @param {String} opts.name 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.rateTableName 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourceTemplateId 
     * @param {Number} opts.staticCount 
     * @param {Number} opts.trunkId 
     * @param {String} opts.trunkName 
     * @param {String} opts.updateBy 
     * @param {String} opts.minProfitValueGt 
     * @param {String} opts.minProfitValueLt 
     * @param {String} opts.resourceIdIn 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/CarrierApi~carrierClientIdIngressTrunkListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20032}
     */
    this.carrierClientIdIngressTrunkListGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdIngressTrunkListGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'call_limit': opts['callLimit'],
        'carrier_id': opts['carrierId'],
        'cps_limit': opts['cpsLimit'],
        'dynamic_count': opts['dynamicCount'],
        'ip_count': opts['ipCount'],
        'is_active': opts['isActive'],
        'name': opts['name'],
        'rate_table_id': opts['rateTableId'],
        'rate_table_name': opts['rateTableName'],
        'resource_id': opts['resourceId'],
        'resource_template_id': opts['resourceTemplateId'],
        'static_count': opts['staticCount'],
        'trunk_id': opts['trunkId'],
        'trunk_name': opts['trunkName'],
        'update_by': opts['updateBy'],
        'min_profit_value_gt': opts['minProfitValueGt'],
        'min_profit_value_lt': opts['minProfitValueLt'],
        'resource_id_in': opts['resourceIdIn'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/carrier/{client_id}/ingress_trunk/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdIngressTrunkPost operation.
     * @callback module:api/CarrierApi~carrierClientIdIngressTrunkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ingresstrunk
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/IngressTrunk} opts.body IngressTrunk to create
     * @param {module:api/CarrierApi~carrierClientIdIngressTrunkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdIngressTrunkPost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdIngressTrunkPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/ingress_trunk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdInvoicesGet operation.
     * @callback module:api/CarrierApi~carrierClientIdInvoicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdInvoicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    this.carrierClientIdInvoicesGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdInvoicesGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/carrier/{client_id}/invoices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdInvoicesPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdInvoicesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierInvoiceSetting} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdInvoicesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    this.carrierClientIdInvoicesPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdInvoicesPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/carrier/{client_id}/invoices', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdLowBalanceConfigGet operation.
     * @callback module:api/CarrierApi~carrierClientIdLowBalanceConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrierlowbalanceconfig
     * @param {Number} clientId CarrierLowBalanceConfig id to get info about
     * @param {module:api/CarrierApi~carrierClientIdLowBalanceConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    this.carrierClientIdLowBalanceConfigGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdLowBalanceConfigGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/carrier/{client_id}/low_balance_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdLowBalanceConfigPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdLowBalanceConfigPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrierlowbalanceconfig
     * @param {Number} clientId CarrierLowBalanceConfig id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierLowBalanceConfig} opts.body CarrierLowBalanceConfig to modify
     * @param {module:api/CarrierApi~carrierClientIdLowBalanceConfigPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    this.carrierClientIdLowBalanceConfigPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdLowBalanceConfigPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/carrier/{client_id}/low_balance_config', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPasswordPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdPasswordPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierPassword} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdPasswordPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20035}
     */
    this.carrierClientIdPasswordPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPasswordPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/carrier/{client_id}/password', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierModify} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20015}
     */
    this.carrierClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/carrier/{client_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPortalGet operation.
     * @callback module:api/CarrierApi~carrierClientIdPortalGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdPortalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.carrierClientIdPortalGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPortalGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/carrier/{client_id}/portal', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPortalPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdPortalPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierPortal} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdPortalPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20021}
     */
    this.carrierClientIdPortalPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPortalPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/carrier/{client_id}/portal', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdSaveAsTemplatePost operation.
     * @callback module:api/CarrierApi~carrierClientIdSaveAsTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carriertemplate
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierTemplateFromClient} opts.body CarrierTemplate to create
     * @param {module:api/CarrierApi~carrierClientIdSaveAsTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdSaveAsTemplatePost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdSaveAsTemplatePost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/save_as_template', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdSccGet operation.
     * @callback module:api/CarrierApi~carrierClientIdSccGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierClientIdSccGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.carrierClientIdSccGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdSccGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/carrier/{client_id}/scc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdSccPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdSccPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierScc} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierClientIdSccPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    this.carrierClientIdSccPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdSccPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/carrier/{client_id}/scc', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdSendLowBalanceAlertPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdSendLowBalanceAlertPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} clientId Carrier to proceed
     * @param {module:api/CarrierApi~carrierClientIdSendLowBalanceAlertPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.carrierClientIdSendLowBalanceAlertPatch = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdSendLowBalanceAlertPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/carrier/{client_id}/send_low_balance_alert', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdSendWelcomPatch operation.
     * @callback module:api/CarrierApi~carrierClientIdSendWelcomPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} clientId Carrier to proceed
     * @param {module:api/CarrierApi~carrierClientIdSendWelcomPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.carrierClientIdSendWelcomPatch = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdSendWelcomPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/carrier/{client_id}/send_welcom', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierCreateFromTemplateIdPost operation.
     * @callback module:api/CarrierApi~carrierCreateFromTemplateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carrier
     * @param {Number} id Carrier template for creation
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierFromTemplate} opts.body Carrier to create
     * @param {module:api/CarrierApi~carrierCreateFromTemplateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierCreateFromTemplateIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling carrierCreateFromTemplateIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/create_from_template/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierFullClientIdGet operation.
     * @callback module:api/CarrierApi~carrierFullClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/CarrierApi~carrierFullClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.carrierFullClientIdGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierFullClientIdGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/carrier/full/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierFullClientIdPatch operation.
     * @callback module:api/CarrierApi~carrierFullClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierLongModify} opts.body Carrier to modify
     * @param {module:api/CarrierApi~carrierFullClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    this.carrierFullClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierFullClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/carrier/full/{client_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierFullCreatePost operation.
     * @callback module:api/CarrierApi~carrierFullCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierLong} opts.body Carrier to create
     * @param {module:api/CarrierApi~carrierFullCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierFullCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/full/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupAllDelete operation.
     * @callback module:api/CarrierApi~carrierGroupAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found carriergroup
     * @param {Object} opts Optional parameters
     * @param {Number} opts.groupId 
     * @param {String} opts.groupName 
     * @param {module:api/CarrierApi~carrierGroupAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.carrierGroupAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group_id': opts['groupId'],
        'group_name': opts['groupName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/carrier/group/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupCreatePost operation.
     * @callback module:api/CarrierApi~carrierGroupCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carriergroup
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierGroup} opts.body CarrierGroup to create
     * @param {module:api/CarrierApi~carrierGroupCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierGroupCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/group/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupGroupIdDelete operation.
     * @callback module:api/CarrierApi~carrierGroupGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes carriergroup
     * @param {Number} groupId CarrierGroup id to get info about
     * @param {module:api/CarrierApi~carrierGroupGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.carrierGroupGroupIdDelete = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling carrierGroupGroupIdDelete");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/carrier/group/{group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupGroupIdGet operation.
     * @callback module:api/CarrierApi~carrierGroupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carriergroup
     * @param {Number} groupId CarrierGroup id to get info about
     * @param {module:api/CarrierApi~carrierGroupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.carrierGroupGroupIdGet = function(groupId, callback) {
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling carrierGroupGroupIdGet");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/carrier/group/{group_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupGroupIdPatch operation.
     * @callback module:api/CarrierApi~carrierGroupGroupIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carriergroup
     * @param {Number} groupId CarrierGroup id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierGroup} opts.body CarrierGroup to modify
     * @param {module:api/CarrierApi~carrierGroupGroupIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.carrierGroupGroupIdPatch = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling carrierGroupGroupIdPatch");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/carrier/group/{group_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierGroupListGet operation.
     * @callback module:api/CarrierApi~carrierGroupListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carriergroups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.groupId 
     * @param {String} opts.groupName 
     * @param {module:api/CarrierApi~carrierGroupListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    this.carrierGroupListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'group_id': opts['groupId'],
        'group_name': opts['groupName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/carrier/group/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierListGet operation.
     * @callback module:api/CarrierApi~carrierListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carriers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.callLimit 
     * @param {Number} opts.carrierTemplateId 
     * @param {String} opts.company 
     * @param {Number} opts.egressCount 
     * @param {Number} opts.groupId 
     * @param {Number} opts.ingressCount 
     * @param {Boolean} opts.isActive 
     * @param {Boolean} opts.isPrepay 
     * @param {String} opts.login 
     * @param {module:model/String} opts.mode 
     * @param {String} opts.name 
     * @param {Number} opts.paymentTermId 
     * @param {Boolean} opts.unlimitedCredit 
     * @param {String} opts.updateBy 
     * @param {Number} opts.callLimitGt 
     * @param {Number} opts.callLimitLt 
     * @param {Number} opts.cpsLimitGt 
     * @param {Number} opts.cpsLimitLt 
     * @param {Number} opts.creditLimitGt 
     * @param {Number} opts.creditLimitLt 
     * @param {Number} opts.profitMarginGt 
     * @param {Number} opts.profitMarginLt 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/CarrierApi~carrierListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    this.carrierListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'call_limit': opts['callLimit'],
        'carrier_template_id': opts['carrierTemplateId'],
        'company': opts['company'],
        'egress_count': opts['egressCount'],
        'group_id': opts['groupId'],
        'ingress_count': opts['ingressCount'],
        'is_active': opts['isActive'],
        'is_prepay': opts['isPrepay'],
        'login': opts['login'],
        'mode': opts['mode'],
        'name': opts['name'],
        'payment_term_id': opts['paymentTermId'],
        'unlimited_credit': opts['unlimitedCredit'],
        'update_by': opts['updateBy'],
        'call_limit_gt': opts['callLimitGt'],
        'call_limit_lt': opts['callLimitLt'],
        'cps_limit_gt': opts['cpsLimitGt'],
        'cps_limit_lt': opts['cpsLimitLt'],
        'credit_limit_gt': opts['creditLimitGt'],
        'credit_limit_lt': opts['creditLimitLt'],
        'profit_margin_gt': opts['profitMarginGt'],
        'profit_margin_lt': opts['profitMarginLt'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/carrier/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierSimpleListGet operation.
     * @callback module:api/CarrierApi~carrierSimpleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets simple client list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {module:model/String} opts.clientType 
     * @param {String} opts.email 
     * @param {Number} opts.groupId 
     * @param {Number} opts.mode 
     * @param {String} opts.name 
     * @param {Boolean} opts.status 
     * @param {Number} opts.egressCountGt 
     * @param {Number} opts.ingressCountGt 
     * @param {module:api/CarrierApi~carrierSimpleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    this.carrierSimpleListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'client_type': opts['clientType'],
        'email': opts['email'],
        'group_id': opts['groupId'],
        'mode': opts['mode'],
        'name': opts['name'],
        'status': opts['status'],
        'egress_count_gt': opts['egressCountGt'],
        'ingress_count_gt': opts['ingressCountGt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/carrier/simple/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreditClientIdPatch operation.
     * @callback module:api/CarrierApi~clientCreditClientIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies clientcredit
     * @param {Number} clientId ClientCredit id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientCredit} opts.body ClientCredit to modify
     * @param {module:api/CarrierApi~clientCreditClientIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20033}
     */
    this.clientCreditClientIdPatch = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling clientCreditClientIdPatch");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/client/credit/{client_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreditListGet operation.
     * @callback module:api/CarrierApi~clientCreditListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientcredits
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {module:api/CarrierApi~clientCreditListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20034}
     */
    this.clientCreditListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/client/credit/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPastDueListGet operation.
     * @callback module:api/CarrierApi~clientPastDueListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets past due report
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.name 
     * @param {Number} opts.overDueGt 
     * @param {Boolean} opts.overDueIsnull 
     * @param {module:api/CarrierApi~clientPastDueListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20036}
     */
    this.clientPastDueListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'name': opts['name'],
        'over_due_gt': opts['overDueGt'],
        'over_due_isnull': opts['overDueIsnull'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/client/past_due/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressCapacityEgressIdIngressIdDelete operation.
     * @callback module:api/CarrierApi~egressCapacityEgressIdIngressIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourcecapacity
     * @param {Number} ingressId ResourceCapacity ingress_id to get info about
     * @param {Number} egressId ResourceCapacity egress_id to get info about
     * @param {module:api/CarrierApi~egressCapacityEgressIdIngressIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.egressCapacityEgressIdIngressIdDelete = function(ingressId, egressId, callback) {
      var postBody = null;

      // verify the required parameter 'ingressId' is set
      if (ingressId === undefined || ingressId === null) {
        throw new Error("Missing the required parameter 'ingressId' when calling egressCapacityEgressIdIngressIdDelete");
      }

      // verify the required parameter 'egressId' is set
      if (egressId === undefined || egressId === null) {
        throw new Error("Missing the required parameter 'egressId' when calling egressCapacityEgressIdIngressIdDelete");
      }


      var pathParams = {
        'ingress_id': ingressId,
        'egress_id': egressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/egress_capacity/{egress_id}/{ingress_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressCapacityEgressIdIngressIdGet operation.
     * @callback module:api/CarrierApi~egressCapacityEgressIdIngressIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcecapacity
     * @param {Number} ingressId ResourceCapacity ingress_id to get info about
     * @param {Number} egressId ResourceCapacity egress_id to get info about
     * @param {module:api/CarrierApi~egressCapacityEgressIdIngressIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    this.egressCapacityEgressIdIngressIdGet = function(ingressId, egressId, callback) {
      var postBody = null;

      // verify the required parameter 'ingressId' is set
      if (ingressId === undefined || ingressId === null) {
        throw new Error("Missing the required parameter 'ingressId' when calling egressCapacityEgressIdIngressIdGet");
      }

      // verify the required parameter 'egressId' is set
      if (egressId === undefined || egressId === null) {
        throw new Error("Missing the required parameter 'egressId' when calling egressCapacityEgressIdIngressIdGet");
      }


      var pathParams = {
        'ingress_id': ingressId,
        'egress_id': egressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/egress_capacity/{egress_id}/{ingress_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressCapacityEgressIdIngressIdPatch operation.
     * @callback module:api/CarrierApi~egressCapacityEgressIdIngressIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourcecapacity
     * @param {Number} ingressId ResourceCapacity ingress_id to get info about
     * @param {Number} egressId ResourceCapacity egress_id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceCapacity} opts.body ResourceCapacity to modify
     * @param {module:api/CarrierApi~egressCapacityEgressIdIngressIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    this.egressCapacityEgressIdIngressIdPatch = function(ingressId, egressId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'ingressId' is set
      if (ingressId === undefined || ingressId === null) {
        throw new Error("Missing the required parameter 'ingressId' when calling egressCapacityEgressIdIngressIdPatch");
      }

      // verify the required parameter 'egressId' is set
      if (egressId === undefined || egressId === null) {
        throw new Error("Missing the required parameter 'egressId' when calling egressCapacityEgressIdIngressIdPatch");
      }


      var pathParams = {
        'ingress_id': ingressId,
        'egress_id': egressId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/egress_capacity/{egress_id}/{ingress_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressProfileIdDelete operation.
     * @callback module:api/CarrierApi~egressProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes egressprofile
     * @param {Number} id EgressProfile id to get info about
     * @param {module:api/CarrierApi~egressProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.egressProfileIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling egressProfileIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/egress_profile/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressProfileIdGet operation.
     * @callback module:api/CarrierApi~egressProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egressprofile
     * @param {Number} id EgressProfile id to get info about
     * @param {module:api/CarrierApi~egressProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    this.egressProfileIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling egressProfileIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/egress_profile/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressProfileIdPatch operation.
     * @callback module:api/CarrierApi~egressProfileIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies egressprofile
     * @param {Number} id EgressProfile id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressProfile} opts.body EgressProfile to modify
     * @param {module:api/CarrierApi~egressProfileIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    this.egressProfileIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling egressProfileIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/egress_profile/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdCapacityListGet operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdCapacityListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcecapacity items
     * @param {Number} resourceId Parent egress trunk
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.egressId 
     * @param {Number} opts.ingressId 
     * @param {module:api/CarrierApi~egressTrunkResourceIdCapacityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20030}
     */
    this.egressTrunkResourceIdCapacityListGet = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdCapacityListGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'egress_id': opts['egressId'],
        'ingress_id': opts['ingressId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/capacity/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdCapacityPost operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdCapacityPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourcecapacity
     * @param {Number} resourceId Parent egress trunk
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceCapacity} opts.body ResourceCapacity to create
     * @param {module:api/CarrierApi~egressTrunkResourceIdCapacityPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.egressTrunkResourceIdCapacityPost = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdCapacityPost");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/capacity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdDelete operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes egresstrunk
     * @param {Number} resourceId EgressTrunk id to get info about
     * @param {module:api/CarrierApi~egressTrunkResourceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.egressTrunkResourceIdDelete = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdDelete");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdGet operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egresstrunk
     * @param {Number} resourceId EgressTrunk id to get info about
     * @param {module:api/CarrierApi~egressTrunkResourceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    this.egressTrunkResourceIdGet = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdPassGet operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdPassGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egresstrunk pass
     * @param {Number} resourceId EgressTrunk Pass id to get info about
     * @param {module:api/CarrierApi~egressTrunkResourceIdPassGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    this.egressTrunkResourceIdPassGet = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdPassGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/pass', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdPassPatch operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdPassPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies egresstrunk pass
     * @param {Number} resourceId EgressTrunk Pass id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressTrunkPass} opts.body EgressTrunk Pass to modify
     * @param {module:api/CarrierApi~egressTrunkResourceIdPassPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    this.egressTrunkResourceIdPassPatch = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdPassPatch");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/pass', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdPatch operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies egresstrunk
     * @param {Number} resourceId EgressTrunk id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressTrunk} opts.body EgressTrunk to modify
     * @param {module:api/CarrierApi~egressTrunkResourceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    this.egressTrunkResourceIdPatch = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdPatch");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdProfileListGet operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdProfileListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egressprofiles
     * @param {Number} resourceId Parent egress trunk
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.egressId 
     * @param {Number} opts.id 
     * @param {Number} opts.ingressId 
     * @param {Number} opts.profileId 
     * @param {String} opts.serverName 
     * @param {module:api/CarrierApi~egressTrunkResourceIdProfileListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20028}
     */
    this.egressTrunkResourceIdProfileListGet = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdProfileListGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'egress_id': opts['egressId'],
        'id': opts['id'],
        'ingress_id': opts['ingressId'],
        'profile_id': opts['profileId'],
        'server_name': opts['serverName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/profile/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the egressTrunkResourceIdProfilePost operation.
     * @callback module:api/CarrierApi~egressTrunkResourceIdProfilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new egressprofile
     * @param {Number} resourceId Parent egress trunk
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressProfile} opts.body EgressProfile to create
     * @param {module:api/CarrierApi~egressTrunkResourceIdProfilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.egressTrunkResourceIdProfilePost = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling egressTrunkResourceIdProfilePost");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/egress_trunk/{resource_id}/profile', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ingressTrunkResourceIdCapacityListGet operation.
     * @callback module:api/CarrierApi~ingressTrunkResourceIdCapacityListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourcecapacity items
     * @param {Number} resourceId Parent ingress trunk
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.egressId 
     * @param {Number} opts.ingressId 
     * @param {module:api/CarrierApi~ingressTrunkResourceIdCapacityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20030}
     */
    this.ingressTrunkResourceIdCapacityListGet = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling ingressTrunkResourceIdCapacityListGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'egress_id': opts['egressId'],
        'ingress_id': opts['ingressId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/ingress_trunk/{resource_id}/capacity/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ingressTrunkResourceIdDelete operation.
     * @callback module:api/CarrierApi~ingressTrunkResourceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes ingresstrunk
     * @param {Number} resourceId IngressTrunk id to get info about
     * @param {module:api/CarrierApi~ingressTrunkResourceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.ingressTrunkResourceIdDelete = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling ingressTrunkResourceIdDelete");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/ingress_trunk/{resource_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ingressTrunkResourceIdGet operation.
     * @callback module:api/CarrierApi~ingressTrunkResourceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingresstrunk
     * @param {Number} resourceId IngressTrunk id to get info about
     * @param {module:api/CarrierApi~ingressTrunkResourceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20031}
     */
    this.ingressTrunkResourceIdGet = function(resourceId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling ingressTrunkResourceIdGet");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/ingress_trunk/{resource_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ingressTrunkResourceIdPatch operation.
     * @callback module:api/CarrierApi~ingressTrunkResourceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies ingresstrunk
     * @param {Number} resourceId IngressTrunk id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/IngressTrunkModify} opts.body IngressTrunk to modify
     * @param {module:api/CarrierApi~ingressTrunkResourceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20031}
     */
    this.ingressTrunkResourceIdPatch = function(resourceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling ingressTrunkResourceIdPatch");
      }


      var pathParams = {
        'resource_id': resourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/ingress_trunk/{resource_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
