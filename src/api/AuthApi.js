/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/AuthAsAgent', 'model/AuthAsClient', 'model/AuthToken', 'model/Credentials', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/PasswordCheck', 'model/Signup', 'model/SignupApprove', 'model/SignupModify', 'model/Success', 'model/UnauthenticatedError', 'model/User', 'model/UserActivate', 'model/UserResetPasswordLetter', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/AuthAsAgent'), require('../model/AuthAsClient'), require('../model/AuthToken'), require('../model/Credentials'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/PasswordCheck'), require('../model/Signup'), require('../model/SignupApprove'), require('../model/SignupModify'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/User'), require('../model/UserActivate'), require('../model/UserResetPasswordLetter'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.AuthApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.AuthAsAgent, root.DnlApi.AuthAsClient, root.DnlApi.AuthToken, root.DnlApi.Credentials, root.DnlApi.InlineResponse200, root.DnlApi.InlineResponse2001, root.DnlApi.InlineResponse2002, root.DnlApi.InlineResponse2003, root.DnlApi.InlineResponse2004, root.DnlApi.InlineResponse2005, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.PasswordCheck, root.DnlApi.Signup, root.DnlApi.SignupApprove, root.DnlApi.SignupModify, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.User, root.DnlApi.UserActivate, root.DnlApi.UserResetPasswordLetter, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, AuthAsAgent, AuthAsClient, AuthToken, Credentials, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, ObjectCreated, ObjectNotFoundError, OperationError, PasswordCheck, Signup, SignupApprove, SignupModify, Success, UnauthenticatedError, User, UserActivate, UserResetPasswordLetter, ValidationError) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 1.2.62
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authAsAgentPost operation.
     * @callback module:api/AuthApi~authAsAgentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate as agent
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthAsAgent} opts.body Agent reference id
     * @param {module:api/AuthApi~authAsAgentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthToken}
     */
    this.authAsAgentPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthToken;

      return this.apiClient.callApi(
        '/auth/as_agent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authAsClientPost operation.
     * @callback module:api/AuthApi~authAsClientPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate as client
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthAsClient} opts.body Client reference id
     * @param {module:api/AuthApi~authAsClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthToken}
     */
    this.authAsClientPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthToken;

      return this.apiClient.callApi(
        '/auth/as_client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authCheckPasswordPost operation.
     * @callback module:api/AuthApi~authCheckPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks current user password
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordCheck} opts.body User password
     * @param {module:api/AuthApi~authCheckPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.authCheckPasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/auth/check-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authCheckTokenPost operation.
     * @callback module:api/AuthApi~authCheckTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks and refreshes token
     * @param {module:api/AuthApi~authCheckTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthToken}
     */
    this.authCheckTokenPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthToken;

      return this.apiClient.callApi(
        '/auth/check-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authPost operation.
     * @callback module:api/AuthApi~authPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticates user
     * @param {Object} opts Optional parameters
     * @param {module:model/Credentials} opts.body User credentials
     * @param {module:api/AuthApi~authPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthToken}
     */
    this.authPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AuthToken;

      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authResetEmailPost operation.
     * @callback module:api/AuthApi~authResetEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserResetPasswordLetter} opts.body Email to check
     * @param {module:api/AuthApi~authResetEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.authResetEmailPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/auth/reset_email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authResetTokenGet operation.
     * @callback module:api/AuthApi~authResetTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} token Token from email
     * @param {module:api/AuthApi~authResetTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.authResetTokenGet = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling authResetTokenGet");
      }


      var pathParams = {
        'token': token
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/auth/reset/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationAllDelete operation.
     * @callback module:api/AuthApi~registrationAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found signup
     * @param {Object} opts Optional parameters
     * @param {String} opts.city 
     * @param {String} opts.clientName 
     * @param {String} opts.company 
     * @param {String} opts.idIn 
     * @param {String} opts.mainEmail 
     * @param {String} opts.modifiedOnGt 
     * @param {String} opts.modifiedOnLt 
     * @param {String} opts.phone 
     * @param {String} opts.referral 
     * @param {String} opts.signedUpOnGt 
     * @param {String} opts.signedUpOnLt 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {module:api/AuthApi~registrationAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.registrationAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'city': opts['city'],
        'client_name': opts['clientName'],
        'company': opts['company'],
        'id_in': opts['idIn'],
        'main_email': opts['mainEmail'],
        'modified_on_gt': opts['modifiedOnGt'],
        'modified_on_lt': opts['modifiedOnLt'],
        'phone': opts['phone'],
        'referral': opts['referral'],
        'signed_up_on_gt': opts['signedUpOnGt'],
        'signed_up_on_lt': opts['signedUpOnLt'],
        'status': opts['status'],
        'username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/registration/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationCreatePost operation.
     * @callback module:api/AuthApi~registrationCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new signup
     * @param {Object} opts Optional parameters
     * @param {module:model/Signup} opts.body Signup to create
     * @param {module:api/AuthApi~registrationCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.registrationCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/registration/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationIdApprovePatch operation.
     * @callback module:api/AuthApi~registrationIdApprovePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies signup approval
     * @param {Number} id Signup approval id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SignupApprove} opts.body Signup approval to modify
     * @param {module:api/AuthApi~registrationIdApprovePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.registrationIdApprovePatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registrationIdApprovePatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/registration/{id}/approve', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationIdDelete operation.
     * @callback module:api/AuthApi~registrationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes signup
     * @param {Number} id Signup id to get info about
     * @param {module:api/AuthApi~registrationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.registrationIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registrationIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/registration/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationIdGet operation.
     * @callback module:api/AuthApi~registrationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets signup
     * @param {Number} id Signup id to get info about
     * @param {module:api/AuthApi~registrationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.registrationIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registrationIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/registration/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationIdPatch operation.
     * @callback module:api/AuthApi~registrationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies signup
     * @param {Number} id Signup id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SignupModify} opts.body Signup to modify
     * @param {module:api/AuthApi~registrationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.registrationIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registrationIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/registration/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registrationListGet operation.
     * @callback module:api/AuthApi~registrationListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets signups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.city 
     * @param {String} opts.clientName 
     * @param {String} opts.company 
     * @param {String} opts.mainEmail 
     * @param {String} opts.phone 
     * @param {String} opts.referral 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {String} opts.idIn 
     * @param {String} opts.modifiedOnGt 
     * @param {String} opts.modifiedOnLt 
     * @param {String} opts.signedUpOnGt 
     * @param {String} opts.signedUpOnLt 
     * @param {module:api/AuthApi~registrationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.registrationListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'city': opts['city'],
        'client_name': opts['clientName'],
        'company': opts['company'],
        'main_email': opts['mainEmail'],
        'phone': opts['phone'],
        'referral': opts['referral'],
        'status': opts['status'],
        'username': opts['username'],
        'id_in': opts['idIn'],
        'modified_on_gt': opts['modifiedOnGt'],
        'modified_on_lt': opts['modifiedOnLt'],
        'signed_up_on_gt': opts['signedUpOnGt'],
        'signed_up_on_lt': opts['signedUpOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/registration/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userAllDelete operation.
     * @callback module:api/AuthApi~userAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active 
     * @param {String} opts.createTimeGt 
     * @param {String} opts.createTimeLt 
     * @param {String} opts.email 
     * @param {Number} opts.isOnline 
     * @param {String} opts.lastLoginTimeGt 
     * @param {String} opts.lastLoginTimeLt 
     * @param {String} opts.loginIp 
     * @param {String} opts.name 
     * @param {Number} opts.roleId 
     * @param {Number} opts.userId 
     * @param {String} opts.userIdIn 
     * @param {module:model/String} opts.userType 
     * @param {module:api/AuthApi~userAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.userAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'create_time_gt': opts['createTimeGt'],
        'create_time_lt': opts['createTimeLt'],
        'email': opts['email'],
        'is_online': opts['isOnline'],
        'last_login_time_gt': opts['lastLoginTimeGt'],
        'last_login_time_lt': opts['lastLoginTimeLt'],
        'login_ip': opts['loginIp'],
        'name': opts['name'],
        'role_id': opts['roleId'],
        'user_id': opts['userId'],
        'user_id_in': opts['userIdIn'],
        'user_type': opts['userType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/user/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userAllPatch operation.
     * @callback module:api/AuthApi~userAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserActivate} opts.body User to modify
     * @param {Boolean} opts.active 
     * @param {String} opts.createTimeGt 
     * @param {String} opts.createTimeLt 
     * @param {String} opts.email 
     * @param {Number} opts.isOnline 
     * @param {String} opts.lastLoginTimeGt 
     * @param {String} opts.lastLoginTimeLt 
     * @param {String} opts.loginIp 
     * @param {String} opts.name 
     * @param {Number} opts.roleId 
     * @param {Number} opts.userId 
     * @param {String} opts.userIdIn 
     * @param {module:model/String} opts.userType 
     * @param {module:api/AuthApi~userAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.userAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'create_time_gt': opts['createTimeGt'],
        'create_time_lt': opts['createTimeLt'],
        'email': opts['email'],
        'is_online': opts['isOnline'],
        'last_login_time_gt': opts['lastLoginTimeGt'],
        'last_login_time_lt': opts['lastLoginTimeLt'],
        'login_ip': opts['loginIp'],
        'name': opts['name'],
        'role_id': opts['roleId'],
        'user_id': opts['userId'],
        'user_id_in': opts['userIdIn'],
        'user_type': opts['userType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/user/all', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreatePost operation.
     * @callback module:api/AuthApi~userCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new user
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.body User to create
     * @param {module:api/AuthApi~userCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.userCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/user/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/AuthApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets userinfo
     * @param {module:api/AuthApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.userGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userListGet operation.
     * @callback module:api/AuthApi~userListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {Number} opts.isOnline 
     * @param {String} opts.name 
     * @param {Number} opts.roleId 
     * @param {module:model/String} opts.userType 
     * @param {String} opts.createTimeGt 
     * @param {String} opts.createTimeLt 
     * @param {String} opts.lastLoginTimeGt 
     * @param {Boolean} opts.lastLoginTimeIsnull 
     * @param {String} opts.lastLoginTimeLt 
     * @param {String} opts.userIdIn 
     * @param {module:api/AuthApi~userListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.userListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'is_online': opts['isOnline'],
        'name': opts['name'],
        'role_id': opts['roleId'],
        'user_type': opts['userType'],
        'create_time_gt': opts['createTimeGt'],
        'create_time_lt': opts['createTimeLt'],
        'last_login_time_gt': opts['lastLoginTimeGt'],
        'last_login_time_isnull': opts['lastLoginTimeIsnull'],
        'last_login_time_lt': opts['lastLoginTimeLt'],
        'user_id_in': opts['userIdIn']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/user/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdDelete operation.
     * @callback module:api/AuthApi~userUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes user
     * @param {Number} userId User id to get info about
     * @param {module:api/AuthApi~userUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.userUserIdDelete = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdDelete");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/user/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdGet operation.
     * @callback module:api/AuthApi~userUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets user
     * @param {Number} userId User id to get info about
     * @param {module:api/AuthApi~userUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.userUserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/user/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdPatch operation.
     * @callback module:api/AuthApi~userUserIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies user
     * @param {Number} userId User id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/User} opts.body User to modify
     * @param {module:api/AuthApi~userUserIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.userUserIdPatch = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdPatch");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/user/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
