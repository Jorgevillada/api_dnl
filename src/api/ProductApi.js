/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/InlineResponse200150', 'model/InlineResponse200151', 'model/InlineResponse200152', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/ProductRoutRateTable', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/InlineResponse200150'), require('../model/InlineResponse200151'), require('../model/InlineResponse200152'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/ProductRoutRateTable'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.ProductApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.InlineResponse200150, root.DnlApi.InlineResponse200151, root.DnlApi.InlineResponse200152, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.ProductRoutRateTable, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, InlineResponse200150, InlineResponse200151, InlineResponse200152, ObjectCreated, ObjectNotFoundError, OperationError, ProductRoutRateTable, Success, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Product service.
   * @module api/ProductApi
   * @version 1.2.62
   */

  /**
   * Constructs a new ProductApi. 
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the productCreatePost operation.
     * @callback module:api/ProductApi~productCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new product
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductRoutRateTable} opts.body Product to create
     * @param {module:api/ProductApi~productCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.productCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/product/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productIdDelete operation.
     * @callback module:api/ProductApi~productIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes product
     * @param {Number} id Product id to get info about
     * @param {module:api/ProductApi~productIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.productIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/product/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productIdGet operation.
     * @callback module:api/ProductApi~productIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets product
     * @param {Number} id Product id to get info about
     * @param {module:api/ProductApi~productIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200150}
     */
    this.productIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200150;

      return this.apiClient.callApi(
        '/product/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productIdPatch operation.
     * @callback module:api/ProductApi~productIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies product
     * @param {Number} id Product id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductRoutRateTable} opts.body Product to modify
     * @param {module:api/ProductApi~productIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200150}
     */
    this.productIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200150;

      return this.apiClient.callApi(
        '/product/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productIdSendPatch operation.
     * @callback module:api/ProductApi~productIdSendPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id Product to proceed
     * @param {module:api/ProductApi~productIdSendPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.productIdSendPatch = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productIdSendPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/product/{id}/send', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productListGet operation.
     * @callback module:api/ProductApi~productListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets products
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.agentId 
     * @param {String} opts.name 
     * @param {Number} opts.rateTableId 
     * @param {Number} opts.routePlanId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.updateBy 
     * @param {String} opts.idIn 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/ProductApi~productListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200151}
     */
    this.productListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'agent_id': opts['agentId'],
        'name': opts['name'],
        'rate_table_id': opts['rateTableId'],
        'route_plan_id': opts['routePlanId'],
        'type': opts['type'],
        'update_by': opts['updateBy'],
        'id_in': opts['idIn'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/product/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productPublicGet operation.
     * @callback module:api/ProductApi~productPublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets publicproducts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.name 
     * @param {Number} opts.reference 
     * @param {Number} opts.techPrefix 
     * @param {module:api/ProductApi~productPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200152}
     */
    this.productPublicGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'name': opts['name'],
        'reference': opts['reference'],
        'tech_prefix': opts['techPrefix']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/product/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
