/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/DigitTranslation', 'model/DynamicRoute', 'model/DynamicRouteItem', 'model/DynamicRouteItemMultiple', 'model/DynamicRouteOver', 'model/DynamicRoutePri', 'model/DynamicRouteQos', 'model/InlineResponse200136', 'model/InlineResponse200137', 'model/InlineResponse200138', 'model/InlineResponse200139', 'model/InlineResponse200140', 'model/InlineResponse200141', 'model/InlineResponse200142', 'model/InlineResponse200143', 'model/InlineResponse200144', 'model/InlineResponse200145', 'model/InlineResponse200146', 'model/InlineResponse200147', 'model/InlineResponse200148', 'model/InlineResponse200149', 'model/InlineResponse200150', 'model/InlineResponse200151', 'model/InlineResponse200152', 'model/InlineResponse200153', 'model/InlineResponse200154', 'model/InlineResponse200155', 'model/InlineResponse200156', 'model/InlineResponse200157', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/Product', 'model/ProductItems', 'model/ProductItemsModify', 'model/ResourceBlock', 'model/Route', 'model/RouteStrategy', 'model/Success', 'model/TranslationItem', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/DigitTranslation'), require('../model/DynamicRoute'), require('../model/DynamicRouteItem'), require('../model/DynamicRouteItemMultiple'), require('../model/DynamicRouteOver'), require('../model/DynamicRoutePri'), require('../model/DynamicRouteQos'), require('../model/InlineResponse200136'), require('../model/InlineResponse200137'), require('../model/InlineResponse200138'), require('../model/InlineResponse200139'), require('../model/InlineResponse200140'), require('../model/InlineResponse200141'), require('../model/InlineResponse200142'), require('../model/InlineResponse200143'), require('../model/InlineResponse200144'), require('../model/InlineResponse200145'), require('../model/InlineResponse200146'), require('../model/InlineResponse200147'), require('../model/InlineResponse200148'), require('../model/InlineResponse200149'), require('../model/InlineResponse200150'), require('../model/InlineResponse200151'), require('../model/InlineResponse200152'), require('../model/InlineResponse200153'), require('../model/InlineResponse200154'), require('../model/InlineResponse200155'), require('../model/InlineResponse200156'), require('../model/InlineResponse200157'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/Product'), require('../model/ProductItems'), require('../model/ProductItemsModify'), require('../model/ResourceBlock'), require('../model/Route'), require('../model/RouteStrategy'), require('../model/Success'), require('../model/TranslationItem'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.RouteApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.DigitTranslation, root.DnlApi.DynamicRoute, root.DnlApi.DynamicRouteItem, root.DnlApi.DynamicRouteItemMultiple, root.DnlApi.DynamicRouteOver, root.DnlApi.DynamicRoutePri, root.DnlApi.DynamicRouteQos, root.DnlApi.InlineResponse200136, root.DnlApi.InlineResponse200137, root.DnlApi.InlineResponse200138, root.DnlApi.InlineResponse200139, root.DnlApi.InlineResponse200140, root.DnlApi.InlineResponse200141, root.DnlApi.InlineResponse200142, root.DnlApi.InlineResponse200143, root.DnlApi.InlineResponse200144, root.DnlApi.InlineResponse200145, root.DnlApi.InlineResponse200146, root.DnlApi.InlineResponse200147, root.DnlApi.InlineResponse200148, root.DnlApi.InlineResponse200149, root.DnlApi.InlineResponse200150, root.DnlApi.InlineResponse200151, root.DnlApi.InlineResponse200152, root.DnlApi.InlineResponse200153, root.DnlApi.InlineResponse200154, root.DnlApi.InlineResponse200155, root.DnlApi.InlineResponse200156, root.DnlApi.InlineResponse200157, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.Product, root.DnlApi.ProductItems, root.DnlApi.ProductItemsModify, root.DnlApi.ResourceBlock, root.DnlApi.Route, root.DnlApi.RouteStrategy, root.DnlApi.Success, root.DnlApi.TranslationItem, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, DigitTranslation, DynamicRoute, DynamicRouteItem, DynamicRouteItemMultiple, DynamicRouteOver, DynamicRoutePri, DynamicRouteQos, InlineResponse200136, InlineResponse200137, InlineResponse200138, InlineResponse200139, InlineResponse200140, InlineResponse200141, InlineResponse200142, InlineResponse200143, InlineResponse200144, InlineResponse200145, InlineResponse200146, InlineResponse200147, InlineResponse200148, InlineResponse200149, InlineResponse200150, InlineResponse200151, InlineResponse200152, InlineResponse200153, InlineResponse200154, InlineResponse200155, InlineResponse200156, InlineResponse200157, ObjectCreated, ObjectNotFoundError, OperationError, Product, ProductItems, ProductItemsModify, ResourceBlock, Route, RouteStrategy, Success, TranslationItem, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Route service.
   * @module api/RouteApi
   * @version 1.2.10
   */

  /**
   * Constructs a new RouteApi. 
   * @alias module:api/RouteApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the routeBlockListGet operation.
     * @callback module:api/RouteApi~routeBlockListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200153} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceblocks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.aNIPrefix 
     * @param {String} opts.dNISPrefix 
     * @param {Number} opts.blockBy 
     * @param {Number} opts.egressClientId 
     * @param {Number} opts.egressGroupId 
     * @param {Number} opts.egressTrunkId 
     * @param {Number} opts.ingressClientId 
     * @param {Number} opts.ingressGroupId 
     * @param {Number} opts.ingressTrunkId 
     * @param {module:api/RouteApi~routeBlockListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200153}
     */
    this.routeBlockListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'ANI_prefix': opts['aNIPrefix'],
        'DNIS_prefix': opts['dNISPrefix'],
        'block_by': opts['blockBy'],
        'egress_client_id': opts['egressClientId'],
        'egress_group_id': opts['egressGroupId'],
        'egress_trunk_id': opts['egressTrunkId'],
        'ingress_client_id': opts['ingressClientId'],
        'ingress_group_id': opts['ingressGroupId'],
        'ingress_trunk_id': opts['ingressTrunkId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200153;

      return this.apiClient.callApi(
        '/route/block/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeBlockPost operation.
     * @callback module:api/RouteApi~routeBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new resourceblock
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceBlock} opts.body ResourceBlock to create
     * @param {module:api/RouteApi~routeBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeBlockPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeBlockResBlockIdDelete operation.
     * @callback module:api/RouteApi~routeBlockResBlockIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes resourceblock
     * @param {Number} resBlockId ResourceBlock id to get info about
     * @param {module:api/RouteApi~routeBlockResBlockIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeBlockResBlockIdDelete = function(resBlockId, callback) {
      var postBody = null;

      // verify the required parameter 'resBlockId' is set
      if (resBlockId === undefined || resBlockId === null) {
        throw new Error("Missing the required parameter 'resBlockId' when calling routeBlockResBlockIdDelete");
      }


      var pathParams = {
        'res_block_id': resBlockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/block/{res_block_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeBlockResBlockIdGet operation.
     * @callback module:api/RouteApi~routeBlockResBlockIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets resourceblock
     * @param {Number} resBlockId ResourceBlock id to get info about
     * @param {module:api/RouteApi~routeBlockResBlockIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200152}
     */
    this.routeBlockResBlockIdGet = function(resBlockId, callback) {
      var postBody = null;

      // verify the required parameter 'resBlockId' is set
      if (resBlockId === undefined || resBlockId === null) {
        throw new Error("Missing the required parameter 'resBlockId' when calling routeBlockResBlockIdGet");
      }


      var pathParams = {
        'res_block_id': resBlockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/route/block/{res_block_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeBlockResBlockIdPatch operation.
     * @callback module:api/RouteApi~routeBlockResBlockIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies resourceblock
     * @param {Number} resBlockId ResourceBlock id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceBlock} opts.body ResourceBlock to modify
     * @param {module:api/RouteApi~routeBlockResBlockIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200152}
     */
    this.routeBlockResBlockIdPatch = function(resBlockId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resBlockId' is set
      if (resBlockId === undefined || resBlockId === null) {
        throw new Error("Missing the required parameter 'resBlockId' when calling routeBlockResBlockIdPatch");
      }


      var pathParams = {
        'res_block_id': resBlockId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/route/block/{res_block_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapItemRefIdDelete operation.
     * @callback module:api/RouteApi~routeDigitMapItemRefIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes translationitem
     * @param {Number} refId TranslationItem id to get info about
     * @param {module:api/RouteApi~routeDigitMapItemRefIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDigitMapItemRefIdDelete = function(refId, callback) {
      var postBody = null;

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling routeDigitMapItemRefIdDelete");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/digit_map/item/{ref_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapItemRefIdGet operation.
     * @callback module:api/RouteApi~routeDigitMapItemRefIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200156} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets translationitem
     * @param {Number} refId TranslationItem id to get info about
     * @param {module:api/RouteApi~routeDigitMapItemRefIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200156}
     */
    this.routeDigitMapItemRefIdGet = function(refId, callback) {
      var postBody = null;

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling routeDigitMapItemRefIdGet");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200156;

      return this.apiClient.callApi(
        '/route/digit_map/item/{ref_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapItemRefIdPatch operation.
     * @callback module:api/RouteApi~routeDigitMapItemRefIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200156} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies translationitem
     * @param {Number} refId TranslationItem id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/TranslationItem} opts.body TranslationItem to modify
     * @param {module:api/RouteApi~routeDigitMapItemRefIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200156}
     */
    this.routeDigitMapItemRefIdPatch = function(refId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'refId' is set
      if (refId === undefined || refId === null) {
        throw new Error("Missing the required parameter 'refId' when calling routeDigitMapItemRefIdPatch");
      }


      var pathParams = {
        'ref_id': refId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200156;

      return this.apiClient.callApi(
        '/route/digit_map/item/{ref_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapListGet operation.
     * @callback module:api/RouteApi~routeDigitMapListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200155} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets digittranslations
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.digitMapCount 
     * @param {String} opts.digitMapName 
     * @param {Number} opts.translationId 
     * @param {String} opts.updateAtGte 
     * @param {String} opts.updateAtLt 
     * @param {module:api/RouteApi~routeDigitMapListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200155}
     */
    this.routeDigitMapListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'digit_map_count': opts['digitMapCount'],
        'digit_map_name': opts['digitMapName'],
        'translation_id': opts['translationId'],
        'update_at_gte': opts['updateAtGte'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200155;

      return this.apiClient.callApi(
        '/route/digit_map/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapPost operation.
     * @callback module:api/RouteApi~routeDigitMapPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new digittranslation
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitTranslation} opts.body DigitTranslation to create
     * @param {module:api/RouteApi~routeDigitMapPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDigitMapPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/digit_map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapTranslationIdDelete operation.
     * @callback module:api/RouteApi~routeDigitMapTranslationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes digittranslation
     * @param {Number} translationId DigitTranslation id to get info about
     * @param {module:api/RouteApi~routeDigitMapTranslationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDigitMapTranslationIdDelete = function(translationId, callback) {
      var postBody = null;

      // verify the required parameter 'translationId' is set
      if (translationId === undefined || translationId === null) {
        throw new Error("Missing the required parameter 'translationId' when calling routeDigitMapTranslationIdDelete");
      }


      var pathParams = {
        'translation_id': translationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/digit_map/{translation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapTranslationIdGet operation.
     * @callback module:api/RouteApi~routeDigitMapTranslationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets digittranslation
     * @param {Number} translationId DigitTranslation id to get info about
     * @param {module:api/RouteApi~routeDigitMapTranslationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200154}
     */
    this.routeDigitMapTranslationIdGet = function(translationId, callback) {
      var postBody = null;

      // verify the required parameter 'translationId' is set
      if (translationId === undefined || translationId === null) {
        throw new Error("Missing the required parameter 'translationId' when calling routeDigitMapTranslationIdGet");
      }


      var pathParams = {
        'translation_id': translationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200154;

      return this.apiClient.callApi(
        '/route/digit_map/{translation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapTranslationIdItemListGet operation.
     * @callback module:api/RouteApi~routeDigitMapTranslationIdItemListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200157} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets translationitems
     * @param {Number} translationId Parent digit map
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.aNIPrefix 
     * @param {String} opts.aNIReplaceTo 
     * @param {String} opts.dNISPrefix 
     * @param {String} opts.dNISReplaceTo 
     * @param {String} opts.digitMapName 
     * @param {module:api/RouteApi~routeDigitMapTranslationIdItemListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200157}
     */
    this.routeDigitMapTranslationIdItemListGet = function(translationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'translationId' is set
      if (translationId === undefined || translationId === null) {
        throw new Error("Missing the required parameter 'translationId' when calling routeDigitMapTranslationIdItemListGet");
      }


      var pathParams = {
        'translation_id': translationId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'ANI_prefix': opts['aNIPrefix'],
        'ANI_replace_to': opts['aNIReplaceTo'],
        'DNIS_prefix': opts['dNISPrefix'],
        'DNIS_replace_to': opts['dNISReplaceTo'],
        'digit_map_name': opts['digitMapName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200157;

      return this.apiClient.callApi(
        '/route/digit_map/{translation_id}/item/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapTranslationIdItemPost operation.
     * @callback module:api/RouteApi~routeDigitMapTranslationIdItemPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new translationitem
     * @param {Number} translationId Parent digit map
     * @param {Object} opts Optional parameters
     * @param {module:model/TranslationItem} opts.body TranslationItem to create
     * @param {module:api/RouteApi~routeDigitMapTranslationIdItemPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDigitMapTranslationIdItemPost = function(translationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'translationId' is set
      if (translationId === undefined || translationId === null) {
        throw new Error("Missing the required parameter 'translationId' when calling routeDigitMapTranslationIdItemPost");
      }


      var pathParams = {
        'translation_id': translationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/digit_map/{translation_id}/item', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDigitMapTranslationIdPatch operation.
     * @callback module:api/RouteApi~routeDigitMapTranslationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies digittranslation
     * @param {Number} translationId DigitTranslation id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitTranslation} opts.body DigitTranslation to modify
     * @param {module:api/RouteApi~routeDigitMapTranslationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200154}
     */
    this.routeDigitMapTranslationIdPatch = function(translationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'translationId' is set
      if (translationId === undefined || translationId === null) {
        throw new Error("Missing the required parameter 'translationId' when calling routeDigitMapTranslationIdPatch");
      }


      var pathParams = {
        'translation_id': translationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200154;

      return this.apiClient.callApi(
        '/route/digit_map/{translation_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdAddTrunkPost operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdAddTrunkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicrouteitem
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteItem} opts.body DynamicRouteItem to create
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdAddTrunkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicDynamicRouteIdAddTrunkPost = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdAddTrunkPost");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/add_trunk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdAddTrunksPost operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdAddTrunksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicrouteitem
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteItemMultiple} opts.body DynamicRouteItem to create
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdAddTrunksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicDynamicRouteIdAddTrunksPost = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdAddTrunksPost");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/add_trunks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdDelete operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes dynamicroute
     * @param {Number} dynamicRouteId DynamicRoute id to get info about
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDynamicDynamicRouteIdDelete = function(dynamicRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdDelete");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdGet operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicroute
     * @param {Number} dynamicRouteId DynamicRoute id to get info about
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    this.routeDynamicDynamicRouteIdGet = function(dynamicRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdGet");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200144;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdOverrideCreatePost operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdOverrideCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicrouteover
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteOver} opts.body DynamicRouteOver to create
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdOverrideCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicDynamicRouteIdOverrideCreatePost = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdOverrideCreatePost");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/override/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdOverrideListGet operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdOverrideListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicrouteover list
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.digits 
     * @param {Number} opts.id 
     * @param {Number} opts.percentage 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.percentageGt 
     * @param {Number} opts.percentageLt 
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdOverrideListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200151}
     */
    this.routeDynamicDynamicRouteIdOverrideListGet = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdOverrideListGet");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'digits': opts['digits'],
        'id': opts['id'],
        'percentage': opts['percentage'],
        'resource_id': opts['resourceId'],
        'percentage_gt': opts['percentageGt'],
        'percentage_lt': opts['percentageLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/override/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdPatch operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies dynamicroute
     * @param {Number} dynamicRouteId DynamicRoute id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRoute} opts.body DynamicRoute to modify
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200144}
     */
    this.routeDynamicDynamicRouteIdPatch = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdPatch");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200144;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdPriCreatePost operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdPriCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicroutepri
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRoutePri} opts.body DynamicRoutePri to create
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdPriCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicDynamicRouteIdPriCreatePost = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdPriCreatePost");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/pri/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdPriListGet operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdPriListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200149} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicroutepri list
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.digits 
     * @param {Number} opts.id 
     * @param {Number} opts.resourceId 
     * @param {Number} opts.resourcePriGt 
     * @param {Number} opts.resourcePriLt 
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdPriListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200149}
     */
    this.routeDynamicDynamicRouteIdPriListGet = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdPriListGet");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'digits': opts['digits'],
        'id': opts['id'],
        'resource_id': opts['resourceId'],
        'resource_pri_gt': opts['resourcePriGt'],
        'resource_pri_lt': opts['resourcePriLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200149;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/pri/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdQosCreatePost operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdQosCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicrouteqos
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteQos} opts.body DynamicRouteQos to create
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdQosCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicDynamicRouteIdQosCreatePost = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdQosCreatePost");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/qos/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicDynamicRouteIdQosListGet operation.
     * @callback module:api/RouteApi~routeDynamicDynamicRouteIdQosListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200147} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicrouteqos list
     * @param {Number} dynamicRouteId Parent DynamicRoute
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.digits 
     * @param {Number} opts.id 
     * @param {String} opts.maxAcdGt 
     * @param {String} opts.maxAcdLt 
     * @param {String} opts.maxAsrGt 
     * @param {String} opts.maxAsrLt 
     * @param {String} opts.minAcdGt 
     * @param {String} opts.minAcdLt 
     * @param {String} opts.minAsrGt 
     * @param {String} opts.minAsrLt 
     * @param {module:api/RouteApi~routeDynamicDynamicRouteIdQosListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200147}
     */
    this.routeDynamicDynamicRouteIdQosListGet = function(dynamicRouteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dynamicRouteId' is set
      if (dynamicRouteId === undefined || dynamicRouteId === null) {
        throw new Error("Missing the required parameter 'dynamicRouteId' when calling routeDynamicDynamicRouteIdQosListGet");
      }


      var pathParams = {
        'dynamic_route_id': dynamicRouteId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'digits': opts['digits'],
        'id': opts['id'],
        'max_acd_gt': opts['maxAcdGt'],
        'max_acd_lt': opts['maxAcdLt'],
        'max_asr_gt': opts['maxAsrGt'],
        'max_asr_lt': opts['maxAsrLt'],
        'min_acd_gt': opts['minAcdGt'],
        'min_acd_lt': opts['minAcdLt'],
        'min_asr_gt': opts['minAsrGt'],
        'min_asr_lt': opts['minAsrLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200147;

      return this.apiClient.callApi(
        '/route/dynamic/{dynamic_route_id}/qos/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicListGet operation.
     * @callback module:api/RouteApi~routeDynamicListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200145} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicroutes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.modifiedBy 
     * @param {String} opts.name 
     * @param {String} opts.qosCycle 
     * @param {module:model/String} opts.routeRuleName 
     * @param {Number} opts.timeProfileId 
     * @param {Number} opts.usageCount 
     * @param {module:api/RouteApi~routeDynamicListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200145}
     */
    this.routeDynamicListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'modified_by': opts['modifiedBy'],
        'name': opts['name'],
        'qos_cycle': opts['qosCycle'],
        'route_rule_name': opts['routeRuleName'],
        'time_profile_id': opts['timeProfileId'],
        'usage_count': opts['usageCount']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200145;

      return this.apiClient.callApi(
        '/route/dynamic/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicOverrideIdDelete operation.
     * @callback module:api/RouteApi~routeDynamicOverrideIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes dynamicrouteover
     * @param {Number} id DynamicRouteOver id to get info about
     * @param {module:api/RouteApi~routeDynamicOverrideIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDynamicOverrideIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicOverrideIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/dynamic/override/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicOverrideIdGet operation.
     * @callback module:api/RouteApi~routeDynamicOverrideIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicrouteover
     * @param {Number} id DynamicRouteOver id to get info about
     * @param {module:api/RouteApi~routeDynamicOverrideIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200150}
     */
    this.routeDynamicOverrideIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicOverrideIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200150;

      return this.apiClient.callApi(
        '/route/dynamic/override/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicOverrideIdPatch operation.
     * @callback module:api/RouteApi~routeDynamicOverrideIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies dynamicrouteover
     * @param {Number} id DynamicRouteOver id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteOver} opts.body DynamicRouteOver to modify
     * @param {module:api/RouteApi~routeDynamicOverrideIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200150}
     */
    this.routeDynamicOverrideIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicOverrideIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200150;

      return this.apiClient.callApi(
        '/route/dynamic/override/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicPost operation.
     * @callback module:api/RouteApi~routeDynamicPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new dynamicroute
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRoute} opts.body DynamicRoute to create
     * @param {module:api/RouteApi~routeDynamicPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeDynamicPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/dynamic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicPriIdDelete operation.
     * @callback module:api/RouteApi~routeDynamicPriIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes dynamicroutepri
     * @param {Number} id DynamicRoutePri id to get info about
     * @param {module:api/RouteApi~routeDynamicPriIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDynamicPriIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicPriIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/dynamic/pri/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicPriIdGet operation.
     * @callback module:api/RouteApi~routeDynamicPriIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicroutepri
     * @param {Number} id DynamicRoutePri id to get info about
     * @param {module:api/RouteApi~routeDynamicPriIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200148}
     */
    this.routeDynamicPriIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicPriIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/route/dynamic/pri/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicPriIdPatch operation.
     * @callback module:api/RouteApi~routeDynamicPriIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies dynamicroutepri
     * @param {Number} id DynamicRoutePri id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRoutePri} opts.body DynamicRoutePri to modify
     * @param {module:api/RouteApi~routeDynamicPriIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200148}
     */
    this.routeDynamicPriIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicPriIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/route/dynamic/pri/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicQosIdDelete operation.
     * @callback module:api/RouteApi~routeDynamicQosIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes dynamicrouteqos
     * @param {Number} id DynamicRouteQos id to get info about
     * @param {module:api/RouteApi~routeDynamicQosIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeDynamicQosIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicQosIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/dynamic/qos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicQosIdGet operation.
     * @callback module:api/RouteApi~routeDynamicQosIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets dynamicrouteqos
     * @param {Number} id DynamicRouteQos id to get info about
     * @param {module:api/RouteApi~routeDynamicQosIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200146}
     */
    this.routeDynamicQosIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicQosIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/route/dynamic/qos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeDynamicQosIdPatch operation.
     * @callback module:api/RouteApi~routeDynamicQosIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies dynamicrouteqos
     * @param {Number} id DynamicRouteQos id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DynamicRouteQos} opts.body DynamicRouteQos to modify
     * @param {module:api/RouteApi~routeDynamicQosIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200146}
     */
    this.routeDynamicQosIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling routeDynamicQosIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/route/dynamic/qos/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeListGet operation.
     * @callback module:api/RouteApi~routeListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets routes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.aNIPrefix 
     * @param {String} opts.dNISPrefix 
     * @param {Number} opts.dynamicRouteId 
     * @param {Number} opts.interStaticRouteId 
     * @param {Number} opts.intraStaticRouteId 
     * @param {module:model/String} opts.routeType 
     * @param {Number} opts.staticRouteId 
     * @param {String} opts.aNIPrefixGt 
     * @param {String} opts.aNIPrefixLt 
     * @param {String} opts.dNISPrefixGt 
     * @param {String} opts.dNISPrefixLt 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/RouteApi~routeListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200143}
     */
    this.routeListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'ANI_prefix': opts['aNIPrefix'],
        'DNIS_prefix': opts['dNISPrefix'],
        'dynamic_route_id': opts['dynamicRouteId'],
        'inter_static_route_id': opts['interStaticRouteId'],
        'intra_static_route_id': opts['intraStaticRouteId'],
        'route_type': opts['routeType'],
        'static_route_id': opts['staticRouteId'],
        'ANI_prefix_gt': opts['aNIPrefixGt'],
        'ANI_prefix_lt': opts['aNIPrefixLt'],
        'DNIS_prefix_gt': opts['dNISPrefixGt'],
        'DNIS_prefix_lt': opts['dNISPrefixLt'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200143;

      return this.apiClient.callApi(
        '/route/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanListGet operation.
     * @callback module:api/RouteApi~routePlanListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200137} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets routestrategys
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.isVirtual 
     * @param {String} opts.name 
     * @param {Number} opts.routePlanId 
     * @param {String} opts.updateBy 
     * @param {Number} opts.usageCount 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/RouteApi~routePlanListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200137}
     */
    this.routePlanListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'is_virtual': opts['isVirtual'],
        'name': opts['name'],
        'route_plan_id': opts['routePlanId'],
        'update_by': opts['updateBy'],
        'usage_count': opts['usageCount'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200137;

      return this.apiClient.callApi(
        '/route/plan/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanPost operation.
     * @callback module:api/RouteApi~routePlanPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new routestrategy
     * @param {Object} opts Optional parameters
     * @param {module:model/RouteStrategy} opts.body RouteStrategy to create
     * @param {module:api/RouteApi~routePlanPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routePlanPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/plan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanRoutePlanIdAddRoutePost operation.
     * @callback module:api/RouteApi~routePlanRoutePlanIdAddRoutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new route
     * @param {Number} routePlanId Parent route plan id
     * @param {Object} opts Optional parameters
     * @param {module:model/Route} opts.body Route to create
     * @param {module:api/RouteApi~routePlanRoutePlanIdAddRoutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routePlanRoutePlanIdAddRoutePost = function(routePlanId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'routePlanId' is set
      if (routePlanId === undefined || routePlanId === null) {
        throw new Error("Missing the required parameter 'routePlanId' when calling routePlanRoutePlanIdAddRoutePost");
      }


      var pathParams = {
        'route_plan_id': routePlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/plan/{route_plan_id}/add_route', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanRoutePlanIdDelete operation.
     * @callback module:api/RouteApi~routePlanRoutePlanIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes routestrategy
     * @param {Number} routePlanId RouteStrategy id to get info about
     * @param {module:api/RouteApi~routePlanRoutePlanIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routePlanRoutePlanIdDelete = function(routePlanId, callback) {
      var postBody = null;

      // verify the required parameter 'routePlanId' is set
      if (routePlanId === undefined || routePlanId === null) {
        throw new Error("Missing the required parameter 'routePlanId' when calling routePlanRoutePlanIdDelete");
      }


      var pathParams = {
        'route_plan_id': routePlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/plan/{route_plan_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanRoutePlanIdGet operation.
     * @callback module:api/RouteApi~routePlanRoutePlanIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets routestrategy
     * @param {Number} routePlanId RouteStrategy id to get info about
     * @param {module:api/RouteApi~routePlanRoutePlanIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200136}
     */
    this.routePlanRoutePlanIdGet = function(routePlanId, callback) {
      var postBody = null;

      // verify the required parameter 'routePlanId' is set
      if (routePlanId === undefined || routePlanId === null) {
        throw new Error("Missing the required parameter 'routePlanId' when calling routePlanRoutePlanIdGet");
      }


      var pathParams = {
        'route_plan_id': routePlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200136;

      return this.apiClient.callApi(
        '/route/plan/{route_plan_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanRoutePlanIdListRoutesGet operation.
     * @callback module:api/RouteApi~routePlanRoutePlanIdListRoutesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets routes
     * @param {Number} routePlanId Parent route plan id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.aNIPrefix 
     * @param {String} opts.dNISPrefix 
     * @param {Number} opts.dynamicRouteId 
     * @param {Number} opts.interStaticRouteId 
     * @param {Number} opts.intraStaticRouteId 
     * @param {module:model/String} opts.routeType 
     * @param {Number} opts.staticRouteId 
     * @param {String} opts.aNIPrefixGt 
     * @param {String} opts.aNIPrefixLt 
     * @param {String} opts.dNISPrefixGt 
     * @param {String} opts.dNISPrefixLt 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/RouteApi~routePlanRoutePlanIdListRoutesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200143}
     */
    this.routePlanRoutePlanIdListRoutesGet = function(routePlanId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'routePlanId' is set
      if (routePlanId === undefined || routePlanId === null) {
        throw new Error("Missing the required parameter 'routePlanId' when calling routePlanRoutePlanIdListRoutesGet");
      }


      var pathParams = {
        'route_plan_id': routePlanId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'ANI_prefix': opts['aNIPrefix'],
        'DNIS_prefix': opts['dNISPrefix'],
        'dynamic_route_id': opts['dynamicRouteId'],
        'inter_static_route_id': opts['interStaticRouteId'],
        'intra_static_route_id': opts['intraStaticRouteId'],
        'route_type': opts['routeType'],
        'static_route_id': opts['staticRouteId'],
        'ANI_prefix_gt': opts['aNIPrefixGt'],
        'ANI_prefix_lt': opts['aNIPrefixLt'],
        'DNIS_prefix_gt': opts['dNISPrefixGt'],
        'DNIS_prefix_lt': opts['dNISPrefixLt'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200143;

      return this.apiClient.callApi(
        '/route/plan/{route_plan_id}/list_routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routePlanRoutePlanIdPatch operation.
     * @callback module:api/RouteApi~routePlanRoutePlanIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies routestrategy
     * @param {Number} routePlanId RouteStrategy id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RouteStrategy} opts.body RouteStrategy to modify
     * @param {module:api/RouteApi~routePlanRoutePlanIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200136}
     */
    this.routePlanRoutePlanIdPatch = function(routePlanId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'routePlanId' is set
      if (routePlanId === undefined || routePlanId === null) {
        throw new Error("Missing the required parameter 'routePlanId' when calling routePlanRoutePlanIdPatch");
      }


      var pathParams = {
        'route_plan_id': routePlanId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200136;

      return this.apiClient.callApi(
        '/route/plan/{route_plan_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteIdDelete operation.
     * @callback module:api/RouteApi~routeRouteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes route
     * @param {Number} routeId Route id to get info about
     * @param {module:api/RouteApi~routeRouteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeRouteIdDelete = function(routeId, callback) {
      var postBody = null;

      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling routeRouteIdDelete");
      }


      var pathParams = {
        'route_id': routeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/{route_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteIdGet operation.
     * @callback module:api/RouteApi~routeRouteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200142} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets route
     * @param {Number} routeId Route id to get info about
     * @param {module:api/RouteApi~routeRouteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200142}
     */
    this.routeRouteIdGet = function(routeId, callback) {
      var postBody = null;

      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling routeRouteIdGet");
      }


      var pathParams = {
        'route_id': routeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200142;

      return this.apiClient.callApi(
        '/route/{route_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeRouteIdPatch operation.
     * @callback module:api/RouteApi~routeRouteIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200142} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies route
     * @param {Number} routeId Route id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/Route} opts.body Route to modify
     * @param {module:api/RouteApi~routeRouteIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200142}
     */
    this.routeRouteIdPatch = function(routeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling routeRouteIdPatch");
      }


      var pathParams = {
        'route_id': routeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200142;

      return this.apiClient.callApi(
        '/route/{route_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticCreatePost operation.
     * @callback module:api/RouteApi~routeStaticCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new static route
     * @param {Object} opts Optional parameters
     * @param {module:model/Product} opts.body Static Route to create
     * @param {module:api/RouteApi~routeStaticCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeStaticCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/static/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticItemItemIdDelete operation.
     * @callback module:api/RouteApi~routeStaticItemItemIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes staticrouteitem
     * @param {Number} itemId StaticRouteItem id to get info about
     * @param {module:api/RouteApi~routeStaticItemItemIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeStaticItemItemIdDelete = function(itemId, callback) {
      var postBody = null;

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling routeStaticItemItemIdDelete");
      }


      var pathParams = {
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/static/item/{item_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticItemItemIdGet operation.
     * @callback module:api/RouteApi~routeStaticItemItemIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets staticrouteitem
     * @param {Number} itemId StaticRouteItem id to get info about
     * @param {module:api/RouteApi~routeStaticItemItemIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    this.routeStaticItemItemIdGet = function(itemId, callback) {
      var postBody = null;

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling routeStaticItemItemIdGet");
      }


      var pathParams = {
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/route/static/item/{item_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticItemItemIdPatch operation.
     * @callback module:api/RouteApi~routeStaticItemItemIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies staticrouteitem
     * @param {Number} itemId StaticRouteItem id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductItemsModify} opts.body StaticRouteItem to modify
     * @param {module:api/RouteApi~routeStaticItemItemIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200140}
     */
    this.routeStaticItemItemIdPatch = function(itemId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling routeStaticItemItemIdPatch");
      }


      var pathParams = {
        'item_id': itemId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/route/static/item/{item_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticListGet operation.
     * @callback module:api/RouteApi~routeStaticListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200139} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets static routes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.codeDeckName 
     * @param {module:model/String} opts.definedBy 
     * @param {String} opts.name 
     * @param {module:model/String} opts.routedBy 
     * @param {Number} opts.staticRouteId 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateAtGt 
     * @param {String} opts.updateAtLt 
     * @param {module:api/RouteApi~routeStaticListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200139}
     */
    this.routeStaticListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'code_deck_name': opts['codeDeckName'],
        'defined_by': opts['definedBy'],
        'name': opts['name'],
        'routed_by': opts['routedBy'],
        'static_route_id': opts['staticRouteId'],
        'update_by': opts['updateBy'],
        'update_at_gt': opts['updateAtGt'],
        'update_at_lt': opts['updateAtLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200139;

      return this.apiClient.callApi(
        '/route/static/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticStaticRouteIdDelete operation.
     * @callback module:api/RouteApi~routeStaticStaticRouteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes static route
     * @param {Number} staticRouteId Static Route id to get info about
     * @param {module:api/RouteApi~routeStaticStaticRouteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.routeStaticStaticRouteIdDelete = function(staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling routeStaticStaticRouteIdDelete");
      }


      var pathParams = {
        'static_route_id': staticRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/route/static/{static_route_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticStaticRouteIdGet operation.
     * @callback module:api/RouteApi~routeStaticStaticRouteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets static route
     * @param {Number} staticRouteId Static Route id to get info about
     * @param {module:api/RouteApi~routeStaticStaticRouteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200138}
     */
    this.routeStaticStaticRouteIdGet = function(staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling routeStaticStaticRouteIdGet");
      }


      var pathParams = {
        'static_route_id': staticRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200138;

      return this.apiClient.callApi(
        '/route/static/{static_route_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticStaticRouteIdItemCreatePost operation.
     * @callback module:api/RouteApi~routeStaticStaticRouteIdItemCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new staticrouteitem
     * @param {Number} staticRouteId Parent id
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductItems} opts.body StaticRouteItem to create
     * @param {module:api/RouteApi~routeStaticStaticRouteIdItemCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.routeStaticStaticRouteIdItemCreatePost = function(staticRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling routeStaticStaticRouteIdItemCreatePost");
      }


      var pathParams = {
        'static_route_id': staticRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/route/static/{static_route_id}/item/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticStaticRouteIdItemListGet operation.
     * @callback module:api/RouteApi~routeStaticStaticRouteIdItemListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200141} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets staticrouteitem
     * @param {Number} staticRouteId Parent id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/RouteApi~routeStaticStaticRouteIdItemListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200141}
     */
    this.routeStaticStaticRouteIdItemListGet = function(staticRouteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling routeStaticStaticRouteIdItemListGet");
      }


      var pathParams = {
        'static_route_id': staticRouteId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200141;

      return this.apiClient.callApi(
        '/route/static/{static_route_id}/item/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routeStaticStaticRouteIdPatch operation.
     * @callback module:api/RouteApi~routeStaticStaticRouteIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies static route
     * @param {Number} staticRouteId Static Route id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/Product} opts.body Static Route to modify
     * @param {module:api/RouteApi~routeStaticStaticRouteIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200138}
     */
    this.routeStaticStaticRouteIdPatch = function(staticRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling routeStaticStaticRouteIdPatch");
      }


      var pathParams = {
        'static_route_id': staticRouteId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200138;

      return this.apiClient.callApi(
        '/route/static/{static_route_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
