/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/BalanceDailyResetTask', 'model/ClientPayment', 'model/ClientPaymentNote', 'model/ClientPaymentSent', 'model/InlineResponse20072', 'model/InlineResponse20073', 'model/InlineResponse20074', 'model/InlineResponse20075', 'model/InlineResponse20076', 'model/InlineResponse20077', 'model/InlineResponse20078', 'model/InlineResponse20079', 'model/InlineResponse20080', 'model/InlineResponse20081', 'model/InlineResponse20082', 'model/InlineResponse20083', 'model/InlineResponse20084', 'model/Invoice', 'model/InvoiceGeneration', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/PaymentGatewayHistory', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/BalanceDailyResetTask'), require('../model/ClientPayment'), require('../model/ClientPaymentNote'), require('../model/ClientPaymentSent'), require('../model/InlineResponse20072'), require('../model/InlineResponse20073'), require('../model/InlineResponse20074'), require('../model/InlineResponse20075'), require('../model/InlineResponse20076'), require('../model/InlineResponse20077'), require('../model/InlineResponse20078'), require('../model/InlineResponse20079'), require('../model/InlineResponse20080'), require('../model/InlineResponse20081'), require('../model/InlineResponse20082'), require('../model/InlineResponse20083'), require('../model/InlineResponse20084'), require('../model/Invoice'), require('../model/InvoiceGeneration'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/PaymentGatewayHistory'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.FinanceApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.BalanceDailyResetTask, root.DnlApi.ClientPayment, root.DnlApi.ClientPaymentNote, root.DnlApi.ClientPaymentSent, root.DnlApi.InlineResponse20072, root.DnlApi.InlineResponse20073, root.DnlApi.InlineResponse20074, root.DnlApi.InlineResponse20075, root.DnlApi.InlineResponse20076, root.DnlApi.InlineResponse20077, root.DnlApi.InlineResponse20078, root.DnlApi.InlineResponse20079, root.DnlApi.InlineResponse20080, root.DnlApi.InlineResponse20081, root.DnlApi.InlineResponse20082, root.DnlApi.InlineResponse20083, root.DnlApi.InlineResponse20084, root.DnlApi.Invoice, root.DnlApi.InvoiceGeneration, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.PaymentGatewayHistory, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, BalanceDailyResetTask, ClientPayment, ClientPaymentNote, ClientPaymentSent, InlineResponse20072, InlineResponse20073, InlineResponse20074, InlineResponse20075, InlineResponse20076, InlineResponse20077, InlineResponse20078, InlineResponse20079, InlineResponse20080, InlineResponse20081, InlineResponse20082, InlineResponse20083, InlineResponse20084, Invoice, InvoiceGeneration, ObjectCreated, ObjectNotFoundError, OperationError, PaymentGatewayHistory, Success, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Finance service.
   * @module api/FinanceApi
   * @version 1.2.10
   */

  /**
   * Constructs a new FinanceApi. 
   * @alias module:api/FinanceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the carrierClientIdActualBalanceGet operation.
     * @callback module:api/FinanceApi~carrierClientIdActualBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets actualbalancehistory
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts._date 
     * @param {String} opts.dateGte 
     * @param {String} opts.dateLte 
     * @param {module:api/FinanceApi~carrierClientIdActualBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    this.carrierClientIdActualBalanceGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdActualBalanceGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'date': opts['_date'],
        'date_gte': opts['dateGte'],
        'date_lte': opts['dateLte']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/carrier/{client_id}/actual_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdBalanceGet operation.
     * @callback module:api/FinanceApi~carrierClientIdBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carrier
     * @param {Number} clientId Carrier id to get info about
     * @param {module:api/FinanceApi~carrierClientIdBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20077}
     */
    this.carrierClientIdBalanceGet = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdBalanceGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/carrier/{client_id}/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdGatewayPaymentPost operation.
     * @callback module:api/FinanceApi~carrierClientIdGatewayPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new paymentgatewayhistoryrecord
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentGatewayHistory} opts.body PaymentGatewayHistoryRecord to create
     * @param {module:api/FinanceApi~carrierClientIdGatewayPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdGatewayPaymentPost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdGatewayPaymentPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/gateway_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdGatewayPaymentsGet operation.
     * @callback module:api/FinanceApi~carrierClientIdGatewayPaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets paymentgatewayhistory
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.paypalId 
     * @param {String} opts.paypalTransactionId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.paidOnGt 
     * @param {String} opts.paidOnLt 
     * @param {module:api/FinanceApi~carrierClientIdGatewayPaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20081}
     */
    this.carrierClientIdGatewayPaymentsGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdGatewayPaymentsGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'paypal_id': opts['paypalId'],
        'paypal_transaction_id': opts['paypalTransactionId'],
        'type': opts['type'],
        'paid_on_gt': opts['paidOnGt'],
        'paid_on_lt': opts['paidOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/carrier/{client_id}/gateway_payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdInvoiceListGet operation.
     * @callback module:api/FinanceApi~carrierClientIdInvoiceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets invoices
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId2 
     * @param {String} opts.clientName 
     * @param {String} opts.invoiceNumber 
     * @param {Boolean} opts.paid 
     * @param {module:model/String} opts.state 
     * @param {Number} opts.status 
     * @param {String} opts.dueDateGt 
     * @param {String} opts.dueDateLt 
     * @param {String} opts.invoiceDateGt 
     * @param {String} opts.invoiceDateLt 
     * @param {module:api/FinanceApi~carrierClientIdInvoiceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    this.carrierClientIdInvoiceListGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdInvoiceListGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId2'],
        'client_name': opts['clientName'],
        'invoice_number': opts['invoiceNumber'],
        'paid': opts['paid'],
        'state': opts['state'],
        'status': opts['status'],
        'due_date_gt': opts['dueDateGt'],
        'due_date_lt': opts['dueDateLt'],
        'invoice_date_gt': opts['invoiceDateGt'],
        'invoice_date_lt': opts['invoiceDateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/carrier/{client_id}/invoice/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdInvoicePost operation.
     * @callback module:api/FinanceApi~carrierClientIdInvoicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new invoice
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/InvoiceGeneration} opts.body Invoice to create
     * @param {module:api/FinanceApi~carrierClientIdInvoicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdInvoicePost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdInvoicePost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdMutualBalanceGet operation.
     * @callback module:api/FinanceApi~carrierClientIdMutualBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets balancehistory
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts._date 
     * @param {String} opts.dateGte 
     * @param {String} opts.dateLte 
     * @param {module:api/FinanceApi~carrierClientIdMutualBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    this.carrierClientIdMutualBalanceGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdMutualBalanceGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'date': opts['_date'],
        'date_gte': opts['dateGte'],
        'date_lte': opts['dateLte']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/carrier/{client_id}/mutual_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPaymentListGet operation.
     * @callback module:api/FinanceApi~carrierClientIdPaymentListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientpayments
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.amountGt 
     * @param {String} opts.amountLt 
     * @param {String} opts.paidOnGt 
     * @param {String} opts.paidOnLt 
     * @param {module:api/FinanceApi~carrierClientIdPaymentListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20073}
     */
    this.carrierClientIdPaymentListGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPaymentListGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'amount_gt': opts['amountGt'],
        'amount_lt': opts['amountLt'],
        'paid_on_gt': opts['paidOnGt'],
        'paid_on_lt': opts['paidOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/carrier/{client_id}/payment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdPaymentPost operation.
     * @callback module:api/FinanceApi~carrierClientIdPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new clientpayment
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientPayment} opts.body ClientPayment to create
     * @param {module:api/FinanceApi~carrierClientIdPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdPaymentPost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdPaymentPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdRegenerateBalancePost operation.
     * @callback module:api/FinanceApi~carrierClientIdRegenerateBalancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new balancedailyresettask
     * @param {Number} clientId Parent carrier id
     * @param {Object} opts Optional parameters
     * @param {module:model/BalanceDailyResetTask} opts.body BalanceDailyResetTask to create
     * @param {module:api/FinanceApi~carrierClientIdRegenerateBalancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.carrierClientIdRegenerateBalancePost = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdRegenerateBalancePost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/carrier/{client_id}/regenerate_balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the carrierClientIdTransactionsListGet operation.
     * @callback module:api/FinanceApi~carrierClientIdTransactionsListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets client transactions
     * @param {Number} clientId Parent carrier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.amount 
     * @param {module:model/String} opts.transactionType 
     * @param {String} opts.dateGt 
     * @param {String} opts.dateLt 
     * @param {module:api/FinanceApi~carrierClientIdTransactionsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20080}
     */
    this.carrierClientIdTransactionsListGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling carrierClientIdTransactionsListGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'amount': opts['amount'],
        'transaction_type': opts['transactionType'],
        'date_gt': opts['dateGt'],
        'date_lt': opts['dateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/carrier/{client_id}/transactions/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeAllPaymentListGet operation.
     * @callback module:api/FinanceApi~financeAllPaymentListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all payments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {Number} opts.clientPaymentId 
     * @param {module:model/String} opts.paymentType 
     * @param {String} opts.updateBy 
     * @param {String} opts.paymentTimeGt 
     * @param {String} opts.paymentTimeLt 
     * @param {String} opts.receivingTimeGt 
     * @param {String} opts.receivingTimeLt 
     * @param {module:api/FinanceApi~financeAllPaymentListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    this.financeAllPaymentListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'client_payment_id': opts['clientPaymentId'],
        'payment_type': opts['paymentType'],
        'update_by': opts['updateBy'],
        'payment_time_gt': opts['paymentTimeGt'],
        'payment_time_lt': opts['paymentTimeLt'],
        'receiving_time_gt': opts['receivingTimeGt'],
        'receiving_time_lt': opts['receivingTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/finance/all_payment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeAutoInvoiceListGet operation.
     * @callback module:api/FinanceApi~financeAutoInvoiceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets auto invoice carriers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.name 
     * @param {Number} opts.paymentTermId 
     * @param {module:api/FinanceApi~financeAutoInvoiceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    this.financeAutoInvoiceListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'name': opts['name'],
        'payment_term_id': opts['paymentTermId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/finance/auto_invoice/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeGatewayPaymentsGet operation.
     * @callback module:api/FinanceApi~financeGatewayPaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets paymentgatewayhistory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.paypalId 
     * @param {String} opts.paypalTransactionId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.paidOnGt 
     * @param {String} opts.paidOnLt 
     * @param {module:api/FinanceApi~financeGatewayPaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    this.financeGatewayPaymentsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'paypal_id': opts['paypalId'],
        'paypal_transaction_id': opts['paypalTransactionId'],
        'type': opts['type'],
        'paid_on_gt': opts['paidOnGt'],
        'paid_on_lt': opts['paidOnLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20082;

      return this.apiClient.callApi(
        '/finance/gateway_payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeInvoiceInvoiceIdDelete operation.
     * @callback module:api/FinanceApi~financeInvoiceInvoiceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes invoice
     * @param {Number} invoiceId Invoice id to get info about
     * @param {module:api/FinanceApi~financeInvoiceInvoiceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.financeInvoiceInvoiceIdDelete = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling financeInvoiceInvoiceIdDelete");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/finance/invoice/{invoice_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeInvoiceInvoiceIdGet operation.
     * @callback module:api/FinanceApi~financeInvoiceInvoiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets invoice
     * @param {Number} invoiceId Invoice id to get info about
     * @param {module:api/FinanceApi~financeInvoiceInvoiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20074}
     */
    this.financeInvoiceInvoiceIdGet = function(invoiceId, callback) {
      var postBody = null;

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling financeInvoiceInvoiceIdGet");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/finance/invoice/{invoice_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeInvoiceInvoiceIdPatch operation.
     * @callback module:api/FinanceApi~financeInvoiceInvoiceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies invoice
     * @param {Number} invoiceId Invoice id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/Invoice} opts.body Invoice to modify
     * @param {module:api/FinanceApi~financeInvoiceInvoiceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20074}
     */
    this.financeInvoiceInvoiceIdPatch = function(invoiceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling financeInvoiceInvoiceIdPatch");
      }


      var pathParams = {
        'invoice_id': invoiceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/finance/invoice/{invoice_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeInvoiceListGet operation.
     * @callback module:api/FinanceApi~financeInvoiceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets invoices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {String} opts.clientName 
     * @param {String} opts.invoiceNumber 
     * @param {Boolean} opts.paid 
     * @param {module:model/String} opts.state 
     * @param {Number} opts.status 
     * @param {String} opts.dueDateGt 
     * @param {String} opts.dueDateLt 
     * @param {String} opts.invoiceDateGt 
     * @param {String} opts.invoiceDateLt 
     * @param {module:api/FinanceApi~financeInvoiceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    this.financeInvoiceListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'client_name': opts['clientName'],
        'invoice_number': opts['invoiceNumber'],
        'paid': opts['paid'],
        'state': opts['state'],
        'status': opts['status'],
        'due_date_gt': opts['dueDateGt'],
        'due_date_lt': opts['dueDateLt'],
        'invoice_date_gt': opts['invoiceDateGt'],
        'invoice_date_lt': opts['invoiceDateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/finance/invoice/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financePaymentClientPaymentIdDelete operation.
     * @callback module:api/FinanceApi~financePaymentClientPaymentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {module:api/FinanceApi~financePaymentClientPaymentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.financePaymentClientPaymentIdDelete = function(clientPaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financePaymentClientPaymentIdDelete");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/finance/payment/{client_payment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financePaymentClientPaymentIdEditAndSendNotePost operation.
     * @callback module:api/FinanceApi~financePaymentClientPaymentIdEditAndSendNotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} clientPaymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientPaymentNote} opts.body Note to payment
     * @param {module:api/FinanceApi~financePaymentClientPaymentIdEditAndSendNotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.financePaymentClientPaymentIdEditAndSendNotePost = function(clientPaymentId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financePaymentClientPaymentIdEditAndSendNotePost");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/finance/payment/{client_payment_id}/edit_and_send_note', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financePaymentClientPaymentIdGet operation.
     * @callback module:api/FinanceApi~financePaymentClientPaymentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {module:api/FinanceApi~financePaymentClientPaymentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    this.financePaymentClientPaymentIdGet = function(clientPaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financePaymentClientPaymentIdGet");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/finance/payment/{client_payment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financePaymentClientPaymentIdPatch operation.
     * @callback module:api/FinanceApi~financePaymentClientPaymentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientPayment} opts.body ClientPayment to modify
     * @param {module:api/FinanceApi~financePaymentClientPaymentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    this.financePaymentClientPaymentIdPatch = function(clientPaymentId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financePaymentClientPaymentIdPatch");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/finance/payment/{client_payment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeReceivedPaymentListGet operation.
     * @callback module:api/FinanceApi~financeReceivedPaymentListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets received payments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {Number} opts.clientPaymentId 
     * @param {module:model/String} opts.paymentType 
     * @param {String} opts.updateBy 
     * @param {String} opts.paymentTimeGt 
     * @param {String} opts.paymentTimeLt 
     * @param {String} opts.receivingTimeGt 
     * @param {String} opts.receivingTimeLt 
     * @param {module:api/FinanceApi~financeReceivedPaymentListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    this.financeReceivedPaymentListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'client_payment_id': opts['clientPaymentId'],
        'payment_type': opts['paymentType'],
        'update_by': opts['updateBy'],
        'payment_time_gt': opts['paymentTimeGt'],
        'payment_time_lt': opts['paymentTimeLt'],
        'receiving_time_gt': opts['receivingTimeGt'],
        'receiving_time_lt': opts['receivingTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/finance/received_payment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeSentPaymentClientPaymentIdDelete operation.
     * @callback module:api/FinanceApi~financeSentPaymentClientPaymentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {module:api/FinanceApi~financeSentPaymentClientPaymentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.financeSentPaymentClientPaymentIdDelete = function(clientPaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financeSentPaymentClientPaymentIdDelete");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/finance/sent_payment/{client_payment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeSentPaymentClientPaymentIdGet operation.
     * @callback module:api/FinanceApi~financeSentPaymentClientPaymentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {module:api/FinanceApi~financeSentPaymentClientPaymentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    this.financeSentPaymentClientPaymentIdGet = function(clientPaymentId, callback) {
      var postBody = null;

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financeSentPaymentClientPaymentIdGet");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/finance/sent_payment/{client_payment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeSentPaymentClientPaymentIdPatch operation.
     * @callback module:api/FinanceApi~financeSentPaymentClientPaymentIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies clientpayment
     * @param {Number} clientPaymentId ClientPayment id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientPaymentSent} opts.body ClientPayment to modify
     * @param {module:api/FinanceApi~financeSentPaymentClientPaymentIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    this.financeSentPaymentClientPaymentIdPatch = function(clientPaymentId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientPaymentId' is set
      if (clientPaymentId === undefined || clientPaymentId === null) {
        throw new Error("Missing the required parameter 'clientPaymentId' when calling financeSentPaymentClientPaymentIdPatch");
      }


      var pathParams = {
        'client_payment_id': clientPaymentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/finance/sent_payment/{client_payment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeSentPaymentListGet operation.
     * @callback module:api/FinanceApi~financeSentPaymentListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets sent payments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.clientId 
     * @param {Number} opts.clientPaymentId 
     * @param {module:model/String} opts.paymentType 
     * @param {String} opts.updateBy 
     * @param {String} opts.paymentTimeGt 
     * @param {String} opts.paymentTimeLt 
     * @param {String} opts.receivingTimeGt 
     * @param {String} opts.receivingTimeLt 
     * @param {module:api/FinanceApi~financeSentPaymentListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    this.financeSentPaymentListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'client_id': opts['clientId'],
        'client_payment_id': opts['clientPaymentId'],
        'payment_type': opts['paymentType'],
        'update_by': opts['updateBy'],
        'payment_time_gt': opts['paymentTimeGt'],
        'payment_time_lt': opts['paymentTimeLt'],
        'receiving_time_gt': opts['receivingTimeGt'],
        'receiving_time_lt': opts['receivingTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/finance/sent_payment/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financeSentPaymentPost operation.
     * @callback module:api/FinanceApi~financeSentPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new clientpayment
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientPaymentSent} opts.body ClientPayment to create
     * @param {module:api/FinanceApi~financeSentPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.financeSentPaymentPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/finance/sent_payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
