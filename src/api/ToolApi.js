/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/CallApi', 'model/ClientCdrSimulateCall', 'model/InlineResponse200117', 'model/InlineResponse200193', 'model/InlineResponse200194', 'model/InlineResponse200195', 'model/InlineResponse200196', 'model/InlineResponse200197', 'model/InlineResponse200198', 'model/InlineResponse200199', 'model/InlineResponse2002', 'model/InlineResponse200200', 'model/InlineResponse200201', 'model/InlineResponse200202', 'model/InlineResponse200203', 'model/InlineResponse200204', 'model/ObjectCreated', 'model/ObjectCreatedCompositeOrStrPk', 'model/ObjectNotFoundError', 'model/OperationError', 'model/PcapQuery', 'model/RateGenerationApplyRate', 'model/RateGenerationHistory', 'model/RateGenerationTemplate', 'model/RateSend', 'model/RateUploadTask', 'model/RateUploadTemplate', 'model/RateUploadTemplateModify', 'model/RerateCdrTask', 'model/Success', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/CallApi'), require('../model/ClientCdrSimulateCall'), require('../model/InlineResponse200117'), require('../model/InlineResponse200193'), require('../model/InlineResponse200194'), require('../model/InlineResponse200195'), require('../model/InlineResponse200196'), require('../model/InlineResponse200197'), require('../model/InlineResponse200198'), require('../model/InlineResponse200199'), require('../model/InlineResponse2002'), require('../model/InlineResponse200200'), require('../model/InlineResponse200201'), require('../model/InlineResponse200202'), require('../model/InlineResponse200203'), require('../model/InlineResponse200204'), require('../model/ObjectCreated'), require('../model/ObjectCreatedCompositeOrStrPk'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/PcapQuery'), require('../model/RateGenerationApplyRate'), require('../model/RateGenerationHistory'), require('../model/RateGenerationTemplate'), require('../model/RateSend'), require('../model/RateUploadTask'), require('../model/RateUploadTemplate'), require('../model/RateUploadTemplateModify'), require('../model/RerateCdrTask'), require('../model/Success'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.ToolApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.CallApi, root.DnlApi.ClientCdrSimulateCall, root.DnlApi.InlineResponse200117, root.DnlApi.InlineResponse200193, root.DnlApi.InlineResponse200194, root.DnlApi.InlineResponse200195, root.DnlApi.InlineResponse200196, root.DnlApi.InlineResponse200197, root.DnlApi.InlineResponse200198, root.DnlApi.InlineResponse200199, root.DnlApi.InlineResponse2002, root.DnlApi.InlineResponse200200, root.DnlApi.InlineResponse200201, root.DnlApi.InlineResponse200202, root.DnlApi.InlineResponse200203, root.DnlApi.InlineResponse200204, root.DnlApi.ObjectCreated, root.DnlApi.ObjectCreatedCompositeOrStrPk, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.PcapQuery, root.DnlApi.RateGenerationApplyRate, root.DnlApi.RateGenerationHistory, root.DnlApi.RateGenerationTemplate, root.DnlApi.RateSend, root.DnlApi.RateUploadTask, root.DnlApi.RateUploadTemplate, root.DnlApi.RateUploadTemplateModify, root.DnlApi.RerateCdrTask, root.DnlApi.Success, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, CallApi, ClientCdrSimulateCall, InlineResponse200117, InlineResponse200193, InlineResponse200194, InlineResponse200195, InlineResponse200196, InlineResponse200197, InlineResponse200198, InlineResponse200199, InlineResponse2002, InlineResponse200200, InlineResponse200201, InlineResponse200202, InlineResponse200203, InlineResponse200204, ObjectCreated, ObjectCreatedCompositeOrStrPk, ObjectNotFoundError, OperationError, PcapQuery, RateGenerationApplyRate, RateGenerationHistory, RateGenerationTemplate, RateSend, RateUploadTask, RateUploadTemplate, RateUploadTemplateModify, RerateCdrTask, Success, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Tool service.
   * @module api/ToolApi
   * @version 1.2.62
   */

  /**
   * Constructs a new ToolApi. 
   * @alias module:api/ToolApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the toolPcapDownloadQueryKeyGet operation.
     * @callback module:api/ToolApi~toolPcapDownloadQueryKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200204} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets pcap file
     * @param {String} queryKey Pcap file id to get info about
     * @param {module:api/ToolApi~toolPcapDownloadQueryKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200204}
     */
    this.toolPcapDownloadQueryKeyGet = function(queryKey, callback) {
      var postBody = null;

      // verify the required parameter 'queryKey' is set
      if (queryKey === undefined || queryKey === null) {
        throw new Error("Missing the required parameter 'queryKey' when calling toolPcapDownloadQueryKeyGet");
      }


      var pathParams = {
        'query_key': queryKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.tcpdump.pcap'];
      var returnType = InlineResponse200204;

      return this.apiClient.callApi(
        '/tool/pcap/download/{query_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolPcapQueryPost operation.
     * @callback module:api/ToolApi~toolPcapQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreatedCompositeOrStrPk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new pcapquery
     * @param {Object} opts Optional parameters
     * @param {module:model/PcapQuery} opts.body PcapQuery to create
     * @param {module:api/ToolApi~toolPcapQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreatedCompositeOrStrPk}
     */
    this.toolPcapQueryPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreatedCompositeOrStrPk;

      return this.apiClient.callApi(
        '/tool/pcap/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolPcapQueryQueryKeyGet operation.
     * @callback module:api/ToolApi~toolPcapQueryQueryKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200204} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets pcapquery
     * @param {String} queryKey PcapQuery id to get info about
     * @param {module:api/ToolApi~toolPcapQueryQueryKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200204}
     */
    this.toolPcapQueryQueryKeyGet = function(queryKey, callback) {
      var postBody = null;

      // verify the required parameter 'queryKey' is set
      if (queryKey === undefined || queryKey === null) {
        throw new Error("Missing the required parameter 'queryKey' when calling toolPcapQueryQueryKeyGet");
      }


      var pathParams = {
        'query_key': queryKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200204;

      return this.apiClient.callApi(
        '/tool/pcap/query/{query_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationAllDelete operation.
     * @callback module:api/ToolApi~toolRateGenerationAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found rategenerationtemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.createBy 
     * @param {String} opts.createOnGt 
     * @param {String} opts.createOnLt 
     * @param {String} opts.idIn 
     * @param {String} opts.lastGeneratedGt 
     * @param {String} opts.lastGeneratedLt 
     * @param {String} opts.name 
     * @param {module:api/ToolApi~toolRateGenerationAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.toolRateGenerationAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'create_by': opts['createBy'],
        'create_on_gt': opts['createOnGt'],
        'create_on_lt': opts['createOnLt'],
        'id_in': opts['idIn'],
        'last_generated_gt': opts['lastGeneratedGt'],
        'last_generated_lt': opts['lastGeneratedLt'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/tool/rate_generation/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationApplyIdPatch operation.
     * @callback module:api/ToolApi~toolRateGenerationApplyIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id RateGeneration history id 
     * @param {Object} opts Optional parameters
     * @param {module:model/RateGenerationApplyRate} opts.body New rate table parameters
     * @param {module:api/ToolApi~toolRateGenerationApplyIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.toolRateGenerationApplyIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateGenerationApplyIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tool/rate_generation/apply/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationIdDelete operation.
     * @callback module:api/ToolApi~toolRateGenerationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes rategenerationtemplate
     * @param {Number} id RateGenerationTemplate id to get info about
     * @param {module:api/ToolApi~toolRateGenerationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.toolRateGenerationIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateGenerationIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tool/rate_generation/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationIdGet operation.
     * @callback module:api/ToolApi~toolRateGenerationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200193} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rategenerationtemplate
     * @param {Number} id RateGenerationTemplate id to get info about
     * @param {module:api/ToolApi~toolRateGenerationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200193}
     */
    this.toolRateGenerationIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateGenerationIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200193;

      return this.apiClient.callApi(
        '/tool/rate_generation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationIdPatch operation.
     * @callback module:api/ToolApi~toolRateGenerationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200193} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies rategenerationtemplate
     * @param {Number} id RateGenerationTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateGenerationTemplate} opts.body RateGenerationTemplate to modify
     * @param {module:api/ToolApi~toolRateGenerationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200193}
     */
    this.toolRateGenerationIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateGenerationIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200193;

      return this.apiClient.callApi(
        '/tool/rate_generation/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationIdStartPost operation.
     * @callback module:api/ToolApi~toolRateGenerationIdStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new rategeneration start
     * @param {Number} id RateGeneration template id to start
     * @param {Object} opts Optional parameters
     * @param {module:model/RateGenerationHistory} opts.body RateGeneration start to create
     * @param {module:api/ToolApi~toolRateGenerationIdStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolRateGenerationIdStartPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateGenerationIdStartPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/rate_generation/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationListGet operation.
     * @callback module:api/ToolApi~toolRateGenerationListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200194} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rategenerationtemplates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {String} opts.name 
     * @param {String} opts.createOnGt 
     * @param {String} opts.createOnLt 
     * @param {String} opts.idIn 
     * @param {String} opts.lastGeneratedGt 
     * @param {String} opts.lastGeneratedLt 
     * @param {module:api/ToolApi~toolRateGenerationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200194}
     */
    this.toolRateGenerationListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'name': opts['name'],
        'create_on_gt': opts['createOnGt'],
        'create_on_lt': opts['createOnLt'],
        'id_in': opts['idIn'],
        'last_generated_gt': opts['lastGeneratedGt'],
        'last_generated_lt': opts['lastGeneratedLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200194;

      return this.apiClient.callApi(
        '/tool/rate_generation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationPost operation.
     * @callback module:api/ToolApi~toolRateGenerationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new rategenerationtemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/RateGenerationTemplate} opts.body RateGenerationTemplate to create
     * @param {module:api/ToolApi~toolRateGenerationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolRateGenerationPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/rate_generation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateGenerationRatesRateGenerationHistoryIdGet operation.
     * @callback module:api/ToolApi~toolRateGenerationRatesRateGenerationHistoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200195} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rategenerationrate
     * @param {Number} rateGenerationHistoryId RateGeneration history id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.code 
     * @param {String} opts.codeName 
     * @param {String} opts.country 
     * @param {Number} opts.generationRateId 
     * @param {Number} opts.timeProfileId 
     * @param {String} opts.effectiveDateGt 
     * @param {String} opts.generationRateIdIn 
     * @param {String} opts.interRateGt 
     * @param {String} opts.interRateLt 
     * @param {String} opts.intraRateGt 
     * @param {String} opts.intraRateLt 
     * @param {String} opts.rateGt 
     * @param {String} opts.rateLt 
     * @param {module:api/ToolApi~toolRateGenerationRatesRateGenerationHistoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200195}
     */
    this.toolRateGenerationRatesRateGenerationHistoryIdGet = function(rateGenerationHistoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'rateGenerationHistoryId' is set
      if (rateGenerationHistoryId === undefined || rateGenerationHistoryId === null) {
        throw new Error("Missing the required parameter 'rateGenerationHistoryId' when calling toolRateGenerationRatesRateGenerationHistoryIdGet");
      }


      var pathParams = {
        'rate_generation_history_id': rateGenerationHistoryId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'code': opts['code'],
        'code_name': opts['codeName'],
        'country': opts['country'],
        'generation_rate_id': opts['generationRateId'],
        'time_profile_id': opts['timeProfileId'],
        'effective_date_gt': opts['effectiveDateGt'],
        'generation_rate_id_in': opts['generationRateIdIn'],
        'inter_rate_gt': opts['interRateGt'],
        'inter_rate_lt': opts['interRateLt'],
        'intra_rate_gt': opts['intraRateGt'],
        'intra_rate_lt': opts['intraRateLt'],
        'rate_gt': opts['rateGt'],
        'rate_lt': opts['rateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200195;

      return this.apiClient.callApi(
        '/tool/rate_generation/rates/{rate_generation_history_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadAllDelete operation.
     * @callback module:api/ToolApi~toolRateUploadAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found rateuploadtask
     * @param {Object} opts Optional parameters
     * @param {String} opts.createDateTimeGt 
     * @param {String} opts.createDateTimeLt 
     * @param {String} opts.endDateTimeGt 
     * @param {String} opts.endDateTimeLt 
     * @param {Number} opts.id 
     * @param {String} opts.idIn 
     * @param {module:model/String} opts.method 
     * @param {String} opts.operatorUser 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.rateTableName 
     * @param {String} opts.startDateTimeGt 
     * @param {String} opts.startDateTimeLt 
     * @param {module:model/String} opts.status 
     * @param {module:api/ToolApi~toolRateUploadAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.toolRateUploadAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'create_date_time_gt': opts['createDateTimeGt'],
        'create_date_time_lt': opts['createDateTimeLt'],
        'end_date_time_gt': opts['endDateTimeGt'],
        'end_date_time_lt': opts['endDateTimeLt'],
        'id': opts['id'],
        'id_in': opts['idIn'],
        'method': opts['method'],
        'operator_user': opts['operatorUser'],
        'rate_table_id': opts['rateTableId'],
        'rate_table_name': opts['rateTableName'],
        'start_date_time_gt': opts['startDateTimeGt'],
        'start_date_time_lt': opts['startDateTimeLt'],
        'status': opts['status']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/tool/rate/upload/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadIdDelete operation.
     * @callback module:api/ToolApi~toolRateUploadIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes rateuploadtask
     * @param {Number} id RateUploadTask id to get info about
     * @param {module:api/ToolApi~toolRateUploadIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.toolRateUploadIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tool/rate/upload/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadIdGet operation.
     * @callback module:api/ToolApi~toolRateUploadIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200198} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rateuploadtask
     * @param {Number} id RateUploadTask id to get info about
     * @param {module:api/ToolApi~toolRateUploadIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200198}
     */
    this.toolRateUploadIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200198;

      return this.apiClient.callApi(
        '/tool/rate/upload/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadIdPatch operation.
     * @callback module:api/ToolApi~toolRateUploadIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200198} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies rateuploadtask
     * @param {Number} id RateUploadTask id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateUploadTask} opts.body RateUploadTask to modify
     * @param {module:api/ToolApi~toolRateUploadIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200198}
     */
    this.toolRateUploadIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200198;

      return this.apiClient.callApi(
        '/tool/rate/upload/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadListGet operation.
     * @callback module:api/ToolApi~toolRateUploadListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rateuploadtask
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {module:model/String} opts.method 
     * @param {String} opts.operatorUser 
     * @param {Number} opts.rateTableId 
     * @param {String} opts.rateTableName 
     * @param {module:model/String} opts.status 
     * @param {String} opts.createDateTimeGt 
     * @param {String} opts.createDateTimeLt 
     * @param {String} opts.endDateTimeGt 
     * @param {String} opts.endDateTimeLt 
     * @param {String} opts.idIn 
     * @param {String} opts.startDateTimeGt 
     * @param {String} opts.startDateTimeLt 
     * @param {module:api/ToolApi~toolRateUploadListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200117}
     */
    this.toolRateUploadListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'method': opts['method'],
        'operator_user': opts['operatorUser'],
        'rate_table_id': opts['rateTableId'],
        'rate_table_name': opts['rateTableName'],
        'status': opts['status'],
        'create_date_time_gt': opts['createDateTimeGt'],
        'create_date_time_lt': opts['createDateTimeLt'],
        'end_date_time_gt': opts['endDateTimeGt'],
        'end_date_time_lt': opts['endDateTimeLt'],
        'id_in': opts['idIn'],
        'start_date_time_gt': opts['startDateTimeGt'],
        'start_date_time_lt': opts['startDateTimeLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200117;

      return this.apiClient.callApi(
        '/tool/rate/upload/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadPost operation.
     * @callback module:api/ToolApi~toolRateUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new rateuploadtask
     * @param {File} rateFile Rate file to upload
     * @param {module:api/ToolApi~toolRateUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolRateUploadPost = function(rateFile, callback) {
      var postBody = null;

      // verify the required parameter 'rateFile' is set
      if (rateFile === undefined || rateFile === null) {
        throw new Error("Missing the required parameter 'rateFile' when calling toolRateUploadPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'rate_file': rateFile
      };

      var authNames = ['auth_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/rate/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadTemplateIdDelete operation.
     * @callback module:api/ToolApi~toolRateUploadTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes rateuploadtemplate
     * @param {Number} id RateUploadTemplate id to get info about
     * @param {module:api/ToolApi~toolRateUploadTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.toolRateUploadTemplateIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadTemplateIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tool/rate_upload_template/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadTemplateIdGet operation.
     * @callback module:api/ToolApi~toolRateUploadTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200199} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rateuploadtemplate
     * @param {Number} id RateUploadTemplate id to get info about
     * @param {module:api/ToolApi~toolRateUploadTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200199}
     */
    this.toolRateUploadTemplateIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadTemplateIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200199;

      return this.apiClient.callApi(
        '/tool/rate_upload_template/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadTemplateIdPatch operation.
     * @callback module:api/ToolApi~toolRateUploadTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200199} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies rateuploadtemplate
     * @param {Number} id RateUploadTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RateUploadTemplateModify} opts.body RateUploadTemplate to modify
     * @param {module:api/ToolApi~toolRateUploadTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200199}
     */
    this.toolRateUploadTemplateIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRateUploadTemplateIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200199;

      return this.apiClient.callApi(
        '/tool/rate_upload_template/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadTemplateListGet operation.
     * @callback module:api/ToolApi~toolRateUploadTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rateuploadtemplate
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.appendPrefixValue 
     * @param {String} opts.createBy 
     * @param {module:model/String} opts.dupMethod 
     * @param {Number} opts.id 
     * @param {String} opts.name 
     * @param {String} opts.endDateGt 
     * @param {String} opts.endDateLt 
     * @param {module:api/ToolApi~toolRateUploadTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200200}
     */
    this.toolRateUploadTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'append_prefix_value': opts['appendPrefixValue'],
        'create_by': opts['createBy'],
        'dup_method': opts['dupMethod'],
        'id': opts['id'],
        'name': opts['name'],
        'end_date_gt': opts['endDateGt'],
        'end_date_lt': opts['endDateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200200;

      return this.apiClient.callApi(
        '/tool/rate_upload_template/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRateUploadTemplatePost operation.
     * @callback module:api/ToolApi~toolRateUploadTemplatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new rateuploadtemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/RateUploadTemplate} opts.body RateUploadTemplate to create
     * @param {module:api/ToolApi~toolRateUploadTemplatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolRateUploadTemplatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/rate_upload_template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRerateIdDelete operation.
     * @callback module:api/ToolApi~toolRerateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes reratecdrtask
     * @param {Number} id RerateCdrTask id to get info about
     * @param {module:api/ToolApi~toolRerateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.toolRerateIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRerateIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tool/rerate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRerateIdGet operation.
     * @callback module:api/ToolApi~toolRerateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200196} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets reratecdrtask
     * @param {Number} id RerateCdrTask id to get info about
     * @param {module:api/ToolApi~toolRerateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200196}
     */
    this.toolRerateIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRerateIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200196;

      return this.apiClient.callApi(
        '/tool/rerate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRerateIdPatch operation.
     * @callback module:api/ToolApi~toolRerateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200196} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies reratecdrtask
     * @param {Number} id RerateCdrTask id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RerateCdrTask} opts.body RerateCdrTask to modify
     * @param {module:api/ToolApi~toolRerateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200196}
     */
    this.toolRerateIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolRerateIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200196;

      return this.apiClient.callApi(
        '/tool/rerate/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolRerateListGet operation.
     * @callback module:api/ToolApi~toolRerateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200197} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets reratecdrtasks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.errCode 
     * @param {Number} opts.id 
     * @param {String} opts.progress 
     * @param {module:model/String} opts.status 
     * @param {String} opts.fromDateGt 
     * @param {String} opts.fromDateLt 
     * @param {String} opts.toDateGt 
     * @param {String} opts.toDateLt 
     * @param {module:api/ToolApi~toolRerateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200197}
     */
    this.toolRerateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'err_code': opts['errCode'],
        'id': opts['id'],
        'progress': opts['progress'],
        'status': opts['status'],
        'from_date_gt': opts['fromDateGt'],
        'from_date_lt': opts['fromDateLt'],
        'to_date_gt': opts['toDateGt'],
        'to_date_lt': opts['toDateLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200197;

      return this.apiClient.callApi(
        '/tool/rerate/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolReratePost operation.
     * @callback module:api/ToolApi~toolReratePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new reratecdrtask
     * @param {Object} opts Optional parameters
     * @param {module:model/RerateCdrTask} opts.body RerateCdrTask to create
     * @param {module:api/ToolApi~toolReratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolReratePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/rerate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSendRateAllDelete operation.
     * @callback module:api/ToolApi~toolSendRateAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found ratesendlog
     * @param {module:api/ToolApi~toolSendRateAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.toolSendRateAllDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/tool/send_rate/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSendRateDetailListGet operation.
     * @callback module:api/ToolApi~toolSendRateDetailListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200203} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratesendlogdetail
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.id 
     * @param {String} opts.sendTo 
     * @param {module:model/String} opts.status 
     * @param {Number} opts.trunkId 
     * @param {String} opts.downloadDateGt 
     * @param {String} opts.downloadDateLt 
     * @param {String} opts.downloadDeadlineGt 
     * @param {String} opts.downloadDeadlineLt 
     * @param {module:api/ToolApi~toolSendRateDetailListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200203}
     */
    this.toolSendRateDetailListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'id': opts['id'],
        'send_to': opts['sendTo'],
        'status': opts['status'],
        'trunk_id': opts['trunkId'],
        'download_date_gt': opts['downloadDateGt'],
        'download_date_lt': opts['downloadDateLt'],
        'download_deadline_gt': opts['downloadDeadlineGt'],
        'download_deadline_lt': opts['downloadDeadlineLt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200203;

      return this.apiClient.callApi(
        '/tool/send_rate/detail_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSendRateIdDownloadGet operation.
     * @callback module:api/ToolApi~toolSendRateIdDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets rate send file
     * @param {Number} id Rate send file id to get info about
     * @param {module:api/ToolApi~toolSendRateIdDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200201}
     */
    this.toolSendRateIdDownloadGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling toolSendRateIdDownloadGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['text/csv', 'application/vnd.ms-excel', 'application/zip'];
      var returnType = InlineResponse200201;

      return this.apiClient.callApi(
        '/tool/send_rate/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSendRateListGet operation.
     * @callback module:api/ToolApi~toolSendRateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ratesendlog
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/ToolApi~toolSendRateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200202}
     */
    this.toolSendRateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200202;

      return this.apiClient.callApi(
        '/tool/send_rate/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSendRatePost operation.
     * @callback module:api/ToolApi~toolSendRatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ratesend
     * @param {Object} opts Optional parameters
     * @param {module:model/RateSend} opts.body RateSend to create
     * @param {module:api/ToolApi~toolSendRatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.toolSendRatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/tool/send_rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toolSimulateCallPost operation.
     * @callback module:api/ToolApi~toolSimulateCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * make simulate call
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientCdrSimulateCall} opts.body Carriers to create
     * @param {module:api/ToolApi~toolSimulateCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallApi}
     */
    this.toolSimulateCallPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CallApi;

      return this.apiClient.callApi(
        '/tool/simulate_call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
