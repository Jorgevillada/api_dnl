/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/C4Lrn', 'model/CarrierTemplate', 'model/CarrierTemplateModify', 'model/CodeCountry', 'model/DailyCdrField', 'model/DailyCdrFieldAutoEditMany', 'model/DailyCdrFieldEditMany', 'model/EgressTrunkTemplate', 'model/ExportCreate', 'model/FtpConf', 'model/FtpConfActivate', 'model/GlobalFailover', 'model/GlobalFailoverMany', 'model/GlobalFailoverModify', 'model/GlobalRouteErrorMany', 'model/GlobalRouteErrorModify', 'model/IngressTrunkTemplate', 'model/InlineResponse2002', 'model/InlineResponse20040', 'model/InlineResponse20041', 'model/InlineResponse20042', 'model/InlineResponse20043', 'model/InlineResponse20044', 'model/InlineResponse20045', 'model/InlineResponse20046', 'model/InlineResponse20047', 'model/InlineResponse20048', 'model/InlineResponse20049', 'model/InlineResponse20050', 'model/InlineResponse20051', 'model/InlineResponse20052', 'model/InlineResponse20053', 'model/InlineResponse20054', 'model/InlineResponse20055', 'model/InlineResponse20056', 'model/InlineResponse20057', 'model/InlineResponse20058', 'model/InlineResponse20059', 'model/InlineResponse20060', 'model/InlineResponse20061', 'model/InlineResponse20062', 'model/InlineResponse20063', 'model/InlineResponse20064', 'model/InlineResponse20065', 'model/InlineResponse20066', 'model/InlineResponse20067', 'model/InlineResponse20068', 'model/InlineResponse20069', 'model/InlineResponse20070', 'model/InlineResponse20071', 'model/InlineResponse20072', 'model/InlineResponse20073', 'model/InlineResponse20074', 'model/InlineResponse20075', 'model/InlineResponse20076', 'model/InlineResponse20077', 'model/InlineResponse20078', 'model/InlineResponse20079', 'model/InlineResponse20080', 'model/InlineResponse20081', 'model/InlineResponse20082', 'model/InlineResponse20083', 'model/InlineResponse20084', 'model/InlineResponse20085', 'model/InlineResponse20086', 'model/JurisdictionPrefix', 'model/MailSender', 'model/MailSenderModify', 'model/MailSenderTest', 'model/MailTemplate', 'model/ObjectCreated', 'model/ObjectNotFoundError', 'model/OperationError', 'model/OriginationFailoverMany', 'model/OriginationFailoverModify', 'model/PaymentTerm', 'model/ResourceFromTemplate', 'model/Role', 'model/RolePrivilege', 'model/SendRateTemplate', 'model/SendRateTemplateModify', 'model/Success', 'model/SystemFunction', 'model/SystemParameterInvoiceSetting', 'model/SystemParameterLoginPage', 'model/SystemParameterPaymentSetting', 'model/SystemParameterSystemEmails', 'model/SystemParameterSystemSetting', 'model/SystemParameterSystemTimeouts', 'model/TerminationFailoverMany', 'model/TerminationFailoverModify', 'model/TimeProfile', 'model/UnauthenticatedError', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/C4Lrn'), require('../model/CarrierTemplate'), require('../model/CarrierTemplateModify'), require('../model/CodeCountry'), require('../model/DailyCdrField'), require('../model/DailyCdrFieldAutoEditMany'), require('../model/DailyCdrFieldEditMany'), require('../model/EgressTrunkTemplate'), require('../model/ExportCreate'), require('../model/FtpConf'), require('../model/FtpConfActivate'), require('../model/GlobalFailover'), require('../model/GlobalFailoverMany'), require('../model/GlobalFailoverModify'), require('../model/GlobalRouteErrorMany'), require('../model/GlobalRouteErrorModify'), require('../model/IngressTrunkTemplate'), require('../model/InlineResponse2002'), require('../model/InlineResponse20040'), require('../model/InlineResponse20041'), require('../model/InlineResponse20042'), require('../model/InlineResponse20043'), require('../model/InlineResponse20044'), require('../model/InlineResponse20045'), require('../model/InlineResponse20046'), require('../model/InlineResponse20047'), require('../model/InlineResponse20048'), require('../model/InlineResponse20049'), require('../model/InlineResponse20050'), require('../model/InlineResponse20051'), require('../model/InlineResponse20052'), require('../model/InlineResponse20053'), require('../model/InlineResponse20054'), require('../model/InlineResponse20055'), require('../model/InlineResponse20056'), require('../model/InlineResponse20057'), require('../model/InlineResponse20058'), require('../model/InlineResponse20059'), require('../model/InlineResponse20060'), require('../model/InlineResponse20061'), require('../model/InlineResponse20062'), require('../model/InlineResponse20063'), require('../model/InlineResponse20064'), require('../model/InlineResponse20065'), require('../model/InlineResponse20066'), require('../model/InlineResponse20067'), require('../model/InlineResponse20068'), require('../model/InlineResponse20069'), require('../model/InlineResponse20070'), require('../model/InlineResponse20071'), require('../model/InlineResponse20072'), require('../model/InlineResponse20073'), require('../model/InlineResponse20074'), require('../model/InlineResponse20075'), require('../model/InlineResponse20076'), require('../model/InlineResponse20077'), require('../model/InlineResponse20078'), require('../model/InlineResponse20079'), require('../model/InlineResponse20080'), require('../model/InlineResponse20081'), require('../model/InlineResponse20082'), require('../model/InlineResponse20083'), require('../model/InlineResponse20084'), require('../model/InlineResponse20085'), require('../model/InlineResponse20086'), require('../model/JurisdictionPrefix'), require('../model/MailSender'), require('../model/MailSenderModify'), require('../model/MailSenderTest'), require('../model/MailTemplate'), require('../model/ObjectCreated'), require('../model/ObjectNotFoundError'), require('../model/OperationError'), require('../model/OriginationFailoverMany'), require('../model/OriginationFailoverModify'), require('../model/PaymentTerm'), require('../model/ResourceFromTemplate'), require('../model/Role'), require('../model/RolePrivilege'), require('../model/SendRateTemplate'), require('../model/SendRateTemplateModify'), require('../model/Success'), require('../model/SystemFunction'), require('../model/SystemParameterInvoiceSetting'), require('../model/SystemParameterLoginPage'), require('../model/SystemParameterPaymentSetting'), require('../model/SystemParameterSystemEmails'), require('../model/SystemParameterSystemSetting'), require('../model/SystemParameterSystemTimeouts'), require('../model/TerminationFailoverMany'), require('../model/TerminationFailoverModify'), require('../model/TimeProfile'), require('../model/UnauthenticatedError'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.ConfigApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.C4Lrn, root.DnlApi.CarrierTemplate, root.DnlApi.CarrierTemplateModify, root.DnlApi.CodeCountry, root.DnlApi.DailyCdrField, root.DnlApi.DailyCdrFieldAutoEditMany, root.DnlApi.DailyCdrFieldEditMany, root.DnlApi.EgressTrunkTemplate, root.DnlApi.ExportCreate, root.DnlApi.FtpConf, root.DnlApi.FtpConfActivate, root.DnlApi.GlobalFailover, root.DnlApi.GlobalFailoverMany, root.DnlApi.GlobalFailoverModify, root.DnlApi.GlobalRouteErrorMany, root.DnlApi.GlobalRouteErrorModify, root.DnlApi.IngressTrunkTemplate, root.DnlApi.InlineResponse2002, root.DnlApi.InlineResponse20040, root.DnlApi.InlineResponse20041, root.DnlApi.InlineResponse20042, root.DnlApi.InlineResponse20043, root.DnlApi.InlineResponse20044, root.DnlApi.InlineResponse20045, root.DnlApi.InlineResponse20046, root.DnlApi.InlineResponse20047, root.DnlApi.InlineResponse20048, root.DnlApi.InlineResponse20049, root.DnlApi.InlineResponse20050, root.DnlApi.InlineResponse20051, root.DnlApi.InlineResponse20052, root.DnlApi.InlineResponse20053, root.DnlApi.InlineResponse20054, root.DnlApi.InlineResponse20055, root.DnlApi.InlineResponse20056, root.DnlApi.InlineResponse20057, root.DnlApi.InlineResponse20058, root.DnlApi.InlineResponse20059, root.DnlApi.InlineResponse20060, root.DnlApi.InlineResponse20061, root.DnlApi.InlineResponse20062, root.DnlApi.InlineResponse20063, root.DnlApi.InlineResponse20064, root.DnlApi.InlineResponse20065, root.DnlApi.InlineResponse20066, root.DnlApi.InlineResponse20067, root.DnlApi.InlineResponse20068, root.DnlApi.InlineResponse20069, root.DnlApi.InlineResponse20070, root.DnlApi.InlineResponse20071, root.DnlApi.InlineResponse20072, root.DnlApi.InlineResponse20073, root.DnlApi.InlineResponse20074, root.DnlApi.InlineResponse20075, root.DnlApi.InlineResponse20076, root.DnlApi.InlineResponse20077, root.DnlApi.InlineResponse20078, root.DnlApi.InlineResponse20079, root.DnlApi.InlineResponse20080, root.DnlApi.InlineResponse20081, root.DnlApi.InlineResponse20082, root.DnlApi.InlineResponse20083, root.DnlApi.InlineResponse20084, root.DnlApi.InlineResponse20085, root.DnlApi.InlineResponse20086, root.DnlApi.JurisdictionPrefix, root.DnlApi.MailSender, root.DnlApi.MailSenderModify, root.DnlApi.MailSenderTest, root.DnlApi.MailTemplate, root.DnlApi.ObjectCreated, root.DnlApi.ObjectNotFoundError, root.DnlApi.OperationError, root.DnlApi.OriginationFailoverMany, root.DnlApi.OriginationFailoverModify, root.DnlApi.PaymentTerm, root.DnlApi.ResourceFromTemplate, root.DnlApi.Role, root.DnlApi.RolePrivilege, root.DnlApi.SendRateTemplate, root.DnlApi.SendRateTemplateModify, root.DnlApi.Success, root.DnlApi.SystemFunction, root.DnlApi.SystemParameterInvoiceSetting, root.DnlApi.SystemParameterLoginPage, root.DnlApi.SystemParameterPaymentSetting, root.DnlApi.SystemParameterSystemEmails, root.DnlApi.SystemParameterSystemSetting, root.DnlApi.SystemParameterSystemTimeouts, root.DnlApi.TerminationFailoverMany, root.DnlApi.TerminationFailoverModify, root.DnlApi.TimeProfile, root.DnlApi.UnauthenticatedError, root.DnlApi.ValidationError);
  }
}(this, function(ApiClient, AttributeNotExists, C4Lrn, CarrierTemplate, CarrierTemplateModify, CodeCountry, DailyCdrField, DailyCdrFieldAutoEditMany, DailyCdrFieldEditMany, EgressTrunkTemplate, ExportCreate, FtpConf, FtpConfActivate, GlobalFailover, GlobalFailoverMany, GlobalFailoverModify, GlobalRouteErrorMany, GlobalRouteErrorModify, IngressTrunkTemplate, InlineResponse2002, InlineResponse20040, InlineResponse20041, InlineResponse20042, InlineResponse20043, InlineResponse20044, InlineResponse20045, InlineResponse20046, InlineResponse20047, InlineResponse20048, InlineResponse20049, InlineResponse20050, InlineResponse20051, InlineResponse20052, InlineResponse20053, InlineResponse20054, InlineResponse20055, InlineResponse20056, InlineResponse20057, InlineResponse20058, InlineResponse20059, InlineResponse20060, InlineResponse20061, InlineResponse20062, InlineResponse20063, InlineResponse20064, InlineResponse20065, InlineResponse20066, InlineResponse20067, InlineResponse20068, InlineResponse20069, InlineResponse20070, InlineResponse20071, InlineResponse20072, InlineResponse20073, InlineResponse20074, InlineResponse20075, InlineResponse20076, InlineResponse20077, InlineResponse20078, InlineResponse20079, InlineResponse20080, InlineResponse20081, InlineResponse20082, InlineResponse20083, InlineResponse20084, InlineResponse20085, InlineResponse20086, JurisdictionPrefix, MailSender, MailSenderModify, MailSenderTest, MailTemplate, ObjectCreated, ObjectNotFoundError, OperationError, OriginationFailoverMany, OriginationFailoverModify, PaymentTerm, ResourceFromTemplate, Role, RolePrivilege, SendRateTemplate, SendRateTemplateModify, Success, SystemFunction, SystemParameterInvoiceSetting, SystemParameterLoginPage, SystemParameterPaymentSetting, SystemParameterSystemEmails, SystemParameterSystemSetting, SystemParameterSystemTimeouts, TerminationFailoverMany, TerminationFailoverModify, TimeProfile, UnauthenticatedError, ValidationError) {
  'use strict';

  /**
   * Config service.
   * @module api/ConfigApi
   * @version 1.2.62
   */

  /**
   * Constructs a new ConfigApi. 
   * @alias module:api/ConfigApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the configAutoCdrFormatEditPatch operation.
     * @callback module:api/ConfigApi~configAutoCdrFormatEditPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/DailyCdrFieldAutoEditMany} opts.body CdrFieldsToModify
     * @param {module:api/ConfigApi~configAutoCdrFormatEditPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configAutoCdrFormatEditPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/auto_cdr_format/edit', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateAllDelete operation.
     * @callback module:api/ConfigApi~configCarrierTemplateAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found carriertemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.createBy 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {Number} opts.id 
     * @param {String} opts.idIn 
     * @param {String} opts.templateName 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {Number} opts.usedBy 
     * @param {module:api/ConfigApi~configCarrierTemplateAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configCarrierTemplateAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'create_by': opts['createBy'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'id': opts['id'],
        'id_in': opts['idIn'],
        'template_name': opts['templateName'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
        'used_by': opts['usedBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/carrier_template/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateCreatePost operation.
     * @callback module:api/ConfigApi~configCarrierTemplateCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new carriertemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierTemplate} opts.body CarrierTemplate to create
     * @param {module:api/ConfigApi~configCarrierTemplateCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configCarrierTemplateCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/carrier_template/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateIdDelete operation.
     * @callback module:api/ConfigApi~configCarrierTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes carriertemplate
     * @param {Number} id CarrierTemplate id to get info about
     * @param {module:api/ConfigApi~configCarrierTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configCarrierTemplateIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCarrierTemplateIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/carrier_template/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateIdGet operation.
     * @callback module:api/ConfigApi~configCarrierTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carriertemplate
     * @param {Number} id CarrierTemplate id to get info about
     * @param {module:api/ConfigApi~configCarrierTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20081}
     */
    this.configCarrierTemplateIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCarrierTemplateIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/config/carrier_template/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateIdPatch operation.
     * @callback module:api/ConfigApi~configCarrierTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies carriertemplate
     * @param {Number} id CarrierTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CarrierTemplateModify} opts.body CarrierTemplate to modify
     * @param {module:api/ConfigApi~configCarrierTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20081}
     */
    this.configCarrierTemplateIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCarrierTemplateIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/config/carrier_template/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCarrierTemplateListGet operation.
     * @callback module:api/ConfigApi~configCarrierTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets carriertemplates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {Number} opts.id 
     * @param {String} opts.templateName 
     * @param {Number} opts.usedBy 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {String} opts.idIn 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {module:api/ConfigApi~configCarrierTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    this.configCarrierTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'id': opts['id'],
        'template_name': opts['templateName'],
        'used_by': opts['usedBy'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'id_in': opts['idIn'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20082;

      return this.apiClient.callApi(
        '/config/carrier_template/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityCreatePost operation.
     * @callback module:api/ConfigApi~configCdrVisibilityCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new cdr_visibility
     * @param {Object} opts Optional parameters
     * @param {module:model/DailyCdrField} opts.body CDR_Visibility to create
     * @param {module:api/ConfigApi~configCdrVisibilityCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configCdrVisibilityCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/cdr_visibility/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityEditPatch operation.
     * @callback module:api/ConfigApi~configCdrVisibilityEditPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/DailyCdrFieldEditMany} opts.body CdrFieldsToModify
     * @param {module:api/ConfigApi~configCdrVisibilityEditPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configCdrVisibilityEditPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/cdr_visibility/edit', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityIdDelete operation.
     * @callback module:api/ConfigApi~configCdrVisibilityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes cdr_visibility
     * @param {Number} id CDR_Visibility id to get info about
     * @param {module:api/ConfigApi~configCdrVisibilityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configCdrVisibilityIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCdrVisibilityIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/cdr_visibility/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityIdGet operation.
     * @callback module:api/ConfigApi~configCdrVisibilityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets cdr_visibility
     * @param {Number} id CDR_Visibility id to get info about
     * @param {module:api/ConfigApi~configCdrVisibilityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    this.configCdrVisibilityIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCdrVisibilityIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20060;

      return this.apiClient.callApi(
        '/config/cdr_visibility/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityIdPatch operation.
     * @callback module:api/ConfigApi~configCdrVisibilityIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies cdr_visibility
     * @param {Number} id CDR_Visibility id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/DailyCdrField} opts.body CDR_Visibility to modify
     * @param {module:api/ConfigApi~configCdrVisibilityIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    this.configCdrVisibilityIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configCdrVisibilityIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20060;

      return this.apiClient.callApi(
        '/config/cdr_visibility/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCdrVisibilityListGet operation.
     * @callback module:api/ConfigApi~configCdrVisibilityListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20061} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets cdr_visibility fields
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.dbName 
     * @param {String} opts.displayName 
     * @param {module:api/ConfigApi~configCdrVisibilityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20061}
     */
    this.configCdrVisibilityListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'db_name': opts['dbName'],
        'display_name': opts['displayName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20061;

      return this.apiClient.callApi(
        '/config/cdr_visibility/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCountryCreatePost operation.
     * @callback module:api/ConfigApi~configCountryCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new codecountry
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeCountry} opts.body CodeCountry to create
     * @param {module:api/ConfigApi~configCountryCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configCountryCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/country/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCountryListGet operation.
     * @callback module:api/ConfigApi~configCountryListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20042} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codecountrys
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.country 
     * @param {String} opts.countryCode 
     * @param {module:api/ConfigApi~configCountryListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20042}
     */
    this.configCountryListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'country': opts['country'],
        'country_code': opts['countryCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/config/country/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCountryTimeProfileIdDelete operation.
     * @callback module:api/ConfigApi~configCountryTimeProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes codecountry
     * @param {String} countryCode CodeCountry id to get info about
     * @param {module:api/ConfigApi~configCountryTimeProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configCountryTimeProfileIdDelete = function(countryCode, callback) {
      var postBody = null;

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling configCountryTimeProfileIdDelete");
      }


      var pathParams = {
        'country_code': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/country/{time_profile_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCountryTimeProfileIdGet operation.
     * @callback module:api/ConfigApi~configCountryTimeProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets codecountry
     * @param {String} countryCode CodeCountry id to get info about
     * @param {module:api/ConfigApi~configCountryTimeProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20041}
     */
    this.configCountryTimeProfileIdGet = function(countryCode, callback) {
      var postBody = null;

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling configCountryTimeProfileIdGet");
      }


      var pathParams = {
        'country_code': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/config/country/{time_profile_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configCountryTimeProfileIdPatch operation.
     * @callback module:api/ConfigApi~configCountryTimeProfileIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies codecountry
     * @param {String} countryCode CodeCountry id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeCountry} opts.body CodeCountry to modify
     * @param {module:api/ConfigApi~configCountryTimeProfileIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20041}
     */
    this.configCountryTimeProfileIdPatch = function(countryCode, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling configCountryTimeProfileIdPatch");
      }


      var pathParams = {
        'country_code': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/config/country/{time_profile_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateAllDelete operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found egresstrunktemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.createBy 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {String} opts.name 
     * @param {Number} opts.resourceTemplateId 
     * @param {String} opts.resourceTemplateIdIn 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {Number} opts.usedByGt 
     * @param {module:api/ConfigApi~configEgressTrunkTemplateAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configEgressTrunkTemplateAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'create_by': opts['createBy'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'name': opts['name'],
        'resource_template_id': opts['resourceTemplateId'],
        'resource_template_id_in': opts['resourceTemplateIdIn'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
        'used_by_gt': opts['usedByGt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateApplyResourceTemplateIdClientIdPost operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateApplyResourceTemplateIdClientIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new egresstrunk
     * @param {Number} clientId Parent carrier
     * @param {Number} resourceTemplateId Template
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceFromTemplate} opts.body EgressTrunk to create
     * @param {module:api/ConfigApi~configEgressTrunkTemplateApplyResourceTemplateIdClientIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configEgressTrunkTemplateApplyResourceTemplateIdClientIdPost = function(clientId, resourceTemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling configEgressTrunkTemplateApplyResourceTemplateIdClientIdPost");
      }

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configEgressTrunkTemplateApplyResourceTemplateIdClientIdPost");
      }


      var pathParams = {
        'client_id': clientId,
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/apply/{resource_template_id}/{client_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateCreatePost operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new egresstrunktemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressTrunkTemplate} opts.body EgressTrunkTemplate to create
     * @param {module:api/ConfigApi~configEgressTrunkTemplateCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configEgressTrunkTemplateCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateListGet operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egresstrunktemplates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {String} opts.name 
     * @param {Number} opts.resourceTemplateId 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {String} opts.resourceTemplateIdIn 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {Number} opts.usedByGt 
     * @param {module:api/ConfigApi~configEgressTrunkTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    this.configEgressTrunkTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'name': opts['name'],
        'resource_template_id': opts['resourceTemplateId'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'resource_template_id_in': opts['resourceTemplateIdIn'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
        'used_by_gt': opts['usedByGt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateResourceTemplateIdDelete operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes egresstrunktemplate
     * @param {Number} resourceTemplateId EgressTrunkTemplate id to get info about
     * @param {module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configEgressTrunkTemplateResourceTemplateIdDelete = function(resourceTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configEgressTrunkTemplateResourceTemplateIdDelete");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/{resource_template_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateResourceTemplateIdGet operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets egresstrunktemplate
     * @param {Number} resourceTemplateId EgressTrunkTemplate id to get info about
     * @param {module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    this.configEgressTrunkTemplateResourceTemplateIdGet = function(resourceTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configEgressTrunkTemplateResourceTemplateIdGet");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/{resource_template_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEgressTrunkTemplateResourceTemplateIdPatch operation.
     * @callback module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies egresstrunktemplate
     * @param {Number} resourceTemplateId EgressTrunkTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/EgressTrunkTemplate} opts.body EgressTrunkTemplate to modify
     * @param {module:api/ConfigApi~configEgressTrunkTemplateResourceTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    this.configEgressTrunkTemplateResourceTemplateIdPatch = function(resourceTemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configEgressTrunkTemplateResourceTemplateIdPatch");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/config/egress_trunk_template/{resource_template_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEmailsGet operation.
     * @callback module:api/ConfigApi~configEmailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - system emails
     * @param {module:api/ConfigApi~configEmailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20077}
     */
    this.configEmailsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/config/emails', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configEmailsPatch operation.
     * @callback module:api/ConfigApi~configEmailsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - system emails
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterSystemEmails} opts.body SystemParameter - System emails to modify
     * @param {module:api/ConfigApi~configEmailsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20077}
     */
    this.configEmailsPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/config/emails', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configExportErrorsIdGet operation.
     * @callback module:api/ConfigApi~configExportErrorsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets export eror file
     * @param {Number} id Export eror file id to get info about
     * @param {module:api/ConfigApi~configExportErrorsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    this.configExportErrorsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configExportErrorsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/config/export_errors/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configExportIdGet operation.
     * @callback module:api/ConfigApi~configExportIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets export file
     * @param {Number} id Export file id to get info about
     * @param {module:api/ConfigApi~configExportIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    this.configExportIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configExportIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'image/ico', 'image/jpg', 'image/png', 'text/csv'];
      var returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/config/export/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configExportPost operation.
     * @callback module:api/ConfigApi~configExportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new doing export 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExportCreate} opts.body Doing export  to create
     * @param {module:api/ConfigApi~configExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configExportPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/export', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configExportPublicIdGet operation.
     * @callback module:api/ConfigApi~configExportPublicIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets export file
     * @param {Number} id Export file id to get info about
     * @param {module:api/ConfigApi~configExportPublicIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    this.configExportPublicIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configExportPublicIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'image/ico', 'image/jpg', 'image/png', 'text/csv'];
      var returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/config/export/public/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalCreatePost operation.
     * @callback module:api/ConfigApi~configFailoverGlobalCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new globalfailover
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalFailover} opts.body GlobalFailover to create
     * @param {module:api/ConfigApi~configFailoverGlobalCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configFailoverGlobalCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/failover/global/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalIdDelete operation.
     * @callback module:api/ConfigApi~configFailoverGlobalIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes globalfailover
     * @param {Number} id GlobalFailover id to get info about
     * @param {module:api/ConfigApi~configFailoverGlobalIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configFailoverGlobalIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverGlobalIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/failover/global/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalIdGet operation.
     * @callback module:api/ConfigApi~configFailoverGlobalIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20064} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets globalfailover
     * @param {Number} id GlobalFailover id to get info about
     * @param {module:api/ConfigApi~configFailoverGlobalIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20064}
     */
    this.configFailoverGlobalIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverGlobalIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20064;

      return this.apiClient.callApi(
        '/config/failover/global/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalIdPatch operation.
     * @callback module:api/ConfigApi~configFailoverGlobalIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20064} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies globalfailover
     * @param {Number} id GlobalFailover id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalFailoverModify} opts.body GlobalFailover to modify
     * @param {module:api/ConfigApi~configFailoverGlobalIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20064}
     */
    this.configFailoverGlobalIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverGlobalIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20064;

      return this.apiClient.callApi(
        '/config/failover/global/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalListGet operation.
     * @callback module:api/ConfigApi~configFailoverGlobalListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20065} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets globalfailovers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.failoverMethod 
     * @param {String} opts.returnClause 
     * @param {Number} opts.returnCode 
     * @param {module:api/ConfigApi~configFailoverGlobalListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20065}
     */
    this.configFailoverGlobalListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'failover_method': opts['failoverMethod'],
        'return_clause': opts['returnClause'],
        'return_code': opts['returnCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/config/failover/global/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverGlobalPatch operation.
     * @callback module:api/ConfigApi~configFailoverGlobalPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalFailoverMany} opts.body Global Failover items
     * @param {module:api/ConfigApi~configFailoverGlobalPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configFailoverGlobalPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/failover/global', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverOriginationIdGet operation.
     * @callback module:api/ConfigApi~configFailoverOriginationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets originationfailover
     * @param {Number} id OriginationFailover id to get info about
     * @param {module:api/ConfigApi~configFailoverOriginationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20068}
     */
    this.configFailoverOriginationIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverOriginationIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/config/failover/origination/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverOriginationIdPatch operation.
     * @callback module:api/ConfigApi~configFailoverOriginationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies originationfailover
     * @param {Number} id OriginationFailover id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/OriginationFailoverModify} opts.body OriginationFailover to modify
     * @param {module:api/ConfigApi~configFailoverOriginationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20068}
     */
    this.configFailoverOriginationIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverOriginationIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/config/failover/origination/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverOriginationListGet operation.
     * @callback module:api/ConfigApi~configFailoverOriginationListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets originationfailovers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.failoverMethod 
     * @param {Number} opts.id 
     * @param {String} opts.returnClause 
     * @param {Number} opts.returnCode 
     * @param {module:api/ConfigApi~configFailoverOriginationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20069}
     */
    this.configFailoverOriginationListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'failover_method': opts['failoverMethod'],
        'id': opts['id'],
        'return_clause': opts['returnClause'],
        'return_code': opts['returnCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/config/failover/origination/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverOriginationPatch operation.
     * @callback module:api/ConfigApi~configFailoverOriginationPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/OriginationFailoverMany} opts.body Origination Failover items
     * @param {module:api/ConfigApi~configFailoverOriginationPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configFailoverOriginationPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/failover/origination', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverTerminationIdGet operation.
     * @callback module:api/ConfigApi~configFailoverTerminationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20066} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets terminationfailover
     * @param {Number} id TerminationFailover id to get info about
     * @param {module:api/ConfigApi~configFailoverTerminationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20066}
     */
    this.configFailoverTerminationIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverTerminationIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20066;

      return this.apiClient.callApi(
        '/config/failover/termination/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverTerminationIdPatch operation.
     * @callback module:api/ConfigApi~configFailoverTerminationIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20066} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies terminationfailover
     * @param {Number} id TerminationFailover id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/TerminationFailoverModify} opts.body TerminationFailover to modify
     * @param {module:api/ConfigApi~configFailoverTerminationIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20066}
     */
    this.configFailoverTerminationIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFailoverTerminationIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20066;

      return this.apiClient.callApi(
        '/config/failover/termination/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverTerminationListGet operation.
     * @callback module:api/ConfigApi~configFailoverTerminationListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20067} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets terminationfailovers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:model/String} opts.failoverMethod 
     * @param {String} opts.returnClause 
     * @param {Number} opts.returnCode 
     * @param {module:api/ConfigApi~configFailoverTerminationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20067}
     */
    this.configFailoverTerminationListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'failover_method': opts['failoverMethod'],
        'return_clause': opts['returnClause'],
        'return_code': opts['returnCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20067;

      return this.apiClient.callApi(
        '/config/failover/termination/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFailoverTerminationPatch operation.
     * @callback module:api/ConfigApi~configFailoverTerminationPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/TerminationFailoverMany} opts.body Termination Failover items
     * @param {module:api/ConfigApi~configFailoverTerminationPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configFailoverTerminationPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/failover/termination', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpAllDelete operation.
     * @callback module:api/ConfigApi~configFtpAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found ftpconf
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.active 
     * @param {String} opts.ftpServerIp 
     * @param {String} opts.name 
     * @param {String} opts.time 
     * @param {String} opts.timeGt 
     * @param {String} opts.timeLt 
     * @param {module:api/ConfigApi~configFtpAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configFtpAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'ftp_server_ip': opts['ftpServerIp'],
        'name': opts['name'],
        'time': opts['time'],
        'time_gt': opts['timeGt'],
        'time_lt': opts['timeLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/ftp/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpAllPatch operation.
     * @callback module:api/ConfigApi~configFtpAllPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies multiple found ftpconf
     * @param {Object} opts Optional parameters
     * @param {module:model/FtpConfActivate} opts.body FtpConf to modify
     * @param {Boolean} opts.active 
     * @param {String} opts.ftpServerIp 
     * @param {String} opts.name 
     * @param {String} opts.time 
     * @param {String} opts.timeGt 
     * @param {String} opts.timeLt 
     * @param {module:api/ConfigApi~configFtpAllPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configFtpAllPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'active': opts['active'],
        'ftp_server_ip': opts['ftpServerIp'],
        'name': opts['name'],
        'time': opts['time'],
        'time_gt': opts['timeGt'],
        'time_lt': opts['timeLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/ftp/all', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpCreatePost operation.
     * @callback module:api/ConfigApi~configFtpCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ftpconf
     * @param {Object} opts Optional parameters
     * @param {module:model/FtpConf} opts.body FtpConf to create
     * @param {module:api/ConfigApi~configFtpCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configFtpCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/ftp/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpIdDelete operation.
     * @callback module:api/ConfigApi~configFtpIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes ftpconf
     * @param {Number} id FtpConf id to get info about
     * @param {module:api/ConfigApi~configFtpIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configFtpIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFtpIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/ftp/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpIdGet operation.
     * @callback module:api/ConfigApi~configFtpIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ftpconf
     * @param {Number} id FtpConf id to get info about
     * @param {module:api/ConfigApi~configFtpIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20070}
     */
    this.configFtpIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFtpIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/config/ftp/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpIdPatch operation.
     * @callback module:api/ConfigApi~configFtpIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies ftpconf
     * @param {Number} id FtpConf id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/FtpConf} opts.body FtpConf to modify
     * @param {module:api/ConfigApi~configFtpIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20070}
     */
    this.configFtpIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configFtpIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/config/ftp/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configFtpListGet operation.
     * @callback module:api/ConfigApi~configFtpListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ftpconfs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Boolean} opts.active 
     * @param {String} opts.ftpServerIp 
     * @param {String} opts.name 
     * @param {String} opts.time 
     * @param {String} opts.timeGt 
     * @param {String} opts.timeLt 
     * @param {module:api/ConfigApi~configFtpListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20071}
     */
    this.configFtpListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'active': opts['active'],
        'ftp_server_ip': opts['ftpServerIp'],
        'name': opts['name'],
        'time': opts['time'],
        'time_gt': opts['timeGt'],
        'time_lt': opts['timeLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/config/ftp/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configImportIdKillPost operation.
     * @callback module:api/ConfigApi~configImportIdKillPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id Import job id to stop
     * @param {module:api/ConfigApi~configImportIdKillPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configImportIdKillPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configImportIdKillPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/import/{id}/kill', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configImportIdRunPost operation.
     * @callback module:api/ConfigApi~configImportIdRunPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id Import job id to run
     * @param {module:api/ConfigApi~configImportIdRunPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configImportIdRunPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configImportIdRunPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/import/{id}/run', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configImportPost operation.
     * @callback module:api/ConfigApi~configImportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new doing import
     * @param {String} entity Entity to import
     * @param {module:model/String} format format
     * @param {File} file File to upload
     * @param {Object} opts Optional parameters
     * @param {String} opts.ignoreFields comma separated list of fields to ignore from import
     * @param {String} opts.replaceFields comma separated list of fields to replace from import
     * @param {String} opts.replaceValues comma separated list of values  for replace from import
     * @param {Boolean} opts.deleteDublicates If set, will override rows with dublicate values of this field
     * @param {module:api/ConfigApi~configImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configImportPost = function(entity, format, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling configImportPost");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling configImportPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling configImportPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'entity': entity,
        'format': format,
        'file': file,
        'ignore_fields': opts['ignoreFields'],
        'replace_fields': opts['replaceFields'],
        'replace_values': opts['replaceValues'],
        'delete_dublicates': opts['deleteDublicates']
      };

      var authNames = ['auth_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateAllDelete operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found ingresstrunktemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.createBy 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {String} opts.name 
     * @param {Number} opts.resourceTemplateId 
     * @param {String} opts.resourceTemplateIdIn 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {Number} opts.usedByGt 
     * @param {module:api/ConfigApi~configIngressTrunkTemplateAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configIngressTrunkTemplateAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'create_by': opts['createBy'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'name': opts['name'],
        'resource_template_id': opts['resourceTemplateId'],
        'resource_template_id_in': opts['resourceTemplateIdIn'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
        'used_by_gt': opts['usedByGt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateApplyResourceTemplateIdClientIdPost operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateApplyResourceTemplateIdClientIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ingresstrunk
     * @param {Number} clientId Parent carrier
     * @param {Number} resourceTemplateId Template
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceFromTemplate} opts.body IngressTrunk to create
     * @param {module:api/ConfigApi~configIngressTrunkTemplateApplyResourceTemplateIdClientIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configIngressTrunkTemplateApplyResourceTemplateIdClientIdPost = function(clientId, resourceTemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling configIngressTrunkTemplateApplyResourceTemplateIdClientIdPost");
      }

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configIngressTrunkTemplateApplyResourceTemplateIdClientIdPost");
      }


      var pathParams = {
        'client_id': clientId,
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/apply/{resource_template_id}/{client_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateCreatePost operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new ingresstrunktemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/IngressTrunkTemplate} opts.body IngressTrunkTemplate to create
     * @param {module:api/ConfigApi~configIngressTrunkTemplateCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configIngressTrunkTemplateCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateListGet operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingresstrunktemplates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.createBy 
     * @param {String} opts.name 
     * @param {Number} opts.resourceTemplateId 
     * @param {String} opts.createOnGte 
     * @param {String} opts.createOnLt 
     * @param {String} opts.resourceTemplateIdIn 
     * @param {String} opts.updateOnGte 
     * @param {String} opts.updateOnLt 
     * @param {Number} opts.usedByGt 
     * @param {module:api/ConfigApi~configIngressTrunkTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20086}
     */
    this.configIngressTrunkTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'create_by': opts['createBy'],
        'name': opts['name'],
        'resource_template_id': opts['resourceTemplateId'],
        'create_on_gte': opts['createOnGte'],
        'create_on_lt': opts['createOnLt'],
        'resource_template_id_in': opts['resourceTemplateIdIn'],
        'update_on_gte': opts['updateOnGte'],
        'update_on_lt': opts['updateOnLt'],
        'used_by_gt': opts['usedByGt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20086;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateResourceTemplateIdDelete operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes ingresstrunktemplate
     * @param {Number} resourceTemplateId IngressTrunkTemplate id to get info about
     * @param {module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configIngressTrunkTemplateResourceTemplateIdDelete = function(resourceTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configIngressTrunkTemplateResourceTemplateIdDelete");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/{resource_template_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateResourceTemplateIdGet operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets ingresstrunktemplate
     * @param {Number} resourceTemplateId IngressTrunkTemplate id to get info about
     * @param {module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20085}
     */
    this.configIngressTrunkTemplateResourceTemplateIdGet = function(resourceTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configIngressTrunkTemplateResourceTemplateIdGet");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/{resource_template_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configIngressTrunkTemplateResourceTemplateIdPatch operation.
     * @callback module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies ingresstrunktemplate
     * @param {Number} resourceTemplateId IngressTrunkTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/IngressTrunkTemplate} opts.body IngressTrunkTemplate to modify
     * @param {module:api/ConfigApi~configIngressTrunkTemplateResourceTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20085}
     */
    this.configIngressTrunkTemplateResourceTemplateIdPatch = function(resourceTemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'resourceTemplateId' is set
      if (resourceTemplateId === undefined || resourceTemplateId === null) {
        throw new Error("Missing the required parameter 'resourceTemplateId' when calling configIngressTrunkTemplateResourceTemplateIdPatch");
      }


      var pathParams = {
        'resource_template_id': resourceTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/config/ingress_trunk_template/{resource_template_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configInvoiceGet operation.
     * @callback module:api/ConfigApi~configInvoiceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - invoice settings
     * @param {module:api/ConfigApi~configInvoiceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20073}
     */
    this.configInvoiceGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/config/invoice', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configInvoicePatch operation.
     * @callback module:api/ConfigApi~configInvoicePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - invoice settings
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterInvoiceSetting} opts.body SystemParameter - Invoice settings to modify
     * @param {module:api/ConfigApi~configInvoicePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20073}
     */
    this.configInvoicePatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/config/invoice', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configLoginGet operation.
     * @callback module:api/ConfigApi~configLoginGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - login settings
     * @param {module:api/ConfigApi~configLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    this.configLoginGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/config/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configLoginPatch operation.
     * @callback module:api/ConfigApi~configLoginPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - login settings
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterLoginPage} opts.body SystemParameter - Login settings to modify
     * @param {module:api/ConfigApi~configLoginPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    this.configLoginPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/config/login', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configLoginPublicGet operation.
     * @callback module:api/ConfigApi~configLoginPublicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - login settings
     * @param {module:api/ConfigApi~configLoginPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    this.configLoginPublicGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/config/login/public', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configLrnGet operation.
     * @callback module:api/ConfigApi~configLrnGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - lrn settings
     * @param {module:api/ConfigApi~configLrnGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    this.configLrnGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/config/lrn', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configLrnPatch operation.
     * @callback module:api/ConfigApi~configLrnPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - lrn settings
     * @param {Object} opts Optional parameters
     * @param {module:model/C4Lrn} opts.body SystemParameter - LRN settings to modify
     * @param {module:api/ConfigApi~configLrnPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    this.configLrnPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/config/lrn', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderAllDelete operation.
     * @callback module:api/ConfigApi~configMailSenderAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found mailsender
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {Number} opts.id 
     * @param {String} opts.idIn 
     * @param {String} opts.mailServer 
     * @param {String} opts.name 
     * @param {module:model/String} opts.secure 
     * @param {String} opts.updateBy 
     * @param {String} opts.updateOnGt 
     * @param {String} opts.updateOnLt 
     * @param {String} opts.username 
     * @param {module:api/ConfigApi~configMailSenderAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configMailSenderAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
        'id': opts['id'],
        'id_in': opts['idIn'],
        'mail_server': opts['mailServer'],
        'name': opts['name'],
        'secure': opts['secure'],
        'update_by': opts['updateBy'],
        'update_on_gt': opts['updateOnGt'],
        'update_on_lt': opts['updateOnLt'],
        'username': opts['username'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/mail_sender/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderCreatePost operation.
     * @callback module:api/ConfigApi~configMailSenderCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new mailsender
     * @param {Object} opts Optional parameters
     * @param {module:model/MailSender} opts.body MailSender to create
     * @param {module:api/ConfigApi~configMailSenderCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configMailSenderCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/mail_sender/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderIdDelete operation.
     * @callback module:api/ConfigApi~configMailSenderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes mailsender
     * @param {Number} id MailSender id to get info about
     * @param {module:api/ConfigApi~configMailSenderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configMailSenderIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configMailSenderIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/mail_sender/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderIdGet operation.
     * @callback module:api/ConfigApi~configMailSenderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20054} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets mailsender
     * @param {Number} id MailSender id to get info about
     * @param {module:api/ConfigApi~configMailSenderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20054}
     */
    this.configMailSenderIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configMailSenderIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20054;

      return this.apiClient.callApi(
        '/config/mail_sender/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderIdPatch operation.
     * @callback module:api/ConfigApi~configMailSenderIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20054} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies mailsender
     * @param {Number} id MailSender id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/MailSenderModify} opts.body MailSender to modify
     * @param {module:api/ConfigApi~configMailSenderIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20054}
     */
    this.configMailSenderIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configMailSenderIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20054;

      return this.apiClient.callApi(
        '/config/mail_sender/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderIdTestPatch operation.
     * @callback module:api/ConfigApi~configMailSenderIdTestPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id sender id to test
     * @param {Object} opts Optional parameters
     * @param {module:model/MailSenderTest} opts.body Test mail
     * @param {module:api/ConfigApi~configMailSenderIdTestPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configMailSenderIdTestPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configMailSenderIdTestPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/mail_sender/{id}/test', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailSenderListGet operation.
     * @callback module:api/ConfigApi~configMailSenderListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20055} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets mailsenders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.email 
     * @param {Number} opts.id 
     * @param {String} opts.mailServer 
     * @param {String} opts.name 
     * @param {module:model/String} opts.secure 
     * @param {String} opts.updateBy 
     * @param {String} opts.username 
     * @param {String} opts.idIn 
     * @param {String} opts.updateOnGt 
     * @param {String} opts.updateOnLt 
     * @param {module:api/ConfigApi~configMailSenderListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20055}
     */
    this.configMailSenderListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'email': opts['email'],
        'id': opts['id'],
        'mail_server': opts['mailServer'],
        'name': opts['name'],
        'secure': opts['secure'],
        'update_by': opts['updateBy'],
        'username': opts['username'],
        'id_in': opts['idIn'],
        'update_on_gt': opts['updateOnGt'],
        'update_on_lt': opts['updateOnLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20055;

      return this.apiClient.callApi(
        '/config/mail_sender/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailTemplateListGet operation.
     * @callback module:api/ConfigApi~configMailTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets mailtemplates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.ccMail 
     * @param {Number} opts.fromMailId 
     * @param {String} opts.subject 
     * @param {String} opts.title 
     * @param {String} opts.toMail 
     * @param {module:api/ConfigApi~configMailTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20057}
     */
    this.configMailTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'cc_mail': opts['ccMail'],
        'from_mail_id': opts['fromMailId'],
        'subject': opts['subject'],
        'title': opts['title'],
        'to_mail': opts['toMail'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20057;

      return this.apiClient.callApi(
        '/config/mail_template/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailTemplateTitleGet operation.
     * @callback module:api/ConfigApi~configMailTemplateTitleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets mailtemplatescheme
     * @param {String} title MailTemplateScheme id to get info about
     * @param {module:api/ConfigApi~configMailTemplateTitleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20056}
     */
    this.configMailTemplateTitleGet = function(title, callback) {
      var postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling configMailTemplateTitleGet");
      }


      var pathParams = {
        'title': title
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20056;

      return this.apiClient.callApi(
        '/config/mail_template/{title}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configMailTemplateTitlePatch operation.
     * @callback module:api/ConfigApi~configMailTemplateTitlePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies mailtemplatescheme
     * @param {String} title MailTemplateScheme id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/MailTemplate} opts.body MailTemplateScheme to modify
     * @param {module:api/ConfigApi~configMailTemplateTitlePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20056}
     */
    this.configMailTemplateTitlePatch = function(title, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling configMailTemplateTitlePatch");
      }


      var pathParams = {
        'title': title
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20056;

      return this.apiClient.callApi(
        '/config/mail_template/{title}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentGet operation.
     * @callback module:api/ConfigApi~configPaymentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - payment settings
     * @param {module:api/ConfigApi~configPaymentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20074}
     */
    this.configPaymentGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/config/payment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentPatch operation.
     * @callback module:api/ConfigApi~configPaymentPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - payment settings
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterPaymentSetting} opts.body SystemParameter - Payment settings to modify
     * @param {module:api/ConfigApi~configPaymentPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20074}
     */
    this.configPaymentPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/config/payment', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermAllDelete operation.
     * @callback module:api/ConfigApi~configPaymentTermAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found paymentterm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.gracePeriod 
     * @param {String} opts.name 
     * @param {Number} opts.paymentTermId 
     * @param {String} opts.paymentTermIdIn 
     * @param {module:model/String} opts.type 
     * @param {Number} opts.usageCountGt 
     * @param {Number} opts.usageCountLt 
     * @param {module:api/ConfigApi~configPaymentTermAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configPaymentTermAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'grace_period': opts['gracePeriod'],
        'name': opts['name'],
        'payment_term_id': opts['paymentTermId'],
        'payment_term_id_in': opts['paymentTermIdIn'],
        'type': opts['type'],
        'usage_count_gt': opts['usageCountGt'],
        'usage_count_lt': opts['usageCountLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/payment_term/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermCreatePost operation.
     * @callback module:api/ConfigApi~configPaymentTermCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new paymentterm
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentTerm} opts.body PaymentTerm to create
     * @param {module:api/ConfigApi~configPaymentTermCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configPaymentTermCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/payment_term/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermListGet operation.
     * @callback module:api/ConfigApi~configPaymentTermListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20053} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets paymentterms
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.gracePeriod 
     * @param {String} opts.name 
     * @param {Number} opts.paymentTermId 
     * @param {module:model/String} opts.type 
     * @param {String} opts.paymentTermIdIn 
     * @param {Number} opts.usageCountGt 
     * @param {Number} opts.usageCountLt 
     * @param {module:api/ConfigApi~configPaymentTermListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20053}
     */
    this.configPaymentTermListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'grace_period': opts['gracePeriod'],
        'name': opts['name'],
        'payment_term_id': opts['paymentTermId'],
        'type': opts['type'],
        'payment_term_id_in': opts['paymentTermIdIn'],
        'usage_count_gt': opts['usageCountGt'],
        'usage_count_lt': opts['usageCountLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20053;

      return this.apiClient.callApi(
        '/config/payment_term/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermPaymentTermIdDelete operation.
     * @callback module:api/ConfigApi~configPaymentTermPaymentTermIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes paymentterm
     * @param {Number} paymentTermId PaymentTerm id to get info about
     * @param {module:api/ConfigApi~configPaymentTermPaymentTermIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configPaymentTermPaymentTermIdDelete = function(paymentTermId, callback) {
      var postBody = null;

      // verify the required parameter 'paymentTermId' is set
      if (paymentTermId === undefined || paymentTermId === null) {
        throw new Error("Missing the required parameter 'paymentTermId' when calling configPaymentTermPaymentTermIdDelete");
      }


      var pathParams = {
        'payment_term_id': paymentTermId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/payment_term/{payment_term_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermPaymentTermIdGet operation.
     * @callback module:api/ConfigApi~configPaymentTermPaymentTermIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets paymentterm
     * @param {Number} paymentTermId PaymentTerm id to get info about
     * @param {module:api/ConfigApi~configPaymentTermPaymentTermIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20052}
     */
    this.configPaymentTermPaymentTermIdGet = function(paymentTermId, callback) {
      var postBody = null;

      // verify the required parameter 'paymentTermId' is set
      if (paymentTermId === undefined || paymentTermId === null) {
        throw new Error("Missing the required parameter 'paymentTermId' when calling configPaymentTermPaymentTermIdGet");
      }


      var pathParams = {
        'payment_term_id': paymentTermId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20052;

      return this.apiClient.callApi(
        '/config/payment_term/{payment_term_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configPaymentTermPaymentTermIdPatch operation.
     * @callback module:api/ConfigApi~configPaymentTermPaymentTermIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies paymentterm
     * @param {Number} paymentTermId PaymentTerm id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentTerm} opts.body PaymentTerm to modify
     * @param {module:api/ConfigApi~configPaymentTermPaymentTermIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20052}
     */
    this.configPaymentTermPaymentTermIdPatch = function(paymentTermId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentTermId' is set
      if (paymentTermId === undefined || paymentTermId === null) {
        throw new Error("Missing the required parameter 'paymentTermId' when calling configPaymentTermPaymentTermIdPatch");
      }


      var pathParams = {
        'payment_term_id': paymentTermId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20052;

      return this.apiClient.callApi(
        '/config/payment_term/{payment_term_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleCreatePost operation.
     * @callback module:api/ConfigApi~configRoleCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new role
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.body Role to create
     * @param {module:api/ConfigApi~configRoleCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configRoleCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/role/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleListGet operation.
     * @callback module:api/ConfigApi~configRoleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.roleId 
     * @param {String} opts.roleName 
     * @param {Number} opts.userCount 
     * @param {module:api/ConfigApi~configRoleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20049}
     */
    this.configRoleListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'role_id': opts['roleId'],
        'role_name': opts['roleName'],
        'user_count': opts['userCount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20049;

      return this.apiClient.callApi(
        '/config/role/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRolePrivilegeRolePrivilegeIdDelete operation.
     * @callback module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes roleprivilege
     * @param {Number} rolePrivilegeId RolePrivilege id to get info about
     * @param {module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configRolePrivilegeRolePrivilegeIdDelete = function(rolePrivilegeId, callback) {
      var postBody = null;

      // verify the required parameter 'rolePrivilegeId' is set
      if (rolePrivilegeId === undefined || rolePrivilegeId === null) {
        throw new Error("Missing the required parameter 'rolePrivilegeId' when calling configRolePrivilegeRolePrivilegeIdDelete");
      }


      var pathParams = {
        'role_privilege_id': rolePrivilegeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/role/privilege/{role_privilege_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRolePrivilegeRolePrivilegeIdGet operation.
     * @callback module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets roleprivilege
     * @param {Number} rolePrivilegeId RolePrivilege id to get info about
     * @param {module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20050}
     */
    this.configRolePrivilegeRolePrivilegeIdGet = function(rolePrivilegeId, callback) {
      var postBody = null;

      // verify the required parameter 'rolePrivilegeId' is set
      if (rolePrivilegeId === undefined || rolePrivilegeId === null) {
        throw new Error("Missing the required parameter 'rolePrivilegeId' when calling configRolePrivilegeRolePrivilegeIdGet");
      }


      var pathParams = {
        'role_privilege_id': rolePrivilegeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/config/role/privilege/{role_privilege_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRolePrivilegeRolePrivilegeIdPatch operation.
     * @callback module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies roleprivilege
     * @param {Number} rolePrivilegeId RolePrivilege id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/RolePrivilege} opts.body RolePrivilege to modify
     * @param {module:api/ConfigApi~configRolePrivilegeRolePrivilegeIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20050}
     */
    this.configRolePrivilegeRolePrivilegeIdPatch = function(rolePrivilegeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'rolePrivilegeId' is set
      if (rolePrivilegeId === undefined || rolePrivilegeId === null) {
        throw new Error("Missing the required parameter 'rolePrivilegeId' when calling configRolePrivilegeRolePrivilegeIdPatch");
      }


      var pathParams = {
        'role_privilege_id': rolePrivilegeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/config/role/privilege/{role_privilege_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdDefaultsPatch operation.
     * @callback module:api/ConfigApi~configRoleRoleIdDefaultsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} roleId role_id to fill
     * @param {module:api/ConfigApi~configRoleRoleIdDefaultsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configRoleRoleIdDefaultsPatch = function(roleId, callback) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdDefaultsPatch");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/role/{role_id}/defaults', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdDelete operation.
     * @callback module:api/ConfigApi~configRoleRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes role
     * @param {Number} roleId Role id to get info about
     * @param {module:api/ConfigApi~configRoleRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configRoleRoleIdDelete = function(roleId, callback) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdDelete");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/role/{role_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdGet operation.
     * @callback module:api/ConfigApi~configRoleRoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets role
     * @param {Number} roleId Role id to get info about
     * @param {module:api/ConfigApi~configRoleRoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20048}
     */
    this.configRoleRoleIdGet = function(roleId, callback) {
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdGet");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20048;

      return this.apiClient.callApi(
        '/config/role/{role_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdPatch operation.
     * @callback module:api/ConfigApi~configRoleRoleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies role
     * @param {Number} roleId Role id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.body Role to modify
     * @param {module:api/ConfigApi~configRoleRoleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20048}
     */
    this.configRoleRoleIdPatch = function(roleId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdPatch");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20048;

      return this.apiClient.callApi(
        '/config/role/{role_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdPrivilegeListGet operation.
     * @callback module:api/ConfigApi~configRoleRoleIdPrivilegeListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets roleprivileges
     * @param {Number} roleId Parent role role_id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/ConfigApi~configRoleRoleIdPrivilegeListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20051}
     */
    this.configRoleRoleIdPrivilegeListGet = function(roleId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdPrivilegeListGet");
      }


      var pathParams = {
        'role_id': roleId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20051;

      return this.apiClient.callApi(
        '/config/role/{role_id}/privilege/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdPrivilegesGet operation.
     * @callback module:api/ConfigApi~configRoleRoleIdPrivilegesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.roleId 
     * @param {String} opts.roleName 
     * @param {Number} opts.userCount 
     * @param {module:api/ConfigApi~configRoleRoleIdPrivilegesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20049}
     */
    this.configRoleRoleIdPrivilegesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'role_id': opts['roleId'],
        'role_name': opts['roleName'],
        'user_count': opts['userCount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20049;

      return this.apiClient.callApi(
        '/config/role/{role_id}/privileges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRoleRoleIdSystemFunctionIdPrivilegePost operation.
     * @callback module:api/ConfigApi~configRoleRoleIdSystemFunctionIdPrivilegePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new roleprivilege
     * @param {Number} roleId Parent role role_id
     * @param {Number} systemFunctionId Assigned system_function_id
     * @param {Object} opts Optional parameters
     * @param {module:model/RolePrivilege} opts.body RolePrivilege to create
     * @param {module:api/ConfigApi~configRoleRoleIdSystemFunctionIdPrivilegePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configRoleRoleIdSystemFunctionIdPrivilegePost = function(roleId, systemFunctionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling configRoleRoleIdSystemFunctionIdPrivilegePost");
      }

      // verify the required parameter 'systemFunctionId' is set
      if (systemFunctionId === undefined || systemFunctionId === null) {
        throw new Error("Missing the required parameter 'systemFunctionId' when calling configRoleRoleIdSystemFunctionIdPrivilegePost");
      }


      var pathParams = {
        'role_id': roleId,
        'system_function_id': systemFunctionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/role/{role_id}/{system_function_id}/privilege', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRouteErrorIdGet operation.
     * @callback module:api/ConfigApi~configRouteErrorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20062} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets globalrouteerror
     * @param {Number} id GlobalRouteError id to get info about
     * @param {module:api/ConfigApi~configRouteErrorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20062}
     */
    this.configRouteErrorIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configRouteErrorIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20062;

      return this.apiClient.callApi(
        '/config/route_error/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRouteErrorIdPatch operation.
     * @callback module:api/ConfigApi~configRouteErrorIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20062} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies globalrouteerror
     * @param {Number} id GlobalRouteError id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalRouteErrorModify} opts.body GlobalRouteError to modify
     * @param {module:api/ConfigApi~configRouteErrorIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20062}
     */
    this.configRouteErrorIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configRouteErrorIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20062;

      return this.apiClient.callApi(
        '/config/route_error/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRouteErrorListGet operation.
     * @callback module:api/ConfigApi~configRouteErrorListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20063} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets globalrouteerrors
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.defaultToSipCode 
     * @param {Number} opts.errorCode 
     * @param {Number} opts.id 
     * @param {Number} opts.toSipCode 
     * @param {module:api/ConfigApi~configRouteErrorListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20063}
     */
    this.configRouteErrorListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'default_to_sip_code': opts['defaultToSipCode'],
        'error_code': opts['errorCode'],
        'id': opts['id'],
        'to_sip_code': opts['toSipCode'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20063;

      return this.apiClient.callApi(
        '/config/route_error/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configRouteErrorPatch operation.
     * @callback module:api/ConfigApi~configRouteErrorPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/GlobalRouteErrorMany} opts.body Global Route Error items
     * @param {module:api/ConfigApi~configRouteErrorPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configRouteErrorPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/route_error', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateAllDelete operation.
     * @callback module:api/ConfigApi~configSendRateTemplateAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found sendratetemplate
     * @param {Object} opts Optional parameters
     * @param {String} opts.idIn 
     * @param {String} opts.mailCc 
     * @param {Number} opts.senderId 
     * @param {module:api/ConfigApi~configSendRateTemplateAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configSendRateTemplateAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id_in': opts['idIn'],
        'mail_cc': opts['mailCc'],
        'sender_id': opts['senderId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/send_rate_template/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateCreatePost operation.
     * @callback module:api/ConfigApi~configSendRateTemplateCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new sendratetemplate
     * @param {Object} opts Optional parameters
     * @param {module:model/SendRateTemplate} opts.body SendRateTemplate to create
     * @param {module:api/ConfigApi~configSendRateTemplateCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configSendRateTemplateCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/send_rate_template/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateIdDelete operation.
     * @callback module:api/ConfigApi~configSendRateTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes sendratetemplate
     * @param {Number} id SendRateTemplate id to get info about
     * @param {module:api/ConfigApi~configSendRateTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configSendRateTemplateIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configSendRateTemplateIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/send_rate_template/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateIdGet operation.
     * @callback module:api/ConfigApi~configSendRateTemplateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets sendratetemplate
     * @param {Number} id SendRateTemplate id to get info about
     * @param {module:api/ConfigApi~configSendRateTemplateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20058}
     */
    this.configSendRateTemplateIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configSendRateTemplateIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/config/send_rate_template/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateIdPatch operation.
     * @callback module:api/ConfigApi~configSendRateTemplateIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies sendratetemplate
     * @param {Number} id SendRateTemplate id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SendRateTemplateModify} opts.body SendRateTemplate to modify
     * @param {module:api/ConfigApi~configSendRateTemplateIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20058}
     */
    this.configSendRateTemplateIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configSendRateTemplateIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/config/send_rate_template/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSendRateTemplateListGet operation.
     * @callback module:api/ConfigApi~configSendRateTemplateListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20059} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets sendratetemplate list
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.mailCc 
     * @param {Number} opts.senderId 
     * @param {String} opts.idIn 
     * @param {module:api/ConfigApi~configSendRateTemplateListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20059}
     */
    this.configSendRateTemplateListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'mail_cc': opts['mailCc'],
        'sender_id': opts['senderId'],
        'id_in': opts['idIn'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20059;

      return this.apiClient.callApi(
        '/config/send_rate_template/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemFunctionListGet operation.
     * @callback module:api/ConfigApi~configSystemFunctionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20046} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemfunctions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.funcName 
     * @param {String} opts.funcType 
     * @param {String} opts.imageName 
     * @param {Boolean} opts.isExe 
     * @param {Boolean} opts.isRead 
     * @param {Boolean} opts.isWrite 
     * @param {module:api/ConfigApi~configSystemFunctionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20046}
     */
    this.configSystemFunctionListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'func_name': opts['funcName'],
        'func_type': opts['funcType'],
        'image_name': opts['imageName'],
        'is_exe': opts['isExe'],
        'is_read': opts['isRead'],
        'is_write': opts['isWrite'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20046;

      return this.apiClient.callApi(
        '/config/system_function/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemFunctionSystemFunctionIdDelete operation.
     * @callback module:api/ConfigApi~configSystemFunctionSystemFunctionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes systemfunction
     * @param {Number} systemFunctionId SystemFunction id to get info about
     * @param {module:api/ConfigApi~configSystemFunctionSystemFunctionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configSystemFunctionSystemFunctionIdDelete = function(systemFunctionId, callback) {
      var postBody = null;

      // verify the required parameter 'systemFunctionId' is set
      if (systemFunctionId === undefined || systemFunctionId === null) {
        throw new Error("Missing the required parameter 'systemFunctionId' when calling configSystemFunctionSystemFunctionIdDelete");
      }


      var pathParams = {
        'system_function_id': systemFunctionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/system_function/{system_function_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemFunctionSystemFunctionIdGet operation.
     * @callback module:api/ConfigApi~configSystemFunctionSystemFunctionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemfunction
     * @param {Number} systemFunctionId SystemFunction id to get info about
     * @param {module:api/ConfigApi~configSystemFunctionSystemFunctionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20045}
     */
    this.configSystemFunctionSystemFunctionIdGet = function(systemFunctionId, callback) {
      var postBody = null;

      // verify the required parameter 'systemFunctionId' is set
      if (systemFunctionId === undefined || systemFunctionId === null) {
        throw new Error("Missing the required parameter 'systemFunctionId' when calling configSystemFunctionSystemFunctionIdGet");
      }


      var pathParams = {
        'system_function_id': systemFunctionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/config/system_function/{system_function_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemFunctionSystemFunctionIdPatch operation.
     * @callback module:api/ConfigApi~configSystemFunctionSystemFunctionIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemfunction
     * @param {Number} systemFunctionId SystemFunction id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemFunction} opts.body SystemFunction to modify
     * @param {module:api/ConfigApi~configSystemFunctionSystemFunctionIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20045}
     */
    this.configSystemFunctionSystemFunctionIdPatch = function(systemFunctionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'systemFunctionId' is set
      if (systemFunctionId === undefined || systemFunctionId === null) {
        throw new Error("Missing the required parameter 'systemFunctionId' when calling configSystemFunctionSystemFunctionIdPatch");
      }


      var pathParams = {
        'system_function_id': systemFunctionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/config/system_function/{system_function_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemFunctionSystemFunctionIdPost operation.
     * @callback module:api/ConfigApi~configSystemFunctionSystemFunctionIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new systemfunction
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemFunction} opts.body SystemFunction to create
     * @param {module:api/ConfigApi~configSystemFunctionSystemFunctionIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configSystemFunctionSystemFunctionIdPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/system_function/{system_function_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemGet operation.
     * @callback module:api/ConfigApi~configSystemGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - system settings
     * @param {module:api/ConfigApi~configSystemGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    this.configSystemGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/config/system', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemModulesListGet operation.
     * @callback module:api/ConfigApi~configSystemModulesListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20047} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemmodules
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {module:api/ConfigApi~configSystemModulesListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20047}
     */
    this.configSystemModulesListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20047;

      return this.apiClient.callApi(
        '/config/system_modules/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configSystemPatch operation.
     * @callback module:api/ConfigApi~configSystemPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - system settings
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterSystemSetting} opts.body SystemParameter - System settings to modify
     * @param {module:api/ConfigApi~configSystemPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    this.configSystemPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/config/system', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileAllDelete operation.
     * @callback module:api/ConfigApi~configTimeProfileAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found timeprofile
     * @param {Object} opts Optional parameters
     * @param {Number} opts.endDayOfWeekGt 
     * @param {Number} opts.endDayOfWeekLt 
     * @param {String} opts.name 
     * @param {Number} opts.startDayOfWeekGt 
     * @param {Number} opts.startDayOfWeekLt 
     * @param {String} opts.timeProfileIdIn 
     * @param {module:model/String} opts.type 
     * @param {module:api/ConfigApi~configTimeProfileAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configTimeProfileAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'end_day_of_week_gt': opts['endDayOfWeekGt'],
        'end_day_of_week_lt': opts['endDayOfWeekLt'],
        'name': opts['name'],
        'start_day_of_week_gt': opts['startDayOfWeekGt'],
        'start_day_of_week_lt': opts['startDayOfWeekLt'],
        'time_profile_id_in': opts['timeProfileIdIn'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/time_profile/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileCreatePost operation.
     * @callback module:api/ConfigApi~configTimeProfileCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new timeprofile
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeProfile} opts.body TimeProfile to create
     * @param {module:api/ConfigApi~configTimeProfileCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configTimeProfileCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/time_profile/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileListGet operation.
     * @callback module:api/ConfigApi~configTimeProfileListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20044} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets timeprofiles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.name 
     * @param {module:model/String} opts.type 
     * @param {Number} opts.endDayOfWeekGt 
     * @param {Number} opts.endDayOfWeekLt 
     * @param {Number} opts.startDayOfWeekGt 
     * @param {Number} opts.startDayOfWeekLt 
     * @param {String} opts.timeProfileIdIn 
     * @param {module:api/ConfigApi~configTimeProfileListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20044}
     */
    this.configTimeProfileListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'name': opts['name'],
        'type': opts['type'],
        'end_day_of_week_gt': opts['endDayOfWeekGt'],
        'end_day_of_week_lt': opts['endDayOfWeekLt'],
        'start_day_of_week_gt': opts['startDayOfWeekGt'],
        'start_day_of_week_lt': opts['startDayOfWeekLt'],
        'time_profile_id_in': opts['timeProfileIdIn'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20044;

      return this.apiClient.callApi(
        '/config/time_profile/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileTimeProfileIdDelete operation.
     * @callback module:api/ConfigApi~configTimeProfileTimeProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes timeprofile
     * @param {Number} timeProfileId TimeProfile id to get info about
     * @param {module:api/ConfigApi~configTimeProfileTimeProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configTimeProfileTimeProfileIdDelete = function(timeProfileId, callback) {
      var postBody = null;

      // verify the required parameter 'timeProfileId' is set
      if (timeProfileId === undefined || timeProfileId === null) {
        throw new Error("Missing the required parameter 'timeProfileId' when calling configTimeProfileTimeProfileIdDelete");
      }


      var pathParams = {
        'time_profile_id': timeProfileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/time_profile/{time_profile_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileTimeProfileIdGet operation.
     * @callback module:api/ConfigApi~configTimeProfileTimeProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20043} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets timeprofile
     * @param {Number} timeProfileId TimeProfile id to get info about
     * @param {module:api/ConfigApi~configTimeProfileTimeProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20043}
     */
    this.configTimeProfileTimeProfileIdGet = function(timeProfileId, callback) {
      var postBody = null;

      // verify the required parameter 'timeProfileId' is set
      if (timeProfileId === undefined || timeProfileId === null) {
        throw new Error("Missing the required parameter 'timeProfileId' when calling configTimeProfileTimeProfileIdGet");
      }


      var pathParams = {
        'time_profile_id': timeProfileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20043;

      return this.apiClient.callApi(
        '/config/time_profile/{time_profile_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeProfileTimeProfileIdPatch operation.
     * @callback module:api/ConfigApi~configTimeProfileTimeProfileIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20043} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies timeprofile
     * @param {Number} timeProfileId TimeProfile id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeProfile} opts.body TimeProfile to modify
     * @param {module:api/ConfigApi~configTimeProfileTimeProfileIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20043}
     */
    this.configTimeProfileTimeProfileIdPatch = function(timeProfileId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'timeProfileId' is set
      if (timeProfileId === undefined || timeProfileId === null) {
        throw new Error("Missing the required parameter 'timeProfileId' when calling configTimeProfileTimeProfileIdPatch");
      }


      var pathParams = {
        'time_profile_id': timeProfileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20043;

      return this.apiClient.callApi(
        '/config/time_profile/{time_profile_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeoutsGet operation.
     * @callback module:api/ConfigApi~configTimeoutsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets systemparameter - system timeouts
     * @param {module:api/ConfigApi~configTimeoutsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    this.configTimeoutsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/config/timeouts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configTimeoutsPatch operation.
     * @callback module:api/ConfigApi~configTimeoutsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies systemparameter - system timeouts
     * @param {Object} opts Optional parameters
     * @param {module:model/SystemParameterSystemTimeouts} opts.body SystemParameter - System timeouts to modify
     * @param {module:api/ConfigApi~configTimeoutsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    this.configTimeoutsPatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/config/timeouts', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixAllDelete operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixAllDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple found jurisdictionprefix
     * @param {Object} opts Optional parameters
     * @param {String} opts.country 
     * @param {String} opts.effectiveDateGt 
     * @param {String} opts.effectiveDateLt 
     * @param {String} opts.idIn 
     * @param {String} opts.lata 
     * @param {String} opts.ocn 
     * @param {String} opts.prefix 
     * @param {String} opts.state 
     * @param {module:api/ConfigApi~configUsJurisdictionprefixAllDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.configUsJurisdictionprefixAllDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'country': opts['country'],
        'effective_date_gt': opts['effectiveDateGt'],
        'effective_date_lt': opts['effectiveDateLt'],
        'id_in': opts['idIn'],
        'lata': opts['lata'],
        'ocn': opts['ocn'],
        'prefix': opts['prefix'],
        'state': opts['state'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/all', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixCreatePost operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new jurisdictionprefix
     * @param {Object} opts Optional parameters
     * @param {module:model/JurisdictionPrefix} opts.body JurisdictionPrefix to create
     * @param {module:api/ConfigApi~configUsJurisdictionprefixCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectCreated}
     */
    this.configUsJurisdictionprefixCreatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectCreated;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixIdDelete operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes jurisdictionprefix
     * @param {Number} id JurisdictionPrefix id to get info about
     * @param {module:api/ConfigApi~configUsJurisdictionprefixIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.configUsJurisdictionprefixIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configUsJurisdictionprefixIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixIdGet operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets jurisdictionprefix
     * @param {Number} id JurisdictionPrefix id to get info about
     * @param {module:api/ConfigApi~configUsJurisdictionprefixIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    this.configUsJurisdictionprefixIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configUsJurisdictionprefixIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixIdPatch operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies jurisdictionprefix
     * @param {Number} id JurisdictionPrefix id to get info about
     * @param {Object} opts Optional parameters
     * @param {module:model/JurisdictionPrefix} opts.body JurisdictionPrefix to modify
     * @param {module:api/ConfigApi~configUsJurisdictionprefixIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    this.configUsJurisdictionprefixIdPatch = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling configUsJurisdictionprefixIdPatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configUsJurisdictionprefixListGet operation.
     * @callback module:api/ConfigApi~configUsJurisdictionprefixListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets jurisdictionprefixes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.country 
     * @param {String} opts.lata 
     * @param {String} opts.ocn 
     * @param {String} opts.prefix 
     * @param {String} opts.state 
     * @param {String} opts.effectiveDateGt 
     * @param {String} opts.effectiveDateLt 
     * @param {String} opts.idIn 
     * @param {module:api/ConfigApi~configUsJurisdictionprefixListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20080}
     */
    this.configUsJurisdictionprefixListGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'country': opts['country'],
        'lata': opts['lata'],
        'ocn': opts['ocn'],
        'prefix': opts['prefix'],
        'state': opts['state'],
        'effective_date_gt': opts['effectiveDateGt'],
        'effective_date_lt': opts['effectiveDateLt'],
        'id_in': opts['idIn'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/config/us_jurisdictionprefix/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
