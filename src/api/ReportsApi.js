/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.62
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttributeNotExists', 'model/InlineResponse200124', 'model/InlineResponse200153', 'model/UnauthenticatedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttributeNotExists'), require('../model/InlineResponse200124'), require('../model/InlineResponse200153'), require('../model/UnauthenticatedError'));
  } else {
    // Browser globals (root is window)
    if (!root.DnlApi) {
      root.DnlApi = {};
    }
    root.DnlApi.ReportsApi = factory(root.DnlApi.ApiClient, root.DnlApi.AttributeNotExists, root.DnlApi.InlineResponse200124, root.DnlApi.InlineResponse200153, root.DnlApi.UnauthenticatedError);
  }
}(this, function(ApiClient, AttributeNotExists, InlineResponse200124, InlineResponse200153, UnauthenticatedError) {
  'use strict';

  /**
   * Reports service.
   * @module api/ReportsApi
   * @version 1.2.62
   */

  /**
   * Constructs a new ReportsApi. 
   * @alias module:api/ReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the reportCdrActiveGet operation.
     * @callback module:api/ReportsApi~reportCdrActiveGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200153} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets clientcdr
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {Number} opts.egressClientId 
     * @param {Number} opts.egressId 
     * @param {Number} opts.ingressClientId 
     * @param {Number} opts.ingressId 
     * @param {String} opts.lrnDnis 
     * @param {String} opts.originationSourceHostName 
     * @param {String} opts.terminationSourceHostName 
     * @param {String} opts.translationAni 
     * @param {module:api/ReportsApi~reportCdrActiveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200153}
     */
    this.reportCdrActiveGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'egress_client_id': opts['egressClientId'],
        'egress_id': opts['egressId'],
        'ingress_client_id': opts['ingressClientId'],
        'ingress_id': opts['ingressId'],
        'lrn_dnis': opts['lrnDnis'],
        'origination_source_host_name': opts['originationSourceHostName'],
        'termination_source_host_name': opts['terminationSourceHostName'],
        'translation_ani': opts['translationAni'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200153;

      return this.apiClient.callApi(
        '/report/cdr_active', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportSipActiveGet operation.
     * @callback module:api/ReportsApi~reportSipActiveGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets sipregistrationsactive
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.perPage 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.orderDir 
     * @param {String} opts.contact 
     * @param {Number} opts.expires 
     * @param {Number} opts.id 
     * @param {String} opts.networkIp 
     * @param {Number} opts.networkPort 
     * @param {module:model/String} opts.status 
     * @param {String} opts.username 
     * @param {String} opts.uptimeGt 
     * @param {String} opts.uptimeLt 
     * @param {module:api/ReportsApi~reportSipActiveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200124}
     */
    this.reportSipActiveGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'order_by': opts['orderBy'],
        'order_dir': opts['orderDir'],
        'contact': opts['contact'],
        'expires': opts['expires'],
        'id': opts['id'],
        'network_ip': opts['networkIp'],
        'network_port': opts['networkPort'],
        'status': opts['status'],
        'username': opts['username'],
        'uptime_gt': opts['uptimeGt'],
        'uptime_lt': opts['uptimeLt'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/report/sip_active', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
