/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DnlApi);
  }
}(this, function(expect, DnlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DnlApi.SwitchProfile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SwitchProfile', function() {
    it('should create an instance of SwitchProfile', function() {
      // uncomment below and update the code to test SwitchProfile
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be.a(DnlApi.SwitchProfile);
    });

    it('should have the property sipTrace (base name: "sip_trace")', function() {
      // uncomment below and update the code to test the property sipTrace
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property reportPort (base name: "report_port")', function() {
      // uncomment below and update the code to test the property reportPort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportXHeader (base name: "support_x_header")', function() {
      // uncomment below and update the code to test the property supportXHeader
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property authRegister (base name: "auth_register")', function() {
      // uncomment below and update the code to test the property authRegister
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property activeCallPort (base name: "active_call_port")', function() {
      // uncomment below and update the code to test the property activeCallPort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property lanIp (base name: "lan_ip")', function() {
      // uncomment below and update the code to test the property lanIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property pcapToken (base name: "pcap_token")', function() {
      // uncomment below and update the code to test the property pcapToken
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property profileName (base name: "profile_name")', function() {
      // uncomment below and update the code to test the property profileName
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipIp (base name: "sip_ip")', function() {
      // uncomment below and update the code to test the property sipIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportOli (base name: "support_oli")', function() {
      // uncomment below and update the code to test the property supportOli
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportRpid (base name: "support_rpid")', function() {
      // uncomment below and update the code to test the property supportRpid
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportPriv (base name: "support_priv")', function() {
      // uncomment below and update the code to test the property supportPriv
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipCapturePort (base name: "sip_capture_port")', function() {
      // uncomment below and update the code to test the property sipCapturePort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipCaptureIp (base name: "sip_capture_ip")', function() {
      // uncomment below and update the code to test the property sipCaptureIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property profileStatus (base name: "profile_status")', function() {
      // uncomment below and update the code to test the property profileStatus
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property cps (base name: "cps")', function() {
      // uncomment below and update the code to test the property cps
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipPort (base name: "sip_port")', function() {
      // uncomment below and update the code to test the property sipPort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property paidReplaceIp (base name: "paid_replace_ip")', function() {
      // uncomment below and update the code to test the property paidReplaceIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportPaid (base name: "support_paid")', function() {
      // uncomment below and update the code to test the property supportPaid
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipCapturePath (base name: "sip_capture_path")', function() {
      // uncomment below and update the code to test the property sipCapturePath
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property cap (base name: "cap")', function() {
      // uncomment below and update the code to test the property cap
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property proxyPort (base name: "proxy_port")', function() {
      // uncomment below and update the code to test the property proxyPort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportPci (base name: "support_pci")', function() {
      // uncomment below and update the code to test the property supportPci
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property sipDebug (base name: "sip_debug")', function() {
      // uncomment below and update the code to test the property sipDebug
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportDiv (base name: "support_div")', function() {
      // uncomment below and update the code to test the property supportDiv
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property lanPort (base name: "lan_port")', function() {
      // uncomment below and update the code to test the property lanPort
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property switchId (base name: "switch_id")', function() {
      // uncomment below and update the code to test the property switchId
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property activeCallIp (base name: "active_call_ip")', function() {
      // uncomment below and update the code to test the property activeCallIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property proxyIp (base name: "proxy_ip")', function() {
      // uncomment below and update the code to test the property proxyIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportXLrn (base name: "support_x_lrn")', function() {
      // uncomment below and update the code to test the property supportXLrn
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property reportIp (base name: "report_ip")', function() {
      // uncomment below and update the code to test the property reportIp
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property switchName (base name: "switch_name")', function() {
      // uncomment below and update the code to test the property switchName
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property defaultRegister (base name: "default_register")', function() {
      // uncomment below and update the code to test the property defaultRegister
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "host_name")', function() {
      // uncomment below and update the code to test the property hostName
      //var instane = new DnlApi.SwitchProfile();
      //expect(instance).to.be();
    });

  });

}));
