/**
 * DNL API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.10
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DnlApi);
  }
}(this, function(expect, DnlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DnlApi.FtpConf();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FtpConf', function() {
    it('should create an instance of FtpConf', function() {
      // uncomment below and update the code to test FtpConf
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be.a(DnlApi.FtpConf);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property compression (base name: "compression")', function() {
      // uncomment below and update the code to test the property compression
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property egressTrunks (base name: "egress_trunks")', function() {
      // uncomment below and update the code to test the property egressTrunks
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property frequency (base name: "frequency")', function() {
      // uncomment below and update the code to test the property frequency
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property includeAllEgress (base name: "include_all_egress")', function() {
      // uncomment below and update the code to test the property includeAllEgress
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ftpUsername (base name: "ftp_username")', function() {
      // uncomment below and update the code to test the property ftpUsername
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ftpDirectory (base name: "ftp_directory")', function() {
      // uncomment below and update the code to test the property ftpDirectory
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property includeFields (base name: "include_fields")', function() {
      // uncomment below and update the code to test the property includeFields
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property maxLinePerFile (base name: "max_line_per_file")', function() {
      // uncomment below and update the code to test the property maxLinePerFile
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property origReturnCode (base name: "orig_return_code")', function() {
      // uncomment below and update the code to test the property origReturnCode
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ingressTrunks (base name: "ingress_trunks")', function() {
      // uncomment below and update the code to test the property ingressTrunks
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ftpServerIp (base name: "ftp_server_ip")', function() {
      // uncomment below and update the code to test the property ftpServerIp
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property nonZero (base name: "non_zero")', function() {
      // uncomment below and update the code to test the property nonZero
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ftpServerPort (base name: "ftp_server_port")', function() {
      // uncomment below and update the code to test the property ftpServerPort
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "time")', function() {
      // uncomment below and update the code to test the property time
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property fileBreakdown (base name: "file_breakdown")', function() {
      // uncomment below and update the code to test the property fileBreakdown
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property ftpPassword (base name: "ftp_password")', function() {
      // uncomment below and update the code to test the property ftpPassword
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property includeAllIngress (base name: "include_all_ingress")', function() {
      // uncomment below and update the code to test the property includeAllIngress
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property termReturnCode (base name: "term_return_code")', function() {
      // uncomment below and update the code to test the property termReturnCode
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

    it('should have the property includeHeader (base name: "include_header")', function() {
      // uncomment below and update the code to test the property includeHeader
      //var instane = new DnlApi.FtpConf();
      //expect(instance).to.be();
    });

  });

}));
